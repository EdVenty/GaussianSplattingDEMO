var HC=Object.defineProperty;var GC=(r,e,t)=>e in r?HC(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var nt=(r,e,t)=>GC(r,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const c of o.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&n(c)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();function VC(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var Um={exports:{}},au={};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var dA;function kC(){if(dA)return au;dA=1;var r=Symbol.for("react.transitional.element"),e=Symbol.for("react.fragment");function t(n,s,o){var c=null;if(o!==void 0&&(c=""+o),s.key!==void 0&&(c=""+s.key),"key"in s){o={};for(var u in s)u!=="key"&&(o[u]=s[u])}else o=s;return s=o.ref,{$$typeof:r,type:n,key:c,ref:s!==void 0?s:null,props:o}}return au.Fragment=e,au.jsx=t,au.jsxs=t,au}var hA;function WC(){return hA||(hA=1,Um.exports=kC()),Um.exports}var Ui=WC(),Im={exports:{}},Ut={};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var pA;function XC(){if(pA)return Ut;pA=1;var r=Symbol.for("react.transitional.element"),e=Symbol.for("react.portal"),t=Symbol.for("react.fragment"),n=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.consumer"),c=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),m=Symbol.iterator;function g(F){return F===null||typeof F!="object"?null:(F=m&&F[m]||F["@@iterator"],typeof F=="function"?F:null)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A=Object.assign,y={};function S(F,ee,ce){this.props=F,this.context=ee,this.refs=y,this.updater=ce||v}S.prototype.isReactComponent={},S.prototype.setState=function(F,ee){if(typeof F!="object"&&typeof F!="function"&&F!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,F,ee,"setState")},S.prototype.forceUpdate=function(F){this.updater.enqueueForceUpdate(this,F,"forceUpdate")};function _(){}_.prototype=S.prototype;function b(F,ee,ce){this.props=F,this.context=ee,this.refs=y,this.updater=ce||v}var E=b.prototype=new _;E.constructor=b,A(E,S.prototype),E.isPureReactComponent=!0;var R=Array.isArray,D={H:null,A:null,T:null,S:null,V:null},L=Object.prototype.hasOwnProperty;function w(F,ee,ce,ie,j,ue){return ce=ue.ref,{$$typeof:r,type:F,key:ee,ref:ce!==void 0?ce:null,props:ue}}function B(F,ee){return w(F.type,ee,void 0,void 0,void 0,F.props)}function C(F){return typeof F=="object"&&F!==null&&F.$$typeof===r}function T(F){var ee={"=":"=0",":":"=2"};return"$"+F.replace(/[=:]/g,function(ce){return ee[ce]})}var O=/\/+/g;function X(F,ee){return typeof F=="object"&&F!==null&&F.key!=null?T(""+F.key):ee.toString(36)}function $(){}function z(F){switch(F.status){case"fulfilled":return F.value;case"rejected":throw F.reason;default:switch(typeof F.status=="string"?F.then($,$):(F.status="pending",F.then(function(ee){F.status==="pending"&&(F.status="fulfilled",F.value=ee)},function(ee){F.status==="pending"&&(F.status="rejected",F.reason=ee)})),F.status){case"fulfilled":return F.value;case"rejected":throw F.reason}}throw F}function k(F,ee,ce,ie,j){var ue=typeof F;(ue==="undefined"||ue==="boolean")&&(F=null);var ge=!1;if(F===null)ge=!0;else switch(ue){case"bigint":case"string":case"number":ge=!0;break;case"object":switch(F.$$typeof){case r:case e:ge=!0;break;case p:return ge=F._init,k(ge(F._payload),ee,ce,ie,j)}}if(ge)return j=j(F),ge=ie===""?"."+X(F,0):ie,R(j)?(ce="",ge!=null&&(ce=ge.replace(O,"$&/")+"/"),k(j,ee,ce,"",function(Ze){return Ze})):j!=null&&(C(j)&&(j=B(j,ce+(j.key==null||F&&F.key===j.key?"":(""+j.key).replace(O,"$&/")+"/")+ge)),ee.push(j)),1;ge=0;var Ae=ie===""?".":ie+":";if(R(F))for(var Be=0;Be<F.length;Be++)ie=F[Be],ue=Ae+X(ie,Be),ge+=k(ie,ee,ce,ue,j);else if(Be=g(F),typeof Be=="function")for(F=Be.call(F),Be=0;!(ie=F.next()).done;)ie=ie.value,ue=Ae+X(ie,Be++),ge+=k(ie,ee,ce,ue,j);else if(ue==="object"){if(typeof F.then=="function")return k(z(F),ee,ce,ie,j);throw ee=String(F),Error("Objects are not valid as a React child (found: "+(ee==="[object Object]"?"object with keys {"+Object.keys(F).join(", ")+"}":ee)+"). If you meant to render a collection of children, use an array instead.")}return ge}function I(F,ee,ce){if(F==null)return F;var ie=[],j=0;return k(F,ie,"","",function(ue){return ee.call(ce,ue,j++)}),ie}function Y(F){if(F._status===-1){var ee=F._result;ee=ee(),ee.then(function(ce){(F._status===0||F._status===-1)&&(F._status=1,F._result=ce)},function(ce){(F._status===0||F._status===-1)&&(F._status=2,F._result=ce)}),F._status===-1&&(F._status=0,F._result=ee)}if(F._status===1)return F._result.default;throw F._result}var q=typeof reportError=="function"?reportError:function(F){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var ee=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof F=="object"&&F!==null&&typeof F.message=="string"?String(F.message):String(F),error:F});if(!window.dispatchEvent(ee))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",F);return}console.error(F)};function J(){}return Ut.Children={map:I,forEach:function(F,ee,ce){I(F,function(){ee.apply(this,arguments)},ce)},count:function(F){var ee=0;return I(F,function(){ee++}),ee},toArray:function(F){return I(F,function(ee){return ee})||[]},only:function(F){if(!C(F))throw Error("React.Children.only expected to receive a single React element child.");return F}},Ut.Component=S,Ut.Fragment=t,Ut.Profiler=s,Ut.PureComponent=b,Ut.StrictMode=n,Ut.Suspense=f,Ut.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=D,Ut.__COMPILER_RUNTIME={__proto__:null,c:function(F){return D.H.useMemoCache(F)}},Ut.cache=function(F){return function(){return F.apply(null,arguments)}},Ut.cloneElement=function(F,ee,ce){if(F==null)throw Error("The argument must be a React element, but you passed "+F+".");var ie=A({},F.props),j=F.key,ue=void 0;if(ee!=null)for(ge in ee.ref!==void 0&&(ue=void 0),ee.key!==void 0&&(j=""+ee.key),ee)!L.call(ee,ge)||ge==="key"||ge==="__self"||ge==="__source"||ge==="ref"&&ee.ref===void 0||(ie[ge]=ee[ge]);var ge=arguments.length-2;if(ge===1)ie.children=ce;else if(1<ge){for(var Ae=Array(ge),Be=0;Be<ge;Be++)Ae[Be]=arguments[Be+2];ie.children=Ae}return w(F.type,j,void 0,void 0,ue,ie)},Ut.createContext=function(F){return F={$$typeof:c,_currentValue:F,_currentValue2:F,_threadCount:0,Provider:null,Consumer:null},F.Provider=F,F.Consumer={$$typeof:o,_context:F},F},Ut.createElement=function(F,ee,ce){var ie,j={},ue=null;if(ee!=null)for(ie in ee.key!==void 0&&(ue=""+ee.key),ee)L.call(ee,ie)&&ie!=="key"&&ie!=="__self"&&ie!=="__source"&&(j[ie]=ee[ie]);var ge=arguments.length-2;if(ge===1)j.children=ce;else if(1<ge){for(var Ae=Array(ge),Be=0;Be<ge;Be++)Ae[Be]=arguments[Be+2];j.children=Ae}if(F&&F.defaultProps)for(ie in ge=F.defaultProps,ge)j[ie]===void 0&&(j[ie]=ge[ie]);return w(F,ue,void 0,void 0,null,j)},Ut.createRef=function(){return{current:null}},Ut.forwardRef=function(F){return{$$typeof:u,render:F}},Ut.isValidElement=C,Ut.lazy=function(F){return{$$typeof:p,_payload:{_status:-1,_result:F},_init:Y}},Ut.memo=function(F,ee){return{$$typeof:d,type:F,compare:ee===void 0?null:ee}},Ut.startTransition=function(F){var ee=D.T,ce={};D.T=ce;try{var ie=F(),j=D.S;j!==null&&j(ce,ie),typeof ie=="object"&&ie!==null&&typeof ie.then=="function"&&ie.then(J,q)}catch(ue){q(ue)}finally{D.T=ee}},Ut.unstable_useCacheRefresh=function(){return D.H.useCacheRefresh()},Ut.use=function(F){return D.H.use(F)},Ut.useActionState=function(F,ee,ce){return D.H.useActionState(F,ee,ce)},Ut.useCallback=function(F,ee){return D.H.useCallback(F,ee)},Ut.useContext=function(F){return D.H.useContext(F)},Ut.useDebugValue=function(){},Ut.useDeferredValue=function(F,ee){return D.H.useDeferredValue(F,ee)},Ut.useEffect=function(F,ee,ce){var ie=D.H;if(typeof ce=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return ie.useEffect(F,ee)},Ut.useId=function(){return D.H.useId()},Ut.useImperativeHandle=function(F,ee,ce){return D.H.useImperativeHandle(F,ee,ce)},Ut.useInsertionEffect=function(F,ee){return D.H.useInsertionEffect(F,ee)},Ut.useLayoutEffect=function(F,ee){return D.H.useLayoutEffect(F,ee)},Ut.useMemo=function(F,ee){return D.H.useMemo(F,ee)},Ut.useOptimistic=function(F,ee){return D.H.useOptimistic(F,ee)},Ut.useReducer=function(F,ee,ce){return D.H.useReducer(F,ee,ce)},Ut.useRef=function(F){return D.H.useRef(F)},Ut.useState=function(F){return D.H.useState(F)},Ut.useSyncExternalStore=function(F,ee,ce){return D.H.useSyncExternalStore(F,ee,ce)},Ut.useTransition=function(){return D.H.useTransition()},Ut.version="19.1.0",Ut}var mA;function i_(){return mA||(mA=1,Im.exports=XC()),Im.exports}var Vs=i_();const qC=VC(Vs);var Bm={exports:{}},ou={},Fm={exports:{}},Nm={};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var gA;function YC(){return gA||(gA=1,function(r){function e(I,Y){var q=I.length;I.push(Y);e:for(;0<q;){var J=q-1>>>1,F=I[J];if(0<s(F,Y))I[J]=Y,I[q]=F,q=J;else break e}}function t(I){return I.length===0?null:I[0]}function n(I){if(I.length===0)return null;var Y=I[0],q=I.pop();if(q!==Y){I[0]=q;e:for(var J=0,F=I.length,ee=F>>>1;J<ee;){var ce=2*(J+1)-1,ie=I[ce],j=ce+1,ue=I[j];if(0>s(ie,q))j<F&&0>s(ue,ie)?(I[J]=ue,I[j]=q,J=j):(I[J]=ie,I[ce]=q,J=ce);else if(j<F&&0>s(ue,q))I[J]=ue,I[j]=q,J=j;else break e}}return Y}function s(I,Y){var q=I.sortIndex-Y.sortIndex;return q!==0?q:I.id-Y.id}if(r.unstable_now=void 0,typeof performance=="object"&&typeof performance.now=="function"){var o=performance;r.unstable_now=function(){return o.now()}}else{var c=Date,u=c.now();r.unstable_now=function(){return c.now()-u}}var f=[],d=[],p=1,m=null,g=3,v=!1,A=!1,y=!1,S=!1,_=typeof setTimeout=="function"?setTimeout:null,b=typeof clearTimeout=="function"?clearTimeout:null,E=typeof setImmediate<"u"?setImmediate:null;function R(I){for(var Y=t(d);Y!==null;){if(Y.callback===null)n(d);else if(Y.startTime<=I)n(d),Y.sortIndex=Y.expirationTime,e(f,Y);else break;Y=t(d)}}function D(I){if(y=!1,R(I),!A)if(t(f)!==null)A=!0,L||(L=!0,X());else{var Y=t(d);Y!==null&&k(D,Y.startTime-I)}}var L=!1,w=-1,B=5,C=-1;function T(){return S?!0:!(r.unstable_now()-C<B)}function O(){if(S=!1,L){var I=r.unstable_now();C=I;var Y=!0;try{e:{A=!1,y&&(y=!1,b(w),w=-1),v=!0;var q=g;try{t:{for(R(I),m=t(f);m!==null&&!(m.expirationTime>I&&T());){var J=m.callback;if(typeof J=="function"){m.callback=null,g=m.priorityLevel;var F=J(m.expirationTime<=I);if(I=r.unstable_now(),typeof F=="function"){m.callback=F,R(I),Y=!0;break t}m===t(f)&&n(f),R(I)}else n(f);m=t(f)}if(m!==null)Y=!0;else{var ee=t(d);ee!==null&&k(D,ee.startTime-I),Y=!1}}break e}finally{m=null,g=q,v=!1}Y=void 0}}finally{Y?X():L=!1}}}var X;if(typeof E=="function")X=function(){E(O)};else if(typeof MessageChannel<"u"){var $=new MessageChannel,z=$.port2;$.port1.onmessage=O,X=function(){z.postMessage(null)}}else X=function(){_(O,0)};function k(I,Y){w=_(function(){I(r.unstable_now())},Y)}r.unstable_IdlePriority=5,r.unstable_ImmediatePriority=1,r.unstable_LowPriority=4,r.unstable_NormalPriority=3,r.unstable_Profiling=null,r.unstable_UserBlockingPriority=2,r.unstable_cancelCallback=function(I){I.callback=null},r.unstable_forceFrameRate=function(I){0>I||125<I?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<I?Math.floor(1e3/I):5},r.unstable_getCurrentPriorityLevel=function(){return g},r.unstable_next=function(I){switch(g){case 1:case 2:case 3:var Y=3;break;default:Y=g}var q=g;g=Y;try{return I()}finally{g=q}},r.unstable_requestPaint=function(){S=!0},r.unstable_runWithPriority=function(I,Y){switch(I){case 1:case 2:case 3:case 4:case 5:break;default:I=3}var q=g;g=I;try{return Y()}finally{g=q}},r.unstable_scheduleCallback=function(I,Y,q){var J=r.unstable_now();switch(typeof q=="object"&&q!==null?(q=q.delay,q=typeof q=="number"&&0<q?J+q:J):q=J,I){case 1:var F=-1;break;case 2:F=250;break;case 5:F=1073741823;break;case 4:F=1e4;break;default:F=5e3}return F=q+F,I={id:p++,callback:Y,priorityLevel:I,startTime:q,expirationTime:F,sortIndex:-1},q>J?(I.sortIndex=q,e(d,I),t(f)===null&&I===t(d)&&(y?(b(w),w=-1):y=!0,k(D,q-J))):(I.sortIndex=F,e(f,I),A||v||(A=!0,L||(L=!0,X()))),I},r.unstable_shouldYield=T,r.unstable_wrapCallback=function(I){var Y=g;return function(){var q=g;g=Y;try{return I.apply(this,arguments)}finally{g=q}}}}(Nm)),Nm}var _A;function $C(){return _A||(_A=1,Fm.exports=YC()),Fm.exports}var Om={exports:{}},fi={};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var vA;function QC(){if(vA)return fi;vA=1;var r=i_();function e(f){var d="https://react.dev/errors/"+f;if(1<arguments.length){d+="?args[]="+encodeURIComponent(arguments[1]);for(var p=2;p<arguments.length;p++)d+="&args[]="+encodeURIComponent(arguments[p])}return"Minified React error #"+f+"; visit "+d+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function t(){}var n={d:{f:t,r:function(){throw Error(e(522))},D:t,C:t,L:t,m:t,X:t,S:t,M:t},p:0,findDOMNode:null},s=Symbol.for("react.portal");function o(f,d,p){var m=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:s,key:m==null?null:""+m,children:f,containerInfo:d,implementation:p}}var c=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(f,d){if(f==="font")return"";if(typeof d=="string")return d==="use-credentials"?d:""}return fi.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=n,fi.createPortal=function(f,d){var p=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!d||d.nodeType!==1&&d.nodeType!==9&&d.nodeType!==11)throw Error(e(299));return o(f,d,null,p)},fi.flushSync=function(f){var d=c.T,p=n.p;try{if(c.T=null,n.p=2,f)return f()}finally{c.T=d,n.p=p,n.d.f()}},fi.preconnect=function(f,d){typeof f=="string"&&(d?(d=d.crossOrigin,d=typeof d=="string"?d==="use-credentials"?d:"":void 0):d=null,n.d.C(f,d))},fi.prefetchDNS=function(f){typeof f=="string"&&n.d.D(f)},fi.preinit=function(f,d){if(typeof f=="string"&&d&&typeof d.as=="string"){var p=d.as,m=u(p,d.crossOrigin),g=typeof d.integrity=="string"?d.integrity:void 0,v=typeof d.fetchPriority=="string"?d.fetchPriority:void 0;p==="style"?n.d.S(f,typeof d.precedence=="string"?d.precedence:void 0,{crossOrigin:m,integrity:g,fetchPriority:v}):p==="script"&&n.d.X(f,{crossOrigin:m,integrity:g,fetchPriority:v,nonce:typeof d.nonce=="string"?d.nonce:void 0})}},fi.preinitModule=function(f,d){if(typeof f=="string")if(typeof d=="object"&&d!==null){if(d.as==null||d.as==="script"){var p=u(d.as,d.crossOrigin);n.d.M(f,{crossOrigin:p,integrity:typeof d.integrity=="string"?d.integrity:void 0,nonce:typeof d.nonce=="string"?d.nonce:void 0})}}else d==null&&n.d.M(f)},fi.preload=function(f,d){if(typeof f=="string"&&typeof d=="object"&&d!==null&&typeof d.as=="string"){var p=d.as,m=u(p,d.crossOrigin);n.d.L(f,p,{crossOrigin:m,integrity:typeof d.integrity=="string"?d.integrity:void 0,nonce:typeof d.nonce=="string"?d.nonce:void 0,type:typeof d.type=="string"?d.type:void 0,fetchPriority:typeof d.fetchPriority=="string"?d.fetchPriority:void 0,referrerPolicy:typeof d.referrerPolicy=="string"?d.referrerPolicy:void 0,imageSrcSet:typeof d.imageSrcSet=="string"?d.imageSrcSet:void 0,imageSizes:typeof d.imageSizes=="string"?d.imageSizes:void 0,media:typeof d.media=="string"?d.media:void 0})}},fi.preloadModule=function(f,d){if(typeof f=="string")if(d){var p=u(d.as,d.crossOrigin);n.d.m(f,{as:typeof d.as=="string"&&d.as!=="script"?d.as:void 0,crossOrigin:p,integrity:typeof d.integrity=="string"?d.integrity:void 0})}else n.d.m(f)},fi.requestFormReset=function(f){n.d.r(f)},fi.unstable_batchedUpdates=function(f,d){return f(d)},fi.useFormState=function(f,d,p){return c.H.useFormState(f,d,p)},fi.useFormStatus=function(){return c.H.useHostTransitionStatus()},fi.version="19.1.0",fi}var SA;function KC(){if(SA)return Om.exports;SA=1;function r(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}return r(),Om.exports=QC(),Om.exports}/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var xA;function jC(){if(xA)return ou;xA=1;var r=$C(),e=i_(),t=KC();function n(i){var a="https://react.dev/errors/"+i;if(1<arguments.length){a+="?args[]="+encodeURIComponent(arguments[1]);for(var l=2;l<arguments.length;l++)a+="&args[]="+encodeURIComponent(arguments[l])}return"Minified React error #"+i+"; visit "+a+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function s(i){return!(!i||i.nodeType!==1&&i.nodeType!==9&&i.nodeType!==11)}function o(i){var a=i,l=i;if(i.alternate)for(;a.return;)a=a.return;else{i=a;do a=i,(a.flags&4098)!==0&&(l=a.return),i=a.return;while(i)}return a.tag===3?l:null}function c(i){if(i.tag===13){var a=i.memoizedState;if(a===null&&(i=i.alternate,i!==null&&(a=i.memoizedState)),a!==null)return a.dehydrated}return null}function u(i){if(o(i)!==i)throw Error(n(188))}function f(i){var a=i.alternate;if(!a){if(a=o(i),a===null)throw Error(n(188));return a!==i?null:i}for(var l=i,h=a;;){var x=l.return;if(x===null)break;var M=x.alternate;if(M===null){if(h=x.return,h!==null){l=h;continue}break}if(x.child===M.child){for(M=x.child;M;){if(M===l)return u(x),i;if(M===h)return u(x),a;M=M.sibling}throw Error(n(188))}if(l.return!==h.return)l=x,h=M;else{for(var P=!1,V=x.child;V;){if(V===l){P=!0,l=x,h=M;break}if(V===h){P=!0,h=x,l=M;break}V=V.sibling}if(!P){for(V=M.child;V;){if(V===l){P=!0,l=M,h=x;break}if(V===h){P=!0,h=M,l=x;break}V=V.sibling}if(!P)throw Error(n(189))}}if(l.alternate!==h)throw Error(n(190))}if(l.tag!==3)throw Error(n(188));return l.stateNode.current===l?i:a}function d(i){var a=i.tag;if(a===5||a===26||a===27||a===6)return i;for(i=i.child;i!==null;){if(a=d(i),a!==null)return a;i=i.sibling}return null}var p=Object.assign,m=Symbol.for("react.element"),g=Symbol.for("react.transitional.element"),v=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),b=Symbol.for("react.consumer"),E=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),D=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),w=Symbol.for("react.memo"),B=Symbol.for("react.lazy"),C=Symbol.for("react.activity"),T=Symbol.for("react.memo_cache_sentinel"),O=Symbol.iterator;function X(i){return i===null||typeof i!="object"?null:(i=O&&i[O]||i["@@iterator"],typeof i=="function"?i:null)}var $=Symbol.for("react.client.reference");function z(i){if(i==null)return null;if(typeof i=="function")return i.$$typeof===$?null:i.displayName||i.name||null;if(typeof i=="string")return i;switch(i){case A:return"Fragment";case S:return"Profiler";case y:return"StrictMode";case D:return"Suspense";case L:return"SuspenseList";case C:return"Activity"}if(typeof i=="object")switch(i.$$typeof){case v:return"Portal";case E:return(i.displayName||"Context")+".Provider";case b:return(i._context.displayName||"Context")+".Consumer";case R:var a=i.render;return i=i.displayName,i||(i=a.displayName||a.name||"",i=i!==""?"ForwardRef("+i+")":"ForwardRef"),i;case w:return a=i.displayName||null,a!==null?a:z(i.type)||"Memo";case B:a=i._payload,i=i._init;try{return z(i(a))}catch{}}return null}var k=Array.isArray,I=e.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Y=t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,q={pending:!1,data:null,method:null,action:null},J=[],F=-1;function ee(i){return{current:i}}function ce(i){0>F||(i.current=J[F],J[F]=null,F--)}function ie(i,a){F++,J[F]=i.current,i.current=a}var j=ee(null),ue=ee(null),ge=ee(null),Ae=ee(null);function Be(i,a){switch(ie(ge,a),ie(ue,i),ie(j,null),a.nodeType){case 9:case 11:i=(i=a.documentElement)&&(i=i.namespaceURI)?Hx(i):0;break;default:if(i=a.tagName,a=a.namespaceURI)a=Hx(a),i=Gx(a,i);else switch(i){case"svg":i=1;break;case"math":i=2;break;default:i=0}}ce(j),ie(j,i)}function Ze(){ce(j),ce(ue),ce(ge)}function Xe(i){i.memoizedState!==null&&ie(Ae,i);var a=j.current,l=Gx(a,i.type);a!==l&&(ie(ue,i),ie(j,l))}function ft(i){ue.current===i&&(ce(j),ce(ue)),Ae.current===i&&(ce(Ae),tu._currentValue=q)}var _e=Object.prototype.hasOwnProperty,ct=r.unstable_scheduleCallback,Z=r.unstable_cancelCallback,it=r.unstable_shouldYield,Ke=r.unstable_requestPaint,at=r.unstable_now,$e=r.unstable_getCurrentPriorityLevel,Q=r.unstable_ImmediatePriority,G=r.unstable_UserBlockingPriority,N=r.unstable_NormalPriority,U=r.unstable_LowPriority,se=r.unstable_IdlePriority,fe=r.log,Ee=r.unstable_setDisableYieldValue,pe=null,Oe=null;function ze(i){if(typeof fe=="function"&&Ee(i),Oe&&typeof Oe.setStrictMode=="function")try{Oe.setStrictMode(pe,i)}catch{}}var je=Math.clz32?Math.clz32:te,Pe=Math.log,Ve=Math.LN2;function te(i){return i>>>=0,i===0?32:31-(Pe(i)/Ve|0)|0}var Ce=256,ke=4194304;function be(i){var a=i&42;if(a!==0)return a;switch(i&-i){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return i&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return i&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return i}}function tt(i,a,l){var h=i.pendingLanes;if(h===0)return 0;var x=0,M=i.suspendedLanes,P=i.pingedLanes;i=i.warmLanes;var V=h&134217727;return V!==0?(h=V&~M,h!==0?x=be(h):(P&=V,P!==0?x=be(P):l||(l=V&~i,l!==0&&(x=be(l))))):(V=h&~M,V!==0?x=be(V):P!==0?x=be(P):l||(l=h&~i,l!==0&&(x=be(l)))),x===0?0:a!==0&&a!==x&&(a&M)===0&&(M=x&-x,l=a&-a,M>=l||M===32&&(l&4194048)!==0)?a:x}function st(i,a){return(i.pendingLanes&~(i.suspendedLanes&~i.pingedLanes)&a)===0}function St(i,a){switch(i){case 1:case 2:case 4:case 8:case 64:return a+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function oe(){var i=Ce;return Ce<<=1,(Ce&4194048)===0&&(Ce=256),i}function Te(){var i=ke;return ke<<=1,(ke&62914560)===0&&(ke=4194304),i}function W(i){for(var a=[],l=0;31>l;l++)a.push(i);return a}function he(i,a){i.pendingLanes|=a,a!==268435456&&(i.suspendedLanes=0,i.pingedLanes=0,i.warmLanes=0)}function De(i,a,l,h,x,M){var P=i.pendingLanes;i.pendingLanes=l,i.suspendedLanes=0,i.pingedLanes=0,i.warmLanes=0,i.expiredLanes&=l,i.entangledLanes&=l,i.errorRecoveryDisabledLanes&=l,i.shellSuspendCounter=0;var V=i.entanglements,re=i.expirationTimes,Me=i.hiddenUpdates;for(l=P&~l;0<l;){var We=31-je(l),Qe=1<<We;V[We]=0,re[We]=-1;var Re=Me[We];if(Re!==null)for(Me[We]=null,We=0;We<Re.length;We++){var Le=Re[We];Le!==null&&(Le.lane&=-536870913)}l&=~Qe}h!==0&&Ge(i,h,0),M!==0&&x===0&&i.tag!==0&&(i.suspendedLanes|=M&~(P&~a))}function Ge(i,a,l){i.pendingLanes|=a,i.suspendedLanes&=~a;var h=31-je(a);i.entangledLanes|=a,i.entanglements[h]=i.entanglements[h]|1073741824|l&4194090}function Je(i,a){var l=i.entangledLanes|=a;for(i=i.entanglements;l;){var h=31-je(l),x=1<<h;x&a|i[h]&a&&(i[h]|=a),l&=~x}}function At(i){switch(i){case 2:i=1;break;case 8:i=4;break;case 32:i=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:i=128;break;case 268435456:i=134217728;break;default:i=0}return i}function Rt(i){return i&=-i,2<i?8<i?(i&134217727)!==0?32:268435456:8:2}function Mt(){var i=Y.p;return i!==0?i:(i=window.event,i===void 0?32:aA(i.type))}function en(i,a){var l=Y.p;try{return Y.p=i,a()}finally{Y.p=l}}var Dt=Math.random().toString(36).slice(2),qt="__reactFiber$"+Dt,an="__reactProps$"+Dt,ni="__reactContainer$"+Dt,er="__reactEvents$"+Dt,tr="__reactListeners$"+Dt,Ba="__reactHandles$"+Dt,Ji="__reactResources$"+Dt,_s="__reactMarker$"+Dt;function vs(i){delete i[qt],delete i[an],delete i[er],delete i[tr],delete i[Ba]}function Ss(i){var a=i[qt];if(a)return a;for(var l=i.parentNode;l;){if(a=l[ni]||l[qt]){if(l=a.alternate,a.child!==null||l!==null&&l.child!==null)for(i=Xx(i);i!==null;){if(l=i[qt])return l;i=Xx(i)}return a}i=l,l=i.parentNode}return null}function xs(i){if(i=i[qt]||i[ni]){var a=i.tag;if(a===5||a===6||a===13||a===26||a===27||a===3)return i}return null}function nr(i){var a=i.tag;if(a===5||a===26||a===27||a===6)return i.stateNode;throw Error(n(33))}function K(i){var a=i[Ji];return a||(a=i[Ji]={hoistableStyles:new Map,hoistableScripts:new Map}),a}function Se(i){i[_s]=!0}var Ue=new Set,Ie={};function we(i,a){H(i,a),H(i+"Capture",a)}function H(i,a){for(Ie[i]=a,i=0;i<a.length;i++)Ue.add(a[i])}var ae=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),me={},ve={};function le(i){return _e.call(ve,i)?!0:_e.call(me,i)?!1:ae.test(i)?ve[i]=!0:(me[i]=!0,!1)}function Fe(i,a,l){if(le(a))if(l===null)i.removeAttribute(a);else{switch(typeof l){case"undefined":case"function":case"symbol":i.removeAttribute(a);return;case"boolean":var h=a.toLowerCase().slice(0,5);if(h!=="data-"&&h!=="aria-"){i.removeAttribute(a);return}}i.setAttribute(a,""+l)}}function qe(i,a,l){if(l===null)i.removeAttribute(a);else{switch(typeof l){case"undefined":case"function":case"symbol":case"boolean":i.removeAttribute(a);return}i.setAttribute(a,""+l)}}function et(i,a,l,h){if(h===null)i.removeAttribute(l);else{switch(typeof h){case"undefined":case"function":case"symbol":case"boolean":i.removeAttribute(l);return}i.setAttributeNS(a,l,""+h)}}var rt,pt;function _t(i){if(rt===void 0)try{throw Error()}catch(l){var a=l.stack.trim().match(/\n( *(at )?)/);rt=a&&a[1]||"",pt=-1<l.stack.indexOf(`
    at`)?" (<anonymous>)":-1<l.stack.indexOf("@")?"@unknown:0:0":""}return`
`+rt+i+pt}var ot=!1;function dt(i,a){if(!i||ot)return"";ot=!0;var l=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var h={DetermineComponentFrameRoot:function(){try{if(a){var Qe=function(){throw Error()};if(Object.defineProperty(Qe.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(Qe,[])}catch(Le){var Re=Le}Reflect.construct(i,[],Qe)}else{try{Qe.call()}catch(Le){Re=Le}i.call(Qe.prototype)}}else{try{throw Error()}catch(Le){Re=Le}(Qe=i())&&typeof Qe.catch=="function"&&Qe.catch(function(){})}}catch(Le){if(Le&&Re&&typeof Le.stack=="string")return[Le.stack,Re.stack]}return[null,null]}};h.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var x=Object.getOwnPropertyDescriptor(h.DetermineComponentFrameRoot,"name");x&&x.configurable&&Object.defineProperty(h.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var M=h.DetermineComponentFrameRoot(),P=M[0],V=M[1];if(P&&V){var re=P.split(`
`),Me=V.split(`
`);for(x=h=0;h<re.length&&!re[h].includes("DetermineComponentFrameRoot");)h++;for(;x<Me.length&&!Me[x].includes("DetermineComponentFrameRoot");)x++;if(h===re.length||x===Me.length)for(h=re.length-1,x=Me.length-1;1<=h&&0<=x&&re[h]!==Me[x];)x--;for(;1<=h&&0<=x;h--,x--)if(re[h]!==Me[x]){if(h!==1||x!==1)do if(h--,x--,0>x||re[h]!==Me[x]){var We=`
`+re[h].replace(" at new "," at ");return i.displayName&&We.includes("<anonymous>")&&(We=We.replace("<anonymous>",i.displayName)),We}while(1<=h&&0<=x);break}}}finally{ot=!1,Error.prepareStackTrace=l}return(l=i?i.displayName||i.name:"")?_t(l):""}function Wt(i){switch(i.tag){case 26:case 27:case 5:return _t(i.type);case 16:return _t("Lazy");case 13:return _t("Suspense");case 19:return _t("SuspenseList");case 0:case 15:return dt(i.type,!1);case 11:return dt(i.type.render,!1);case 1:return dt(i.type,!0);case 31:return _t("Activity");default:return""}}function wt(i){try{var a="";do a+=Wt(i),i=i.return;while(i);return a}catch(l){return`
Error generating stack: `+l.message+`
`+l.stack}}function Lt(i){switch(typeof i){case"bigint":case"boolean":case"number":case"string":case"undefined":return i;case"object":return i;default:return""}}function Ht(i){var a=i.type;return(i=i.nodeName)&&i.toLowerCase()==="input"&&(a==="checkbox"||a==="radio")}function xt(i){var a=Ht(i)?"checked":"value",l=Object.getOwnPropertyDescriptor(i.constructor.prototype,a),h=""+i[a];if(!i.hasOwnProperty(a)&&typeof l<"u"&&typeof l.get=="function"&&typeof l.set=="function"){var x=l.get,M=l.set;return Object.defineProperty(i,a,{configurable:!0,get:function(){return x.call(this)},set:function(P){h=""+P,M.call(this,P)}}),Object.defineProperty(i,a,{enumerable:l.enumerable}),{getValue:function(){return h},setValue:function(P){h=""+P},stopTracking:function(){i._valueTracker=null,delete i[a]}}}}function gn(i){i._valueTracker||(i._valueTracker=xt(i))}function Tt(i){if(!i)return!1;var a=i._valueTracker;if(!a)return!0;var l=a.getValue(),h="";return i&&(h=Ht(i)?i.checked?"true":"false":i.value),i=h,i!==l?(a.setValue(i),!0):!1}function xn(i){if(i=i||(typeof document<"u"?document:void 0),typeof i>"u")return null;try{return i.activeElement||i.body}catch{return i.body}}var es=/[\n"\\]/g;function Ot(i){return i.replace(es,function(a){return"\\"+a.charCodeAt(0).toString(16)+" "})}function Fi(i,a,l,h,x,M,P,V){i.name="",P!=null&&typeof P!="function"&&typeof P!="symbol"&&typeof P!="boolean"?i.type=P:i.removeAttribute("type"),a!=null?P==="number"?(a===0&&i.value===""||i.value!=a)&&(i.value=""+Lt(a)):i.value!==""+Lt(a)&&(i.value=""+Lt(a)):P!=="submit"&&P!=="reset"||i.removeAttribute("value"),a!=null?Hn(i,P,Lt(a)):l!=null?Hn(i,P,Lt(l)):h!=null&&i.removeAttribute("value"),x==null&&M!=null&&(i.defaultChecked=!!M),x!=null&&(i.checked=x&&typeof x!="function"&&typeof x!="symbol"),V!=null&&typeof V!="function"&&typeof V!="symbol"&&typeof V!="boolean"?i.name=""+Lt(V):i.removeAttribute("name")}function tn(i,a,l,h,x,M,P,V){if(M!=null&&typeof M!="function"&&typeof M!="symbol"&&typeof M!="boolean"&&(i.type=M),a!=null||l!=null){if(!(M!=="submit"&&M!=="reset"||a!=null))return;l=l!=null?""+Lt(l):"",a=a!=null?""+Lt(a):l,V||a===i.value||(i.value=a),i.defaultValue=a}h=h??x,h=typeof h!="function"&&typeof h!="symbol"&&!!h,i.checked=V?i.checked:!!h,i.defaultChecked=!!h,P!=null&&typeof P!="function"&&typeof P!="symbol"&&typeof P!="boolean"&&(i.name=P)}function Hn(i,a,l){a==="number"&&xn(i.ownerDocument)===i||i.defaultValue===""+l||(i.defaultValue=""+l)}function Gn(i,a,l,h){if(i=i.options,a){a={};for(var x=0;x<l.length;x++)a["$"+l[x]]=!0;for(l=0;l<i.length;l++)x=a.hasOwnProperty("$"+i[l].value),i[l].selected!==x&&(i[l].selected=x),x&&h&&(i[l].defaultSelected=!0)}else{for(l=""+Lt(l),a=null,x=0;x<i.length;x++){if(i[x].value===l){i[x].selected=!0,h&&(i[x].defaultSelected=!0);return}a!==null||i[x].disabled||(a=i[x])}a!==null&&(a.selected=!0)}}function Qn(i,a,l){if(a!=null&&(a=""+Lt(a),a!==i.value&&(i.value=a),l==null)){i.defaultValue!==a&&(i.defaultValue=a);return}i.defaultValue=l!=null?""+Lt(l):""}function ii(i,a,l,h){if(a==null){if(h!=null){if(l!=null)throw Error(n(92));if(k(h)){if(1<h.length)throw Error(n(93));h=h[0]}l=h}l==null&&(l=""),a=l}l=Lt(a),i.defaultValue=l,h=i.textContent,h===l&&h!==""&&h!==null&&(i.value=h)}function Fs(i,a){if(a){var l=i.firstChild;if(l&&l===i.lastChild&&l.nodeType===3){l.nodeValue=a;return}}i.textContent=a}var ir=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function H_(i,a,l){var h=a.indexOf("--")===0;l==null||typeof l=="boolean"||l===""?h?i.setProperty(a,""):a==="float"?i.cssFloat="":i[a]="":h?i.setProperty(a,l):typeof l!="number"||l===0||ir.has(a)?a==="float"?i.cssFloat=l:i[a]=(""+l).trim():i[a]=l+"px"}function G_(i,a,l){if(a!=null&&typeof a!="object")throw Error(n(62));if(i=i.style,l!=null){for(var h in l)!l.hasOwnProperty(h)||a!=null&&a.hasOwnProperty(h)||(h.indexOf("--")===0?i.setProperty(h,""):h==="float"?i.cssFloat="":i[h]="");for(var x in a)h=a[x],a.hasOwnProperty(x)&&l[x]!==h&&H_(i,x,h)}else for(var M in a)a.hasOwnProperty(M)&&H_(i,M,a[M])}function Ph(i){if(i.indexOf("-")===-1)return!1;switch(i){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var OT=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zT=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function ku(i){return zT.test(""+i)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":i}var Uh=null;function Ih(i){return i=i.target||i.srcElement||window,i.correspondingUseElement&&(i=i.correspondingUseElement),i.nodeType===3?i.parentNode:i}var Lo=null,Po=null;function V_(i){var a=xs(i);if(a&&(i=a.stateNode)){var l=i[an]||null;e:switch(i=a.stateNode,a.type){case"input":if(Fi(i,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name),a=l.name,l.type==="radio"&&a!=null){for(l=i;l.parentNode;)l=l.parentNode;for(l=l.querySelectorAll('input[name="'+Ot(""+a)+'"][type="radio"]'),a=0;a<l.length;a++){var h=l[a];if(h!==i&&h.form===i.form){var x=h[an]||null;if(!x)throw Error(n(90));Fi(h,x.value,x.defaultValue,x.defaultValue,x.checked,x.defaultChecked,x.type,x.name)}}for(a=0;a<l.length;a++)h=l[a],h.form===i.form&&Tt(h)}break e;case"textarea":Qn(i,l.value,l.defaultValue);break e;case"select":a=l.value,a!=null&&Gn(i,!!l.multiple,a,!1)}}}var Bh=!1;function k_(i,a,l){if(Bh)return i(a,l);Bh=!0;try{var h=i(a);return h}finally{if(Bh=!1,(Lo!==null||Po!==null)&&(wf(),Lo&&(a=Lo,i=Po,Po=Lo=null,V_(a),i)))for(a=0;a<i.length;a++)V_(i[a])}}function pc(i,a){var l=i.stateNode;if(l===null)return null;var h=l[an]||null;if(h===null)return null;l=h[a];e:switch(a){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(h=!h.disabled)||(i=i.type,h=!(i==="button"||i==="input"||i==="select"||i==="textarea")),i=!h;break e;default:i=!1}if(i)return null;if(l&&typeof l!="function")throw Error(n(231,a,typeof l));return l}var sr=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Fh=!1;if(sr)try{var mc={};Object.defineProperty(mc,"passive",{get:function(){Fh=!0}}),window.addEventListener("test",mc,mc),window.removeEventListener("test",mc,mc)}catch{Fh=!1}var Wr=null,Nh=null,Wu=null;function W_(){if(Wu)return Wu;var i,a=Nh,l=a.length,h,x="value"in Wr?Wr.value:Wr.textContent,M=x.length;for(i=0;i<l&&a[i]===x[i];i++);var P=l-i;for(h=1;h<=P&&a[l-h]===x[M-h];h++);return Wu=x.slice(i,1<h?1-h:void 0)}function Xu(i){var a=i.keyCode;return"charCode"in i?(i=i.charCode,i===0&&a===13&&(i=13)):i=a,i===10&&(i=13),32<=i||i===13?i:0}function qu(){return!0}function X_(){return!1}function Ei(i){function a(l,h,x,M,P){this._reactName=l,this._targetInst=x,this.type=h,this.nativeEvent=M,this.target=P,this.currentTarget=null;for(var V in i)i.hasOwnProperty(V)&&(l=i[V],this[V]=l?l(M):M[V]);return this.isDefaultPrevented=(M.defaultPrevented!=null?M.defaultPrevented:M.returnValue===!1)?qu:X_,this.isPropagationStopped=X_,this}return p(a.prototype,{preventDefault:function(){this.defaultPrevented=!0;var l=this.nativeEvent;l&&(l.preventDefault?l.preventDefault():typeof l.returnValue!="unknown"&&(l.returnValue=!1),this.isDefaultPrevented=qu)},stopPropagation:function(){var l=this.nativeEvent;l&&(l.stopPropagation?l.stopPropagation():typeof l.cancelBubble!="unknown"&&(l.cancelBubble=!0),this.isPropagationStopped=qu)},persist:function(){},isPersistent:qu}),a}var Fa={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(i){return i.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Yu=Ei(Fa),gc=p({},Fa,{view:0,detail:0}),HT=Ei(gc),Oh,zh,_c,$u=p({},gc,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Gh,button:0,buttons:0,relatedTarget:function(i){return i.relatedTarget===void 0?i.fromElement===i.srcElement?i.toElement:i.fromElement:i.relatedTarget},movementX:function(i){return"movementX"in i?i.movementX:(i!==_c&&(_c&&i.type==="mousemove"?(Oh=i.screenX-_c.screenX,zh=i.screenY-_c.screenY):zh=Oh=0,_c=i),Oh)},movementY:function(i){return"movementY"in i?i.movementY:zh}}),q_=Ei($u),GT=p({},$u,{dataTransfer:0}),VT=Ei(GT),kT=p({},gc,{relatedTarget:0}),Hh=Ei(kT),WT=p({},Fa,{animationName:0,elapsedTime:0,pseudoElement:0}),XT=Ei(WT),qT=p({},Fa,{clipboardData:function(i){return"clipboardData"in i?i.clipboardData:window.clipboardData}}),YT=Ei(qT),$T=p({},Fa,{data:0}),Y_=Ei($T),QT={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},KT={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},jT={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ZT(i){var a=this.nativeEvent;return a.getModifierState?a.getModifierState(i):(i=jT[i])?!!a[i]:!1}function Gh(){return ZT}var JT=p({},gc,{key:function(i){if(i.key){var a=QT[i.key]||i.key;if(a!=="Unidentified")return a}return i.type==="keypress"?(i=Xu(i),i===13?"Enter":String.fromCharCode(i)):i.type==="keydown"||i.type==="keyup"?KT[i.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Gh,charCode:function(i){return i.type==="keypress"?Xu(i):0},keyCode:function(i){return i.type==="keydown"||i.type==="keyup"?i.keyCode:0},which:function(i){return i.type==="keypress"?Xu(i):i.type==="keydown"||i.type==="keyup"?i.keyCode:0}}),eb=Ei(JT),tb=p({},$u,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),$_=Ei(tb),nb=p({},gc,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Gh}),ib=Ei(nb),sb=p({},Fa,{propertyName:0,elapsedTime:0,pseudoElement:0}),rb=Ei(sb),ab=p({},$u,{deltaX:function(i){return"deltaX"in i?i.deltaX:"wheelDeltaX"in i?-i.wheelDeltaX:0},deltaY:function(i){return"deltaY"in i?i.deltaY:"wheelDeltaY"in i?-i.wheelDeltaY:"wheelDelta"in i?-i.wheelDelta:0},deltaZ:0,deltaMode:0}),ob=Ei(ab),lb=p({},Fa,{newState:0,oldState:0}),cb=Ei(lb),ub=[9,13,27,32],Vh=sr&&"CompositionEvent"in window,vc=null;sr&&"documentMode"in document&&(vc=document.documentMode);var fb=sr&&"TextEvent"in window&&!vc,Q_=sr&&(!Vh||vc&&8<vc&&11>=vc),K_=" ",j_=!1;function Z_(i,a){switch(i){case"keyup":return ub.indexOf(a.keyCode)!==-1;case"keydown":return a.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function J_(i){return i=i.detail,typeof i=="object"&&"data"in i?i.data:null}var Uo=!1;function db(i,a){switch(i){case"compositionend":return J_(a);case"keypress":return a.which!==32?null:(j_=!0,K_);case"textInput":return i=a.data,i===K_&&j_?null:i;default:return null}}function hb(i,a){if(Uo)return i==="compositionend"||!Vh&&Z_(i,a)?(i=W_(),Wu=Nh=Wr=null,Uo=!1,i):null;switch(i){case"paste":return null;case"keypress":if(!(a.ctrlKey||a.altKey||a.metaKey)||a.ctrlKey&&a.altKey){if(a.char&&1<a.char.length)return a.char;if(a.which)return String.fromCharCode(a.which)}return null;case"compositionend":return Q_&&a.locale!=="ko"?null:a.data;default:return null}}var pb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ev(i){var a=i&&i.nodeName&&i.nodeName.toLowerCase();return a==="input"?!!pb[i.type]:a==="textarea"}function tv(i,a,l,h){Lo?Po?Po.push(h):Po=[h]:Lo=h,a=Bf(a,"onChange"),0<a.length&&(l=new Yu("onChange","change",null,l,h),i.push({event:l,listeners:a}))}var Sc=null,xc=null;function mb(i){Bx(i,0)}function Qu(i){var a=nr(i);if(Tt(a))return i}function nv(i,a){if(i==="change")return a}var iv=!1;if(sr){var kh;if(sr){var Wh="oninput"in document;if(!Wh){var sv=document.createElement("div");sv.setAttribute("oninput","return;"),Wh=typeof sv.oninput=="function"}kh=Wh}else kh=!1;iv=kh&&(!document.documentMode||9<document.documentMode)}function rv(){Sc&&(Sc.detachEvent("onpropertychange",av),xc=Sc=null)}function av(i){if(i.propertyName==="value"&&Qu(xc)){var a=[];tv(a,xc,i,Ih(i)),k_(mb,a)}}function gb(i,a,l){i==="focusin"?(rv(),Sc=a,xc=l,Sc.attachEvent("onpropertychange",av)):i==="focusout"&&rv()}function _b(i){if(i==="selectionchange"||i==="keyup"||i==="keydown")return Qu(xc)}function vb(i,a){if(i==="click")return Qu(a)}function Sb(i,a){if(i==="input"||i==="change")return Qu(a)}function xb(i,a){return i===a&&(i!==0||1/i===1/a)||i!==i&&a!==a}var Ni=typeof Object.is=="function"?Object.is:xb;function Ac(i,a){if(Ni(i,a))return!0;if(typeof i!="object"||i===null||typeof a!="object"||a===null)return!1;var l=Object.keys(i),h=Object.keys(a);if(l.length!==h.length)return!1;for(h=0;h<l.length;h++){var x=l[h];if(!_e.call(a,x)||!Ni(i[x],a[x]))return!1}return!0}function ov(i){for(;i&&i.firstChild;)i=i.firstChild;return i}function lv(i,a){var l=ov(i);i=0;for(var h;l;){if(l.nodeType===3){if(h=i+l.textContent.length,i<=a&&h>=a)return{node:l,offset:a-i};i=h}e:{for(;l;){if(l.nextSibling){l=l.nextSibling;break e}l=l.parentNode}l=void 0}l=ov(l)}}function cv(i,a){return i&&a?i===a?!0:i&&i.nodeType===3?!1:a&&a.nodeType===3?cv(i,a.parentNode):"contains"in i?i.contains(a):i.compareDocumentPosition?!!(i.compareDocumentPosition(a)&16):!1:!1}function uv(i){i=i!=null&&i.ownerDocument!=null&&i.ownerDocument.defaultView!=null?i.ownerDocument.defaultView:window;for(var a=xn(i.document);a instanceof i.HTMLIFrameElement;){try{var l=typeof a.contentWindow.location.href=="string"}catch{l=!1}if(l)i=a.contentWindow;else break;a=xn(i.document)}return a}function Xh(i){var a=i&&i.nodeName&&i.nodeName.toLowerCase();return a&&(a==="input"&&(i.type==="text"||i.type==="search"||i.type==="tel"||i.type==="url"||i.type==="password")||a==="textarea"||i.contentEditable==="true")}var Ab=sr&&"documentMode"in document&&11>=document.documentMode,Io=null,qh=null,yc=null,Yh=!1;function fv(i,a,l){var h=l.window===l?l.document:l.nodeType===9?l:l.ownerDocument;Yh||Io==null||Io!==xn(h)||(h=Io,"selectionStart"in h&&Xh(h)?h={start:h.selectionStart,end:h.selectionEnd}:(h=(h.ownerDocument&&h.ownerDocument.defaultView||window).getSelection(),h={anchorNode:h.anchorNode,anchorOffset:h.anchorOffset,focusNode:h.focusNode,focusOffset:h.focusOffset}),yc&&Ac(yc,h)||(yc=h,h=Bf(qh,"onSelect"),0<h.length&&(a=new Yu("onSelect","select",null,a,l),i.push({event:a,listeners:h}),a.target=Io)))}function Na(i,a){var l={};return l[i.toLowerCase()]=a.toLowerCase(),l["Webkit"+i]="webkit"+a,l["Moz"+i]="moz"+a,l}var Bo={animationend:Na("Animation","AnimationEnd"),animationiteration:Na("Animation","AnimationIteration"),animationstart:Na("Animation","AnimationStart"),transitionrun:Na("Transition","TransitionRun"),transitionstart:Na("Transition","TransitionStart"),transitioncancel:Na("Transition","TransitionCancel"),transitionend:Na("Transition","TransitionEnd")},$h={},dv={};sr&&(dv=document.createElement("div").style,"AnimationEvent"in window||(delete Bo.animationend.animation,delete Bo.animationiteration.animation,delete Bo.animationstart.animation),"TransitionEvent"in window||delete Bo.transitionend.transition);function Oa(i){if($h[i])return $h[i];if(!Bo[i])return i;var a=Bo[i],l;for(l in a)if(a.hasOwnProperty(l)&&l in dv)return $h[i]=a[l];return i}var hv=Oa("animationend"),pv=Oa("animationiteration"),mv=Oa("animationstart"),yb=Oa("transitionrun"),Mb=Oa("transitionstart"),Eb=Oa("transitioncancel"),gv=Oa("transitionend"),_v=new Map,Qh="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");Qh.push("scrollEnd");function As(i,a){_v.set(i,a),we(a,[i])}var vv=new WeakMap;function ts(i,a){if(typeof i=="object"&&i!==null){var l=vv.get(i);return l!==void 0?l:(a={value:i,source:a,stack:wt(a)},vv.set(i,a),a)}return{value:i,source:a,stack:wt(a)}}var ns=[],Fo=0,Kh=0;function Ku(){for(var i=Fo,a=Kh=Fo=0;a<i;){var l=ns[a];ns[a++]=null;var h=ns[a];ns[a++]=null;var x=ns[a];ns[a++]=null;var M=ns[a];if(ns[a++]=null,h!==null&&x!==null){var P=h.pending;P===null?x.next=x:(x.next=P.next,P.next=x),h.pending=x}M!==0&&Sv(l,x,M)}}function ju(i,a,l,h){ns[Fo++]=i,ns[Fo++]=a,ns[Fo++]=l,ns[Fo++]=h,Kh|=h,i.lanes|=h,i=i.alternate,i!==null&&(i.lanes|=h)}function jh(i,a,l,h){return ju(i,a,l,h),Zu(i)}function No(i,a){return ju(i,null,null,a),Zu(i)}function Sv(i,a,l){i.lanes|=l;var h=i.alternate;h!==null&&(h.lanes|=l);for(var x=!1,M=i.return;M!==null;)M.childLanes|=l,h=M.alternate,h!==null&&(h.childLanes|=l),M.tag===22&&(i=M.stateNode,i===null||i._visibility&1||(x=!0)),i=M,M=M.return;return i.tag===3?(M=i.stateNode,x&&a!==null&&(x=31-je(l),i=M.hiddenUpdates,h=i[x],h===null?i[x]=[a]:h.push(a),a.lane=l|536870912),M):null}function Zu(i){if(50<Yc)throw Yc=0,im=null,Error(n(185));for(var a=i.return;a!==null;)i=a,a=i.return;return i.tag===3?i.stateNode:null}var Oo={};function Tb(i,a,l,h){this.tag=i,this.key=l,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=a,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=h,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Oi(i,a,l,h){return new Tb(i,a,l,h)}function Zh(i){return i=i.prototype,!(!i||!i.isReactComponent)}function rr(i,a){var l=i.alternate;return l===null?(l=Oi(i.tag,a,i.key,i.mode),l.elementType=i.elementType,l.type=i.type,l.stateNode=i.stateNode,l.alternate=i,i.alternate=l):(l.pendingProps=a,l.type=i.type,l.flags=0,l.subtreeFlags=0,l.deletions=null),l.flags=i.flags&65011712,l.childLanes=i.childLanes,l.lanes=i.lanes,l.child=i.child,l.memoizedProps=i.memoizedProps,l.memoizedState=i.memoizedState,l.updateQueue=i.updateQueue,a=i.dependencies,l.dependencies=a===null?null:{lanes:a.lanes,firstContext:a.firstContext},l.sibling=i.sibling,l.index=i.index,l.ref=i.ref,l.refCleanup=i.refCleanup,l}function xv(i,a){i.flags&=65011714;var l=i.alternate;return l===null?(i.childLanes=0,i.lanes=a,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,a=l.dependencies,i.dependencies=a===null?null:{lanes:a.lanes,firstContext:a.firstContext}),i}function Ju(i,a,l,h,x,M){var P=0;if(h=i,typeof i=="function")Zh(i)&&(P=1);else if(typeof i=="string")P=CC(i,l,j.current)?26:i==="html"||i==="head"||i==="body"?27:5;else e:switch(i){case C:return i=Oi(31,l,a,x),i.elementType=C,i.lanes=M,i;case A:return za(l.children,x,M,a);case y:P=8,x|=24;break;case S:return i=Oi(12,l,a,x|2),i.elementType=S,i.lanes=M,i;case D:return i=Oi(13,l,a,x),i.elementType=D,i.lanes=M,i;case L:return i=Oi(19,l,a,x),i.elementType=L,i.lanes=M,i;default:if(typeof i=="object"&&i!==null)switch(i.$$typeof){case _:case E:P=10;break e;case b:P=9;break e;case R:P=11;break e;case w:P=14;break e;case B:P=16,h=null;break e}P=29,l=Error(n(130,i===null?"null":typeof i,"")),h=null}return a=Oi(P,l,a,x),a.elementType=i,a.type=h,a.lanes=M,a}function za(i,a,l,h){return i=Oi(7,i,h,a),i.lanes=l,i}function Jh(i,a,l){return i=Oi(6,i,null,a),i.lanes=l,i}function ep(i,a,l){return a=Oi(4,i.children!==null?i.children:[],i.key,a),a.lanes=l,a.stateNode={containerInfo:i.containerInfo,pendingChildren:null,implementation:i.implementation},a}var zo=[],Ho=0,ef=null,tf=0,is=[],ss=0,Ha=null,ar=1,or="";function Ga(i,a){zo[Ho++]=tf,zo[Ho++]=ef,ef=i,tf=a}function Av(i,a,l){is[ss++]=ar,is[ss++]=or,is[ss++]=Ha,Ha=i;var h=ar;i=or;var x=32-je(h)-1;h&=~(1<<x),l+=1;var M=32-je(a)+x;if(30<M){var P=x-x%5;M=(h&(1<<P)-1).toString(32),h>>=P,x-=P,ar=1<<32-je(a)+x|l<<x|h,or=M+i}else ar=1<<M|l<<x|h,or=i}function tp(i){i.return!==null&&(Ga(i,1),Av(i,1,0))}function np(i){for(;i===ef;)ef=zo[--Ho],zo[Ho]=null,tf=zo[--Ho],zo[Ho]=null;for(;i===Ha;)Ha=is[--ss],is[ss]=null,or=is[--ss],is[ss]=null,ar=is[--ss],is[ss]=null}var _i=null,Cn=null,Zt=!1,Va=null,Ns=!1,ip=Error(n(519));function ka(i){var a=Error(n(418,""));throw Tc(ts(a,i)),ip}function yv(i){var a=i.stateNode,l=i.type,h=i.memoizedProps;switch(a[qt]=i,a[an]=h,l){case"dialog":kt("cancel",a),kt("close",a);break;case"iframe":case"object":case"embed":kt("load",a);break;case"video":case"audio":for(l=0;l<Qc.length;l++)kt(Qc[l],a);break;case"source":kt("error",a);break;case"img":case"image":case"link":kt("error",a),kt("load",a);break;case"details":kt("toggle",a);break;case"input":kt("invalid",a),tn(a,h.value,h.defaultValue,h.checked,h.defaultChecked,h.type,h.name,!0),gn(a);break;case"select":kt("invalid",a);break;case"textarea":kt("invalid",a),ii(a,h.value,h.defaultValue,h.children),gn(a)}l=h.children,typeof l!="string"&&typeof l!="number"&&typeof l!="bigint"||a.textContent===""+l||h.suppressHydrationWarning===!0||zx(a.textContent,l)?(h.popover!=null&&(kt("beforetoggle",a),kt("toggle",a)),h.onScroll!=null&&kt("scroll",a),h.onScrollEnd!=null&&kt("scrollend",a),h.onClick!=null&&(a.onclick=Ff),a=!0):a=!1,a||ka(i)}function Mv(i){for(_i=i.return;_i;)switch(_i.tag){case 5:case 13:Ns=!1;return;case 27:case 3:Ns=!0;return;default:_i=_i.return}}function Mc(i){if(i!==_i)return!1;if(!Zt)return Mv(i),Zt=!0,!1;var a=i.tag,l;if((l=a!==3&&a!==27)&&((l=a===5)&&(l=i.type,l=!(l!=="form"&&l!=="button")||Sm(i.type,i.memoizedProps)),l=!l),l&&Cn&&ka(i),Mv(i),a===13){if(i=i.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(n(317));e:{for(i=i.nextSibling,a=0;i;){if(i.nodeType===8)if(l=i.data,l==="/$"){if(a===0){Cn=Ms(i.nextSibling);break e}a--}else l!=="$"&&l!=="$!"&&l!=="$?"||a++;i=i.nextSibling}Cn=null}}else a===27?(a=Cn,aa(i.type)?(i=Mm,Mm=null,Cn=i):Cn=a):Cn=_i?Ms(i.stateNode.nextSibling):null;return!0}function Ec(){Cn=_i=null,Zt=!1}function Ev(){var i=Va;return i!==null&&(Ci===null?Ci=i:Ci.push.apply(Ci,i),Va=null),i}function Tc(i){Va===null?Va=[i]:Va.push(i)}var sp=ee(null),Wa=null,lr=null;function Xr(i,a,l){ie(sp,a._currentValue),a._currentValue=l}function cr(i){i._currentValue=sp.current,ce(sp)}function rp(i,a,l){for(;i!==null;){var h=i.alternate;if((i.childLanes&a)!==a?(i.childLanes|=a,h!==null&&(h.childLanes|=a)):h!==null&&(h.childLanes&a)!==a&&(h.childLanes|=a),i===l)break;i=i.return}}function ap(i,a,l,h){var x=i.child;for(x!==null&&(x.return=i);x!==null;){var M=x.dependencies;if(M!==null){var P=x.child;M=M.firstContext;e:for(;M!==null;){var V=M;M=x;for(var re=0;re<a.length;re++)if(V.context===a[re]){M.lanes|=l,V=M.alternate,V!==null&&(V.lanes|=l),rp(M.return,l,i),h||(P=null);break e}M=V.next}}else if(x.tag===18){if(P=x.return,P===null)throw Error(n(341));P.lanes|=l,M=P.alternate,M!==null&&(M.lanes|=l),rp(P,l,i),P=null}else P=x.child;if(P!==null)P.return=x;else for(P=x;P!==null;){if(P===i){P=null;break}if(x=P.sibling,x!==null){x.return=P.return,P=x;break}P=P.return}x=P}}function bc(i,a,l,h){i=null;for(var x=a,M=!1;x!==null;){if(!M){if((x.flags&524288)!==0)M=!0;else if((x.flags&262144)!==0)break}if(x.tag===10){var P=x.alternate;if(P===null)throw Error(n(387));if(P=P.memoizedProps,P!==null){var V=x.type;Ni(x.pendingProps.value,P.value)||(i!==null?i.push(V):i=[V])}}else if(x===Ae.current){if(P=x.alternate,P===null)throw Error(n(387));P.memoizedState.memoizedState!==x.memoizedState.memoizedState&&(i!==null?i.push(tu):i=[tu])}x=x.return}i!==null&&ap(a,i,l,h),a.flags|=262144}function nf(i){for(i=i.firstContext;i!==null;){if(!Ni(i.context._currentValue,i.memoizedValue))return!0;i=i.next}return!1}function Xa(i){Wa=i,lr=null,i=i.dependencies,i!==null&&(i.firstContext=null)}function ui(i){return Tv(Wa,i)}function sf(i,a){return Wa===null&&Xa(i),Tv(i,a)}function Tv(i,a){var l=a._currentValue;if(a={context:a,memoizedValue:l,next:null},lr===null){if(i===null)throw Error(n(308));lr=a,i.dependencies={lanes:0,firstContext:a},i.flags|=524288}else lr=lr.next=a;return l}var bb=typeof AbortController<"u"?AbortController:function(){var i=[],a=this.signal={aborted:!1,addEventListener:function(l,h){i.push(h)}};this.abort=function(){a.aborted=!0,i.forEach(function(l){return l()})}},Cb=r.unstable_scheduleCallback,Rb=r.unstable_NormalPriority,Vn={$$typeof:E,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function op(){return{controller:new bb,data:new Map,refCount:0}}function Cc(i){i.refCount--,i.refCount===0&&Cb(Rb,function(){i.controller.abort()})}var Rc=null,lp=0,Go=0,Vo=null;function wb(i,a){if(Rc===null){var l=Rc=[];lp=0,Go=um(),Vo={status:"pending",value:void 0,then:function(h){l.push(h)}}}return lp++,a.then(bv,bv),a}function bv(){if(--lp===0&&Rc!==null){Vo!==null&&(Vo.status="fulfilled");var i=Rc;Rc=null,Go=0,Vo=null;for(var a=0;a<i.length;a++)(0,i[a])()}}function Db(i,a){var l=[],h={status:"pending",value:null,reason:null,then:function(x){l.push(x)}};return i.then(function(){h.status="fulfilled",h.value=a;for(var x=0;x<l.length;x++)(0,l[x])(a)},function(x){for(h.status="rejected",h.reason=x,x=0;x<l.length;x++)(0,l[x])(void 0)}),h}var Cv=I.S;I.S=function(i,a){typeof a=="object"&&a!==null&&typeof a.then=="function"&&wb(i,a),Cv!==null&&Cv(i,a)};var qa=ee(null);function cp(){var i=qa.current;return i!==null?i:_n.pooledCache}function rf(i,a){a===null?ie(qa,qa.current):ie(qa,a.pool)}function Rv(){var i=cp();return i===null?null:{parent:Vn._currentValue,pool:i}}var wc=Error(n(460)),wv=Error(n(474)),af=Error(n(542)),up={then:function(){}};function Dv(i){return i=i.status,i==="fulfilled"||i==="rejected"}function of(){}function Lv(i,a,l){switch(l=i[l],l===void 0?i.push(a):l!==a&&(a.then(of,of),a=l),a.status){case"fulfilled":return a.value;case"rejected":throw i=a.reason,Uv(i),i;default:if(typeof a.status=="string")a.then(of,of);else{if(i=_n,i!==null&&100<i.shellSuspendCounter)throw Error(n(482));i=a,i.status="pending",i.then(function(h){if(a.status==="pending"){var x=a;x.status="fulfilled",x.value=h}},function(h){if(a.status==="pending"){var x=a;x.status="rejected",x.reason=h}})}switch(a.status){case"fulfilled":return a.value;case"rejected":throw i=a.reason,Uv(i),i}throw Dc=a,wc}}var Dc=null;function Pv(){if(Dc===null)throw Error(n(459));var i=Dc;return Dc=null,i}function Uv(i){if(i===wc||i===af)throw Error(n(483))}var qr=!1;function fp(i){i.updateQueue={baseState:i.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function dp(i,a){i=i.updateQueue,a.updateQueue===i&&(a.updateQueue={baseState:i.baseState,firstBaseUpdate:i.firstBaseUpdate,lastBaseUpdate:i.lastBaseUpdate,shared:i.shared,callbacks:null})}function Yr(i){return{lane:i,tag:0,payload:null,callback:null,next:null}}function $r(i,a,l){var h=i.updateQueue;if(h===null)return null;if(h=h.shared,(nn&2)!==0){var x=h.pending;return x===null?a.next=a:(a.next=x.next,x.next=a),h.pending=a,a=Zu(i),Sv(i,null,l),a}return ju(i,h,a,l),Zu(i)}function Lc(i,a,l){if(a=a.updateQueue,a!==null&&(a=a.shared,(l&4194048)!==0)){var h=a.lanes;h&=i.pendingLanes,l|=h,a.lanes=l,Je(i,l)}}function hp(i,a){var l=i.updateQueue,h=i.alternate;if(h!==null&&(h=h.updateQueue,l===h)){var x=null,M=null;if(l=l.firstBaseUpdate,l!==null){do{var P={lane:l.lane,tag:l.tag,payload:l.payload,callback:null,next:null};M===null?x=M=P:M=M.next=P,l=l.next}while(l!==null);M===null?x=M=a:M=M.next=a}else x=M=a;l={baseState:h.baseState,firstBaseUpdate:x,lastBaseUpdate:M,shared:h.shared,callbacks:h.callbacks},i.updateQueue=l;return}i=l.lastBaseUpdate,i===null?l.firstBaseUpdate=a:i.next=a,l.lastBaseUpdate=a}var pp=!1;function Pc(){if(pp){var i=Vo;if(i!==null)throw i}}function Uc(i,a,l,h){pp=!1;var x=i.updateQueue;qr=!1;var M=x.firstBaseUpdate,P=x.lastBaseUpdate,V=x.shared.pending;if(V!==null){x.shared.pending=null;var re=V,Me=re.next;re.next=null,P===null?M=Me:P.next=Me,P=re;var We=i.alternate;We!==null&&(We=We.updateQueue,V=We.lastBaseUpdate,V!==P&&(V===null?We.firstBaseUpdate=Me:V.next=Me,We.lastBaseUpdate=re))}if(M!==null){var Qe=x.baseState;P=0,We=Me=re=null,V=M;do{var Re=V.lane&-536870913,Le=Re!==V.lane;if(Le?($t&Re)===Re:(h&Re)===Re){Re!==0&&Re===Go&&(pp=!0),We!==null&&(We=We.next={lane:0,tag:V.tag,payload:V.payload,callback:null,next:null});e:{var Ct=i,Et=V;Re=a;var cn=l;switch(Et.tag){case 1:if(Ct=Et.payload,typeof Ct=="function"){Qe=Ct.call(cn,Qe,Re);break e}Qe=Ct;break e;case 3:Ct.flags=Ct.flags&-65537|128;case 0:if(Ct=Et.payload,Re=typeof Ct=="function"?Ct.call(cn,Qe,Re):Ct,Re==null)break e;Qe=p({},Qe,Re);break e;case 2:qr=!0}}Re=V.callback,Re!==null&&(i.flags|=64,Le&&(i.flags|=8192),Le=x.callbacks,Le===null?x.callbacks=[Re]:Le.push(Re))}else Le={lane:Re,tag:V.tag,payload:V.payload,callback:V.callback,next:null},We===null?(Me=We=Le,re=Qe):We=We.next=Le,P|=Re;if(V=V.next,V===null){if(V=x.shared.pending,V===null)break;Le=V,V=Le.next,Le.next=null,x.lastBaseUpdate=Le,x.shared.pending=null}}while(!0);We===null&&(re=Qe),x.baseState=re,x.firstBaseUpdate=Me,x.lastBaseUpdate=We,M===null&&(x.shared.lanes=0),na|=P,i.lanes=P,i.memoizedState=Qe}}function Iv(i,a){if(typeof i!="function")throw Error(n(191,i));i.call(a)}function Bv(i,a){var l=i.callbacks;if(l!==null)for(i.callbacks=null,i=0;i<l.length;i++)Iv(l[i],a)}var ko=ee(null),lf=ee(0);function Fv(i,a){i=gr,ie(lf,i),ie(ko,a),gr=i|a.baseLanes}function mp(){ie(lf,gr),ie(ko,ko.current)}function gp(){gr=lf.current,ce(ko),ce(lf)}var Qr=0,zt=null,on=null,In=null,cf=!1,Wo=!1,Ya=!1,uf=0,Ic=0,Xo=null,Lb=0;function wn(){throw Error(n(321))}function _p(i,a){if(a===null)return!1;for(var l=0;l<a.length&&l<i.length;l++)if(!Ni(i[l],a[l]))return!1;return!0}function vp(i,a,l,h,x,M){return Qr=M,zt=a,a.memoizedState=null,a.updateQueue=null,a.lanes=0,I.H=i===null||i.memoizedState===null?SS:xS,Ya=!1,M=l(h,x),Ya=!1,Wo&&(M=Ov(a,l,h,x)),Nv(i),M}function Nv(i){I.H=gf;var a=on!==null&&on.next!==null;if(Qr=0,In=on=zt=null,cf=!1,Ic=0,Xo=null,a)throw Error(n(300));i===null||Kn||(i=i.dependencies,i!==null&&nf(i)&&(Kn=!0))}function Ov(i,a,l,h){zt=i;var x=0;do{if(Wo&&(Xo=null),Ic=0,Wo=!1,25<=x)throw Error(n(301));if(x+=1,In=on=null,i.updateQueue!=null){var M=i.updateQueue;M.lastEffect=null,M.events=null,M.stores=null,M.memoCache!=null&&(M.memoCache.index=0)}I.H=Ob,M=a(l,h)}while(Wo);return M}function Pb(){var i=I.H,a=i.useState()[0];return a=typeof a.then=="function"?Bc(a):a,i=i.useState()[0],(on!==null?on.memoizedState:null)!==i&&(zt.flags|=1024),a}function Sp(){var i=uf!==0;return uf=0,i}function xp(i,a,l){a.updateQueue=i.updateQueue,a.flags&=-2053,i.lanes&=~l}function Ap(i){if(cf){for(i=i.memoizedState;i!==null;){var a=i.queue;a!==null&&(a.pending=null),i=i.next}cf=!1}Qr=0,In=on=zt=null,Wo=!1,Ic=uf=0,Xo=null}function Ti(){var i={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return In===null?zt.memoizedState=In=i:In=In.next=i,In}function Bn(){if(on===null){var i=zt.alternate;i=i!==null?i.memoizedState:null}else i=on.next;var a=In===null?zt.memoizedState:In.next;if(a!==null)In=a,on=i;else{if(i===null)throw zt.alternate===null?Error(n(467)):Error(n(310));on=i,i={memoizedState:on.memoizedState,baseState:on.baseState,baseQueue:on.baseQueue,queue:on.queue,next:null},In===null?zt.memoizedState=In=i:In=In.next=i}return In}function yp(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function Bc(i){var a=Ic;return Ic+=1,Xo===null&&(Xo=[]),i=Lv(Xo,i,a),a=zt,(In===null?a.memoizedState:In.next)===null&&(a=a.alternate,I.H=a===null||a.memoizedState===null?SS:xS),i}function ff(i){if(i!==null&&typeof i=="object"){if(typeof i.then=="function")return Bc(i);if(i.$$typeof===E)return ui(i)}throw Error(n(438,String(i)))}function Mp(i){var a=null,l=zt.updateQueue;if(l!==null&&(a=l.memoCache),a==null){var h=zt.alternate;h!==null&&(h=h.updateQueue,h!==null&&(h=h.memoCache,h!=null&&(a={data:h.data.map(function(x){return x.slice()}),index:0})))}if(a==null&&(a={data:[],index:0}),l===null&&(l=yp(),zt.updateQueue=l),l.memoCache=a,l=a.data[a.index],l===void 0)for(l=a.data[a.index]=Array(i),h=0;h<i;h++)l[h]=T;return a.index++,l}function ur(i,a){return typeof a=="function"?a(i):a}function df(i){var a=Bn();return Ep(a,on,i)}function Ep(i,a,l){var h=i.queue;if(h===null)throw Error(n(311));h.lastRenderedReducer=l;var x=i.baseQueue,M=h.pending;if(M!==null){if(x!==null){var P=x.next;x.next=M.next,M.next=P}a.baseQueue=x=M,h.pending=null}if(M=i.baseState,x===null)i.memoizedState=M;else{a=x.next;var V=P=null,re=null,Me=a,We=!1;do{var Qe=Me.lane&-536870913;if(Qe!==Me.lane?($t&Qe)===Qe:(Qr&Qe)===Qe){var Re=Me.revertLane;if(Re===0)re!==null&&(re=re.next={lane:0,revertLane:0,action:Me.action,hasEagerState:Me.hasEagerState,eagerState:Me.eagerState,next:null}),Qe===Go&&(We=!0);else if((Qr&Re)===Re){Me=Me.next,Re===Go&&(We=!0);continue}else Qe={lane:0,revertLane:Me.revertLane,action:Me.action,hasEagerState:Me.hasEagerState,eagerState:Me.eagerState,next:null},re===null?(V=re=Qe,P=M):re=re.next=Qe,zt.lanes|=Re,na|=Re;Qe=Me.action,Ya&&l(M,Qe),M=Me.hasEagerState?Me.eagerState:l(M,Qe)}else Re={lane:Qe,revertLane:Me.revertLane,action:Me.action,hasEagerState:Me.hasEagerState,eagerState:Me.eagerState,next:null},re===null?(V=re=Re,P=M):re=re.next=Re,zt.lanes|=Qe,na|=Qe;Me=Me.next}while(Me!==null&&Me!==a);if(re===null?P=M:re.next=V,!Ni(M,i.memoizedState)&&(Kn=!0,We&&(l=Vo,l!==null)))throw l;i.memoizedState=M,i.baseState=P,i.baseQueue=re,h.lastRenderedState=M}return x===null&&(h.lanes=0),[i.memoizedState,h.dispatch]}function Tp(i){var a=Bn(),l=a.queue;if(l===null)throw Error(n(311));l.lastRenderedReducer=i;var h=l.dispatch,x=l.pending,M=a.memoizedState;if(x!==null){l.pending=null;var P=x=x.next;do M=i(M,P.action),P=P.next;while(P!==x);Ni(M,a.memoizedState)||(Kn=!0),a.memoizedState=M,a.baseQueue===null&&(a.baseState=M),l.lastRenderedState=M}return[M,h]}function zv(i,a,l){var h=zt,x=Bn(),M=Zt;if(M){if(l===void 0)throw Error(n(407));l=l()}else l=a();var P=!Ni((on||x).memoizedState,l);P&&(x.memoizedState=l,Kn=!0),x=x.queue;var V=Vv.bind(null,h,x,i);if(Fc(2048,8,V,[i]),x.getSnapshot!==a||P||In!==null&&In.memoizedState.tag&1){if(h.flags|=2048,qo(9,hf(),Gv.bind(null,h,x,l,a),null),_n===null)throw Error(n(349));M||(Qr&124)!==0||Hv(h,a,l)}return l}function Hv(i,a,l){i.flags|=16384,i={getSnapshot:a,value:l},a=zt.updateQueue,a===null?(a=yp(),zt.updateQueue=a,a.stores=[i]):(l=a.stores,l===null?a.stores=[i]:l.push(i))}function Gv(i,a,l,h){a.value=l,a.getSnapshot=h,kv(a)&&Wv(i)}function Vv(i,a,l){return l(function(){kv(a)&&Wv(i)})}function kv(i){var a=i.getSnapshot;i=i.value;try{var l=a();return!Ni(i,l)}catch{return!0}}function Wv(i){var a=No(i,2);a!==null&&ki(a,i,2)}function bp(i){var a=Ti();if(typeof i=="function"){var l=i;if(i=l(),Ya){ze(!0);try{l()}finally{ze(!1)}}}return a.memoizedState=a.baseState=i,a.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ur,lastRenderedState:i},a}function Xv(i,a,l,h){return i.baseState=l,Ep(i,on,typeof h=="function"?h:ur)}function Ub(i,a,l,h,x){if(mf(i))throw Error(n(485));if(i=a.action,i!==null){var M={payload:x,action:i,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(P){M.listeners.push(P)}};I.T!==null?l(!0):M.isTransition=!1,h(M),l=a.pending,l===null?(M.next=a.pending=M,qv(a,M)):(M.next=l.next,a.pending=l.next=M)}}function qv(i,a){var l=a.action,h=a.payload,x=i.state;if(a.isTransition){var M=I.T,P={};I.T=P;try{var V=l(x,h),re=I.S;re!==null&&re(P,V),Yv(i,a,V)}catch(Me){Cp(i,a,Me)}finally{I.T=M}}else try{M=l(x,h),Yv(i,a,M)}catch(Me){Cp(i,a,Me)}}function Yv(i,a,l){l!==null&&typeof l=="object"&&typeof l.then=="function"?l.then(function(h){$v(i,a,h)},function(h){return Cp(i,a,h)}):$v(i,a,l)}function $v(i,a,l){a.status="fulfilled",a.value=l,Qv(a),i.state=l,a=i.pending,a!==null&&(l=a.next,l===a?i.pending=null:(l=l.next,a.next=l,qv(i,l)))}function Cp(i,a,l){var h=i.pending;if(i.pending=null,h!==null){h=h.next;do a.status="rejected",a.reason=l,Qv(a),a=a.next;while(a!==h)}i.action=null}function Qv(i){i=i.listeners;for(var a=0;a<i.length;a++)(0,i[a])()}function Kv(i,a){return a}function jv(i,a){if(Zt){var l=_n.formState;if(l!==null){e:{var h=zt;if(Zt){if(Cn){t:{for(var x=Cn,M=Ns;x.nodeType!==8;){if(!M){x=null;break t}if(x=Ms(x.nextSibling),x===null){x=null;break t}}M=x.data,x=M==="F!"||M==="F"?x:null}if(x){Cn=Ms(x.nextSibling),h=x.data==="F!";break e}}ka(h)}h=!1}h&&(a=l[0])}}return l=Ti(),l.memoizedState=l.baseState=a,h={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Kv,lastRenderedState:a},l.queue=h,l=gS.bind(null,zt,h),h.dispatch=l,h=bp(!1),M=Pp.bind(null,zt,!1,h.queue),h=Ti(),x={state:a,dispatch:null,action:i,pending:null},h.queue=x,l=Ub.bind(null,zt,x,M,l),x.dispatch=l,h.memoizedState=i,[a,l,!1]}function Zv(i){var a=Bn();return Jv(a,on,i)}function Jv(i,a,l){if(a=Ep(i,a,Kv)[0],i=df(ur)[0],typeof a=="object"&&a!==null&&typeof a.then=="function")try{var h=Bc(a)}catch(P){throw P===wc?af:P}else h=a;a=Bn();var x=a.queue,M=x.dispatch;return l!==a.memoizedState&&(zt.flags|=2048,qo(9,hf(),Ib.bind(null,x,l),null)),[h,M,i]}function Ib(i,a){i.action=a}function eS(i){var a=Bn(),l=on;if(l!==null)return Jv(a,l,i);Bn(),a=a.memoizedState,l=Bn();var h=l.queue.dispatch;return l.memoizedState=i,[a,h,!1]}function qo(i,a,l,h){return i={tag:i,create:l,deps:h,inst:a,next:null},a=zt.updateQueue,a===null&&(a=yp(),zt.updateQueue=a),l=a.lastEffect,l===null?a.lastEffect=i.next=i:(h=l.next,l.next=i,i.next=h,a.lastEffect=i),i}function hf(){return{destroy:void 0,resource:void 0}}function tS(){return Bn().memoizedState}function pf(i,a,l,h){var x=Ti();h=h===void 0?null:h,zt.flags|=i,x.memoizedState=qo(1|a,hf(),l,h)}function Fc(i,a,l,h){var x=Bn();h=h===void 0?null:h;var M=x.memoizedState.inst;on!==null&&h!==null&&_p(h,on.memoizedState.deps)?x.memoizedState=qo(a,M,l,h):(zt.flags|=i,x.memoizedState=qo(1|a,M,l,h))}function nS(i,a){pf(8390656,8,i,a)}function iS(i,a){Fc(2048,8,i,a)}function sS(i,a){return Fc(4,2,i,a)}function rS(i,a){return Fc(4,4,i,a)}function aS(i,a){if(typeof a=="function"){i=i();var l=a(i);return function(){typeof l=="function"?l():a(null)}}if(a!=null)return i=i(),a.current=i,function(){a.current=null}}function oS(i,a,l){l=l!=null?l.concat([i]):null,Fc(4,4,aS.bind(null,a,i),l)}function Rp(){}function lS(i,a){var l=Bn();a=a===void 0?null:a;var h=l.memoizedState;return a!==null&&_p(a,h[1])?h[0]:(l.memoizedState=[i,a],i)}function cS(i,a){var l=Bn();a=a===void 0?null:a;var h=l.memoizedState;if(a!==null&&_p(a,h[1]))return h[0];if(h=i(),Ya){ze(!0);try{i()}finally{ze(!1)}}return l.memoizedState=[h,a],h}function wp(i,a,l){return l===void 0||(Qr&1073741824)!==0?i.memoizedState=a:(i.memoizedState=l,i=dx(),zt.lanes|=i,na|=i,l)}function uS(i,a,l,h){return Ni(l,a)?l:ko.current!==null?(i=wp(i,l,h),Ni(i,a)||(Kn=!0),i):(Qr&42)===0?(Kn=!0,i.memoizedState=l):(i=dx(),zt.lanes|=i,na|=i,a)}function fS(i,a,l,h,x){var M=Y.p;Y.p=M!==0&&8>M?M:8;var P=I.T,V={};I.T=V,Pp(i,!1,a,l);try{var re=x(),Me=I.S;if(Me!==null&&Me(V,re),re!==null&&typeof re=="object"&&typeof re.then=="function"){var We=Db(re,h);Nc(i,a,We,Vi(i))}else Nc(i,a,h,Vi(i))}catch(Qe){Nc(i,a,{then:function(){},status:"rejected",reason:Qe},Vi())}finally{Y.p=M,I.T=P}}function Bb(){}function Dp(i,a,l,h){if(i.tag!==5)throw Error(n(476));var x=dS(i).queue;fS(i,x,a,q,l===null?Bb:function(){return hS(i),l(h)})}function dS(i){var a=i.memoizedState;if(a!==null)return a;a={memoizedState:q,baseState:q,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:ur,lastRenderedState:q},next:null};var l={};return a.next={memoizedState:l,baseState:l,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:ur,lastRenderedState:l},next:null},i.memoizedState=a,i=i.alternate,i!==null&&(i.memoizedState=a),a}function hS(i){var a=dS(i).next.queue;Nc(i,a,{},Vi())}function Lp(){return ui(tu)}function pS(){return Bn().memoizedState}function mS(){return Bn().memoizedState}function Fb(i){for(var a=i.return;a!==null;){switch(a.tag){case 24:case 3:var l=Vi();i=Yr(l);var h=$r(a,i,l);h!==null&&(ki(h,a,l),Lc(h,a,l)),a={cache:op()},i.payload=a;return}a=a.return}}function Nb(i,a,l){var h=Vi();l={lane:h,revertLane:0,action:l,hasEagerState:!1,eagerState:null,next:null},mf(i)?_S(a,l):(l=jh(i,a,l,h),l!==null&&(ki(l,i,h),vS(l,a,h)))}function gS(i,a,l){var h=Vi();Nc(i,a,l,h)}function Nc(i,a,l,h){var x={lane:h,revertLane:0,action:l,hasEagerState:!1,eagerState:null,next:null};if(mf(i))_S(a,x);else{var M=i.alternate;if(i.lanes===0&&(M===null||M.lanes===0)&&(M=a.lastRenderedReducer,M!==null))try{var P=a.lastRenderedState,V=M(P,l);if(x.hasEagerState=!0,x.eagerState=V,Ni(V,P))return ju(i,a,x,0),_n===null&&Ku(),!1}catch{}finally{}if(l=jh(i,a,x,h),l!==null)return ki(l,i,h),vS(l,a,h),!0}return!1}function Pp(i,a,l,h){if(h={lane:2,revertLane:um(),action:h,hasEagerState:!1,eagerState:null,next:null},mf(i)){if(a)throw Error(n(479))}else a=jh(i,l,h,2),a!==null&&ki(a,i,2)}function mf(i){var a=i.alternate;return i===zt||a!==null&&a===zt}function _S(i,a){Wo=cf=!0;var l=i.pending;l===null?a.next=a:(a.next=l.next,l.next=a),i.pending=a}function vS(i,a,l){if((l&4194048)!==0){var h=a.lanes;h&=i.pendingLanes,l|=h,a.lanes=l,Je(i,l)}}var gf={readContext:ui,use:ff,useCallback:wn,useContext:wn,useEffect:wn,useImperativeHandle:wn,useLayoutEffect:wn,useInsertionEffect:wn,useMemo:wn,useReducer:wn,useRef:wn,useState:wn,useDebugValue:wn,useDeferredValue:wn,useTransition:wn,useSyncExternalStore:wn,useId:wn,useHostTransitionStatus:wn,useFormState:wn,useActionState:wn,useOptimistic:wn,useMemoCache:wn,useCacheRefresh:wn},SS={readContext:ui,use:ff,useCallback:function(i,a){return Ti().memoizedState=[i,a===void 0?null:a],i},useContext:ui,useEffect:nS,useImperativeHandle:function(i,a,l){l=l!=null?l.concat([i]):null,pf(4194308,4,aS.bind(null,a,i),l)},useLayoutEffect:function(i,a){return pf(4194308,4,i,a)},useInsertionEffect:function(i,a){pf(4,2,i,a)},useMemo:function(i,a){var l=Ti();a=a===void 0?null:a;var h=i();if(Ya){ze(!0);try{i()}finally{ze(!1)}}return l.memoizedState=[h,a],h},useReducer:function(i,a,l){var h=Ti();if(l!==void 0){var x=l(a);if(Ya){ze(!0);try{l(a)}finally{ze(!1)}}}else x=a;return h.memoizedState=h.baseState=x,i={pending:null,lanes:0,dispatch:null,lastRenderedReducer:i,lastRenderedState:x},h.queue=i,i=i.dispatch=Nb.bind(null,zt,i),[h.memoizedState,i]},useRef:function(i){var a=Ti();return i={current:i},a.memoizedState=i},useState:function(i){i=bp(i);var a=i.queue,l=gS.bind(null,zt,a);return a.dispatch=l,[i.memoizedState,l]},useDebugValue:Rp,useDeferredValue:function(i,a){var l=Ti();return wp(l,i,a)},useTransition:function(){var i=bp(!1);return i=fS.bind(null,zt,i.queue,!0,!1),Ti().memoizedState=i,[!1,i]},useSyncExternalStore:function(i,a,l){var h=zt,x=Ti();if(Zt){if(l===void 0)throw Error(n(407));l=l()}else{if(l=a(),_n===null)throw Error(n(349));($t&124)!==0||Hv(h,a,l)}x.memoizedState=l;var M={value:l,getSnapshot:a};return x.queue=M,nS(Vv.bind(null,h,M,i),[i]),h.flags|=2048,qo(9,hf(),Gv.bind(null,h,M,l,a),null),l},useId:function(){var i=Ti(),a=_n.identifierPrefix;if(Zt){var l=or,h=ar;l=(h&~(1<<32-je(h)-1)).toString(32)+l,a="«"+a+"R"+l,l=uf++,0<l&&(a+="H"+l.toString(32)),a+="»"}else l=Lb++,a="«"+a+"r"+l.toString(32)+"»";return i.memoizedState=a},useHostTransitionStatus:Lp,useFormState:jv,useActionState:jv,useOptimistic:function(i){var a=Ti();a.memoizedState=a.baseState=i;var l={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return a.queue=l,a=Pp.bind(null,zt,!0,l),l.dispatch=a,[i,a]},useMemoCache:Mp,useCacheRefresh:function(){return Ti().memoizedState=Fb.bind(null,zt)}},xS={readContext:ui,use:ff,useCallback:lS,useContext:ui,useEffect:iS,useImperativeHandle:oS,useInsertionEffect:sS,useLayoutEffect:rS,useMemo:cS,useReducer:df,useRef:tS,useState:function(){return df(ur)},useDebugValue:Rp,useDeferredValue:function(i,a){var l=Bn();return uS(l,on.memoizedState,i,a)},useTransition:function(){var i=df(ur)[0],a=Bn().memoizedState;return[typeof i=="boolean"?i:Bc(i),a]},useSyncExternalStore:zv,useId:pS,useHostTransitionStatus:Lp,useFormState:Zv,useActionState:Zv,useOptimistic:function(i,a){var l=Bn();return Xv(l,on,i,a)},useMemoCache:Mp,useCacheRefresh:mS},Ob={readContext:ui,use:ff,useCallback:lS,useContext:ui,useEffect:iS,useImperativeHandle:oS,useInsertionEffect:sS,useLayoutEffect:rS,useMemo:cS,useReducer:Tp,useRef:tS,useState:function(){return Tp(ur)},useDebugValue:Rp,useDeferredValue:function(i,a){var l=Bn();return on===null?wp(l,i,a):uS(l,on.memoizedState,i,a)},useTransition:function(){var i=Tp(ur)[0],a=Bn().memoizedState;return[typeof i=="boolean"?i:Bc(i),a]},useSyncExternalStore:zv,useId:pS,useHostTransitionStatus:Lp,useFormState:eS,useActionState:eS,useOptimistic:function(i,a){var l=Bn();return on!==null?Xv(l,on,i,a):(l.baseState=i,[i,l.queue.dispatch])},useMemoCache:Mp,useCacheRefresh:mS},Yo=null,Oc=0;function _f(i){var a=Oc;return Oc+=1,Yo===null&&(Yo=[]),Lv(Yo,i,a)}function zc(i,a){a=a.props.ref,i.ref=a!==void 0?a:null}function vf(i,a){throw a.$$typeof===m?Error(n(525)):(i=Object.prototype.toString.call(a),Error(n(31,i==="[object Object]"?"object with keys {"+Object.keys(a).join(", ")+"}":i)))}function AS(i){var a=i._init;return a(i._payload)}function yS(i){function a(xe,de){if(i){var ye=xe.deletions;ye===null?(xe.deletions=[de],xe.flags|=16):ye.push(de)}}function l(xe,de){if(!i)return null;for(;de!==null;)a(xe,de),de=de.sibling;return null}function h(xe){for(var de=new Map;xe!==null;)xe.key!==null?de.set(xe.key,xe):de.set(xe.index,xe),xe=xe.sibling;return de}function x(xe,de){return xe=rr(xe,de),xe.index=0,xe.sibling=null,xe}function M(xe,de,ye){return xe.index=ye,i?(ye=xe.alternate,ye!==null?(ye=ye.index,ye<de?(xe.flags|=67108866,de):ye):(xe.flags|=67108866,de)):(xe.flags|=1048576,de)}function P(xe){return i&&xe.alternate===null&&(xe.flags|=67108866),xe}function V(xe,de,ye,Ye){return de===null||de.tag!==6?(de=Jh(ye,xe.mode,Ye),de.return=xe,de):(de=x(de,ye),de.return=xe,de)}function re(xe,de,ye,Ye){var gt=ye.type;return gt===A?We(xe,de,ye.props.children,Ye,ye.key):de!==null&&(de.elementType===gt||typeof gt=="object"&&gt!==null&&gt.$$typeof===B&&AS(gt)===de.type)?(de=x(de,ye.props),zc(de,ye),de.return=xe,de):(de=Ju(ye.type,ye.key,ye.props,null,xe.mode,Ye),zc(de,ye),de.return=xe,de)}function Me(xe,de,ye,Ye){return de===null||de.tag!==4||de.stateNode.containerInfo!==ye.containerInfo||de.stateNode.implementation!==ye.implementation?(de=ep(ye,xe.mode,Ye),de.return=xe,de):(de=x(de,ye.children||[]),de.return=xe,de)}function We(xe,de,ye,Ye,gt){return de===null||de.tag!==7?(de=za(ye,xe.mode,Ye,gt),de.return=xe,de):(de=x(de,ye),de.return=xe,de)}function Qe(xe,de,ye){if(typeof de=="string"&&de!==""||typeof de=="number"||typeof de=="bigint")return de=Jh(""+de,xe.mode,ye),de.return=xe,de;if(typeof de=="object"&&de!==null){switch(de.$$typeof){case g:return ye=Ju(de.type,de.key,de.props,null,xe.mode,ye),zc(ye,de),ye.return=xe,ye;case v:return de=ep(de,xe.mode,ye),de.return=xe,de;case B:var Ye=de._init;return de=Ye(de._payload),Qe(xe,de,ye)}if(k(de)||X(de))return de=za(de,xe.mode,ye,null),de.return=xe,de;if(typeof de.then=="function")return Qe(xe,_f(de),ye);if(de.$$typeof===E)return Qe(xe,sf(xe,de),ye);vf(xe,de)}return null}function Re(xe,de,ye,Ye){var gt=de!==null?de.key:null;if(typeof ye=="string"&&ye!==""||typeof ye=="number"||typeof ye=="bigint")return gt!==null?null:V(xe,de,""+ye,Ye);if(typeof ye=="object"&&ye!==null){switch(ye.$$typeof){case g:return ye.key===gt?re(xe,de,ye,Ye):null;case v:return ye.key===gt?Me(xe,de,ye,Ye):null;case B:return gt=ye._init,ye=gt(ye._payload),Re(xe,de,ye,Ye)}if(k(ye)||X(ye))return gt!==null?null:We(xe,de,ye,Ye,null);if(typeof ye.then=="function")return Re(xe,de,_f(ye),Ye);if(ye.$$typeof===E)return Re(xe,de,sf(xe,ye),Ye);vf(xe,ye)}return null}function Le(xe,de,ye,Ye,gt){if(typeof Ye=="string"&&Ye!==""||typeof Ye=="number"||typeof Ye=="bigint")return xe=xe.get(ye)||null,V(de,xe,""+Ye,gt);if(typeof Ye=="object"&&Ye!==null){switch(Ye.$$typeof){case g:return xe=xe.get(Ye.key===null?ye:Ye.key)||null,re(de,xe,Ye,gt);case v:return xe=xe.get(Ye.key===null?ye:Ye.key)||null,Me(de,xe,Ye,gt);case B:var Gt=Ye._init;return Ye=Gt(Ye._payload),Le(xe,de,ye,Ye,gt)}if(k(Ye)||X(Ye))return xe=xe.get(ye)||null,We(de,xe,Ye,gt,null);if(typeof Ye.then=="function")return Le(xe,de,ye,_f(Ye),gt);if(Ye.$$typeof===E)return Le(xe,de,ye,sf(de,Ye),gt);vf(de,Ye)}return null}function Ct(xe,de,ye,Ye){for(var gt=null,Gt=null,yt=de,bt=de=0,Zn=null;yt!==null&&bt<ye.length;bt++){yt.index>bt?(Zn=yt,yt=null):Zn=yt.sibling;var Qt=Re(xe,yt,ye[bt],Ye);if(Qt===null){yt===null&&(yt=Zn);break}i&&yt&&Qt.alternate===null&&a(xe,yt),de=M(Qt,de,bt),Gt===null?gt=Qt:Gt.sibling=Qt,Gt=Qt,yt=Zn}if(bt===ye.length)return l(xe,yt),Zt&&Ga(xe,bt),gt;if(yt===null){for(;bt<ye.length;bt++)yt=Qe(xe,ye[bt],Ye),yt!==null&&(de=M(yt,de,bt),Gt===null?gt=yt:Gt.sibling=yt,Gt=yt);return Zt&&Ga(xe,bt),gt}for(yt=h(yt);bt<ye.length;bt++)Zn=Le(yt,xe,bt,ye[bt],Ye),Zn!==null&&(i&&Zn.alternate!==null&&yt.delete(Zn.key===null?bt:Zn.key),de=M(Zn,de,bt),Gt===null?gt=Zn:Gt.sibling=Zn,Gt=Zn);return i&&yt.forEach(function(fa){return a(xe,fa)}),Zt&&Ga(xe,bt),gt}function Et(xe,de,ye,Ye){if(ye==null)throw Error(n(151));for(var gt=null,Gt=null,yt=de,bt=de=0,Zn=null,Qt=ye.next();yt!==null&&!Qt.done;bt++,Qt=ye.next()){yt.index>bt?(Zn=yt,yt=null):Zn=yt.sibling;var fa=Re(xe,yt,Qt.value,Ye);if(fa===null){yt===null&&(yt=Zn);break}i&&yt&&fa.alternate===null&&a(xe,yt),de=M(fa,de,bt),Gt===null?gt=fa:Gt.sibling=fa,Gt=fa,yt=Zn}if(Qt.done)return l(xe,yt),Zt&&Ga(xe,bt),gt;if(yt===null){for(;!Qt.done;bt++,Qt=ye.next())Qt=Qe(xe,Qt.value,Ye),Qt!==null&&(de=M(Qt,de,bt),Gt===null?gt=Qt:Gt.sibling=Qt,Gt=Qt);return Zt&&Ga(xe,bt),gt}for(yt=h(yt);!Qt.done;bt++,Qt=ye.next())Qt=Le(yt,xe,bt,Qt.value,Ye),Qt!==null&&(i&&Qt.alternate!==null&&yt.delete(Qt.key===null?bt:Qt.key),de=M(Qt,de,bt),Gt===null?gt=Qt:Gt.sibling=Qt,Gt=Qt);return i&&yt.forEach(function(zC){return a(xe,zC)}),Zt&&Ga(xe,bt),gt}function cn(xe,de,ye,Ye){if(typeof ye=="object"&&ye!==null&&ye.type===A&&ye.key===null&&(ye=ye.props.children),typeof ye=="object"&&ye!==null){switch(ye.$$typeof){case g:e:{for(var gt=ye.key;de!==null;){if(de.key===gt){if(gt=ye.type,gt===A){if(de.tag===7){l(xe,de.sibling),Ye=x(de,ye.props.children),Ye.return=xe,xe=Ye;break e}}else if(de.elementType===gt||typeof gt=="object"&&gt!==null&&gt.$$typeof===B&&AS(gt)===de.type){l(xe,de.sibling),Ye=x(de,ye.props),zc(Ye,ye),Ye.return=xe,xe=Ye;break e}l(xe,de);break}else a(xe,de);de=de.sibling}ye.type===A?(Ye=za(ye.props.children,xe.mode,Ye,ye.key),Ye.return=xe,xe=Ye):(Ye=Ju(ye.type,ye.key,ye.props,null,xe.mode,Ye),zc(Ye,ye),Ye.return=xe,xe=Ye)}return P(xe);case v:e:{for(gt=ye.key;de!==null;){if(de.key===gt)if(de.tag===4&&de.stateNode.containerInfo===ye.containerInfo&&de.stateNode.implementation===ye.implementation){l(xe,de.sibling),Ye=x(de,ye.children||[]),Ye.return=xe,xe=Ye;break e}else{l(xe,de);break}else a(xe,de);de=de.sibling}Ye=ep(ye,xe.mode,Ye),Ye.return=xe,xe=Ye}return P(xe);case B:return gt=ye._init,ye=gt(ye._payload),cn(xe,de,ye,Ye)}if(k(ye))return Ct(xe,de,ye,Ye);if(X(ye)){if(gt=X(ye),typeof gt!="function")throw Error(n(150));return ye=gt.call(ye),Et(xe,de,ye,Ye)}if(typeof ye.then=="function")return cn(xe,de,_f(ye),Ye);if(ye.$$typeof===E)return cn(xe,de,sf(xe,ye),Ye);vf(xe,ye)}return typeof ye=="string"&&ye!==""||typeof ye=="number"||typeof ye=="bigint"?(ye=""+ye,de!==null&&de.tag===6?(l(xe,de.sibling),Ye=x(de,ye),Ye.return=xe,xe=Ye):(l(xe,de),Ye=Jh(ye,xe.mode,Ye),Ye.return=xe,xe=Ye),P(xe)):l(xe,de)}return function(xe,de,ye,Ye){try{Oc=0;var gt=cn(xe,de,ye,Ye);return Yo=null,gt}catch(yt){if(yt===wc||yt===af)throw yt;var Gt=Oi(29,yt,null,xe.mode);return Gt.lanes=Ye,Gt.return=xe,Gt}finally{}}}var $o=yS(!0),MS=yS(!1),rs=ee(null),Os=null;function Kr(i){var a=i.alternate;ie(kn,kn.current&1),ie(rs,i),Os===null&&(a===null||ko.current!==null||a.memoizedState!==null)&&(Os=i)}function ES(i){if(i.tag===22){if(ie(kn,kn.current),ie(rs,i),Os===null){var a=i.alternate;a!==null&&a.memoizedState!==null&&(Os=i)}}else jr()}function jr(){ie(kn,kn.current),ie(rs,rs.current)}function fr(i){ce(rs),Os===i&&(Os=null),ce(kn)}var kn=ee(0);function Sf(i){for(var a=i;a!==null;){if(a.tag===13){var l=a.memoizedState;if(l!==null&&(l=l.dehydrated,l===null||l.data==="$?"||ym(l)))return a}else if(a.tag===19&&a.memoizedProps.revealOrder!==void 0){if((a.flags&128)!==0)return a}else if(a.child!==null){a.child.return=a,a=a.child;continue}if(a===i)break;for(;a.sibling===null;){if(a.return===null||a.return===i)return null;a=a.return}a.sibling.return=a.return,a=a.sibling}return null}function Up(i,a,l,h){a=i.memoizedState,l=l(h,a),l=l==null?a:p({},a,l),i.memoizedState=l,i.lanes===0&&(i.updateQueue.baseState=l)}var Ip={enqueueSetState:function(i,a,l){i=i._reactInternals;var h=Vi(),x=Yr(h);x.payload=a,l!=null&&(x.callback=l),a=$r(i,x,h),a!==null&&(ki(a,i,h),Lc(a,i,h))},enqueueReplaceState:function(i,a,l){i=i._reactInternals;var h=Vi(),x=Yr(h);x.tag=1,x.payload=a,l!=null&&(x.callback=l),a=$r(i,x,h),a!==null&&(ki(a,i,h),Lc(a,i,h))},enqueueForceUpdate:function(i,a){i=i._reactInternals;var l=Vi(),h=Yr(l);h.tag=2,a!=null&&(h.callback=a),a=$r(i,h,l),a!==null&&(ki(a,i,l),Lc(a,i,l))}};function TS(i,a,l,h,x,M,P){return i=i.stateNode,typeof i.shouldComponentUpdate=="function"?i.shouldComponentUpdate(h,M,P):a.prototype&&a.prototype.isPureReactComponent?!Ac(l,h)||!Ac(x,M):!0}function bS(i,a,l,h){i=a.state,typeof a.componentWillReceiveProps=="function"&&a.componentWillReceiveProps(l,h),typeof a.UNSAFE_componentWillReceiveProps=="function"&&a.UNSAFE_componentWillReceiveProps(l,h),a.state!==i&&Ip.enqueueReplaceState(a,a.state,null)}function $a(i,a){var l=a;if("ref"in a){l={};for(var h in a)h!=="ref"&&(l[h]=a[h])}if(i=i.defaultProps){l===a&&(l=p({},l));for(var x in i)l[x]===void 0&&(l[x]=i[x])}return l}var xf=typeof reportError=="function"?reportError:function(i){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var a=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof i=="object"&&i!==null&&typeof i.message=="string"?String(i.message):String(i),error:i});if(!window.dispatchEvent(a))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",i);return}console.error(i)};function CS(i){xf(i)}function RS(i){console.error(i)}function wS(i){xf(i)}function Af(i,a){try{var l=i.onUncaughtError;l(a.value,{componentStack:a.stack})}catch(h){setTimeout(function(){throw h})}}function DS(i,a,l){try{var h=i.onCaughtError;h(l.value,{componentStack:l.stack,errorBoundary:a.tag===1?a.stateNode:null})}catch(x){setTimeout(function(){throw x})}}function Bp(i,a,l){return l=Yr(l),l.tag=3,l.payload={element:null},l.callback=function(){Af(i,a)},l}function LS(i){return i=Yr(i),i.tag=3,i}function PS(i,a,l,h){var x=l.type.getDerivedStateFromError;if(typeof x=="function"){var M=h.value;i.payload=function(){return x(M)},i.callback=function(){DS(a,l,h)}}var P=l.stateNode;P!==null&&typeof P.componentDidCatch=="function"&&(i.callback=function(){DS(a,l,h),typeof x!="function"&&(ia===null?ia=new Set([this]):ia.add(this));var V=h.stack;this.componentDidCatch(h.value,{componentStack:V!==null?V:""})})}function zb(i,a,l,h,x){if(l.flags|=32768,h!==null&&typeof h=="object"&&typeof h.then=="function"){if(a=l.alternate,a!==null&&bc(a,l,x,!0),l=rs.current,l!==null){switch(l.tag){case 13:return Os===null?rm():l.alternate===null&&Rn===0&&(Rn=3),l.flags&=-257,l.flags|=65536,l.lanes=x,h===up?l.flags|=16384:(a=l.updateQueue,a===null?l.updateQueue=new Set([h]):a.add(h),om(i,h,x)),!1;case 22:return l.flags|=65536,h===up?l.flags|=16384:(a=l.updateQueue,a===null?(a={transitions:null,markerInstances:null,retryQueue:new Set([h])},l.updateQueue=a):(l=a.retryQueue,l===null?a.retryQueue=new Set([h]):l.add(h)),om(i,h,x)),!1}throw Error(n(435,l.tag))}return om(i,h,x),rm(),!1}if(Zt)return a=rs.current,a!==null?((a.flags&65536)===0&&(a.flags|=256),a.flags|=65536,a.lanes=x,h!==ip&&(i=Error(n(422),{cause:h}),Tc(ts(i,l)))):(h!==ip&&(a=Error(n(423),{cause:h}),Tc(ts(a,l))),i=i.current.alternate,i.flags|=65536,x&=-x,i.lanes|=x,h=ts(h,l),x=Bp(i.stateNode,h,x),hp(i,x),Rn!==4&&(Rn=2)),!1;var M=Error(n(520),{cause:h});if(M=ts(M,l),qc===null?qc=[M]:qc.push(M),Rn!==4&&(Rn=2),a===null)return!0;h=ts(h,l),l=a;do{switch(l.tag){case 3:return l.flags|=65536,i=x&-x,l.lanes|=i,i=Bp(l.stateNode,h,i),hp(l,i),!1;case 1:if(a=l.type,M=l.stateNode,(l.flags&128)===0&&(typeof a.getDerivedStateFromError=="function"||M!==null&&typeof M.componentDidCatch=="function"&&(ia===null||!ia.has(M))))return l.flags|=65536,x&=-x,l.lanes|=x,x=LS(x),PS(x,i,l,h),hp(l,x),!1}l=l.return}while(l!==null);return!1}var US=Error(n(461)),Kn=!1;function si(i,a,l,h){a.child=i===null?MS(a,null,l,h):$o(a,i.child,l,h)}function IS(i,a,l,h,x){l=l.render;var M=a.ref;if("ref"in h){var P={};for(var V in h)V!=="ref"&&(P[V]=h[V])}else P=h;return Xa(a),h=vp(i,a,l,P,M,x),V=Sp(),i!==null&&!Kn?(xp(i,a,x),dr(i,a,x)):(Zt&&V&&tp(a),a.flags|=1,si(i,a,h,x),a.child)}function BS(i,a,l,h,x){if(i===null){var M=l.type;return typeof M=="function"&&!Zh(M)&&M.defaultProps===void 0&&l.compare===null?(a.tag=15,a.type=M,FS(i,a,M,h,x)):(i=Ju(l.type,null,h,a,a.mode,x),i.ref=a.ref,i.return=a,a.child=i)}if(M=i.child,!kp(i,x)){var P=M.memoizedProps;if(l=l.compare,l=l!==null?l:Ac,l(P,h)&&i.ref===a.ref)return dr(i,a,x)}return a.flags|=1,i=rr(M,h),i.ref=a.ref,i.return=a,a.child=i}function FS(i,a,l,h,x){if(i!==null){var M=i.memoizedProps;if(Ac(M,h)&&i.ref===a.ref)if(Kn=!1,a.pendingProps=h=M,kp(i,x))(i.flags&131072)!==0&&(Kn=!0);else return a.lanes=i.lanes,dr(i,a,x)}return Fp(i,a,l,h,x)}function NS(i,a,l){var h=a.pendingProps,x=h.children,M=i!==null?i.memoizedState:null;if(h.mode==="hidden"){if((a.flags&128)!==0){if(h=M!==null?M.baseLanes|l:l,i!==null){for(x=a.child=i.child,M=0;x!==null;)M=M|x.lanes|x.childLanes,x=x.sibling;a.childLanes=M&~h}else a.childLanes=0,a.child=null;return OS(i,a,h,l)}if((l&536870912)!==0)a.memoizedState={baseLanes:0,cachePool:null},i!==null&&rf(a,M!==null?M.cachePool:null),M!==null?Fv(a,M):mp(),ES(a);else return a.lanes=a.childLanes=536870912,OS(i,a,M!==null?M.baseLanes|l:l,l)}else M!==null?(rf(a,M.cachePool),Fv(a,M),jr(),a.memoizedState=null):(i!==null&&rf(a,null),mp(),jr());return si(i,a,x,l),a.child}function OS(i,a,l,h){var x=cp();return x=x===null?null:{parent:Vn._currentValue,pool:x},a.memoizedState={baseLanes:l,cachePool:x},i!==null&&rf(a,null),mp(),ES(a),i!==null&&bc(i,a,h,!0),null}function yf(i,a){var l=a.ref;if(l===null)i!==null&&i.ref!==null&&(a.flags|=4194816);else{if(typeof l!="function"&&typeof l!="object")throw Error(n(284));(i===null||i.ref!==l)&&(a.flags|=4194816)}}function Fp(i,a,l,h,x){return Xa(a),l=vp(i,a,l,h,void 0,x),h=Sp(),i!==null&&!Kn?(xp(i,a,x),dr(i,a,x)):(Zt&&h&&tp(a),a.flags|=1,si(i,a,l,x),a.child)}function zS(i,a,l,h,x,M){return Xa(a),a.updateQueue=null,l=Ov(a,h,l,x),Nv(i),h=Sp(),i!==null&&!Kn?(xp(i,a,M),dr(i,a,M)):(Zt&&h&&tp(a),a.flags|=1,si(i,a,l,M),a.child)}function HS(i,a,l,h,x){if(Xa(a),a.stateNode===null){var M=Oo,P=l.contextType;typeof P=="object"&&P!==null&&(M=ui(P)),M=new l(h,M),a.memoizedState=M.state!==null&&M.state!==void 0?M.state:null,M.updater=Ip,a.stateNode=M,M._reactInternals=a,M=a.stateNode,M.props=h,M.state=a.memoizedState,M.refs={},fp(a),P=l.contextType,M.context=typeof P=="object"&&P!==null?ui(P):Oo,M.state=a.memoizedState,P=l.getDerivedStateFromProps,typeof P=="function"&&(Up(a,l,P,h),M.state=a.memoizedState),typeof l.getDerivedStateFromProps=="function"||typeof M.getSnapshotBeforeUpdate=="function"||typeof M.UNSAFE_componentWillMount!="function"&&typeof M.componentWillMount!="function"||(P=M.state,typeof M.componentWillMount=="function"&&M.componentWillMount(),typeof M.UNSAFE_componentWillMount=="function"&&M.UNSAFE_componentWillMount(),P!==M.state&&Ip.enqueueReplaceState(M,M.state,null),Uc(a,h,M,x),Pc(),M.state=a.memoizedState),typeof M.componentDidMount=="function"&&(a.flags|=4194308),h=!0}else if(i===null){M=a.stateNode;var V=a.memoizedProps,re=$a(l,V);M.props=re;var Me=M.context,We=l.contextType;P=Oo,typeof We=="object"&&We!==null&&(P=ui(We));var Qe=l.getDerivedStateFromProps;We=typeof Qe=="function"||typeof M.getSnapshotBeforeUpdate=="function",V=a.pendingProps!==V,We||typeof M.UNSAFE_componentWillReceiveProps!="function"&&typeof M.componentWillReceiveProps!="function"||(V||Me!==P)&&bS(a,M,h,P),qr=!1;var Re=a.memoizedState;M.state=Re,Uc(a,h,M,x),Pc(),Me=a.memoizedState,V||Re!==Me||qr?(typeof Qe=="function"&&(Up(a,l,Qe,h),Me=a.memoizedState),(re=qr||TS(a,l,re,h,Re,Me,P))?(We||typeof M.UNSAFE_componentWillMount!="function"&&typeof M.componentWillMount!="function"||(typeof M.componentWillMount=="function"&&M.componentWillMount(),typeof M.UNSAFE_componentWillMount=="function"&&M.UNSAFE_componentWillMount()),typeof M.componentDidMount=="function"&&(a.flags|=4194308)):(typeof M.componentDidMount=="function"&&(a.flags|=4194308),a.memoizedProps=h,a.memoizedState=Me),M.props=h,M.state=Me,M.context=P,h=re):(typeof M.componentDidMount=="function"&&(a.flags|=4194308),h=!1)}else{M=a.stateNode,dp(i,a),P=a.memoizedProps,We=$a(l,P),M.props=We,Qe=a.pendingProps,Re=M.context,Me=l.contextType,re=Oo,typeof Me=="object"&&Me!==null&&(re=ui(Me)),V=l.getDerivedStateFromProps,(Me=typeof V=="function"||typeof M.getSnapshotBeforeUpdate=="function")||typeof M.UNSAFE_componentWillReceiveProps!="function"&&typeof M.componentWillReceiveProps!="function"||(P!==Qe||Re!==re)&&bS(a,M,h,re),qr=!1,Re=a.memoizedState,M.state=Re,Uc(a,h,M,x),Pc();var Le=a.memoizedState;P!==Qe||Re!==Le||qr||i!==null&&i.dependencies!==null&&nf(i.dependencies)?(typeof V=="function"&&(Up(a,l,V,h),Le=a.memoizedState),(We=qr||TS(a,l,We,h,Re,Le,re)||i!==null&&i.dependencies!==null&&nf(i.dependencies))?(Me||typeof M.UNSAFE_componentWillUpdate!="function"&&typeof M.componentWillUpdate!="function"||(typeof M.componentWillUpdate=="function"&&M.componentWillUpdate(h,Le,re),typeof M.UNSAFE_componentWillUpdate=="function"&&M.UNSAFE_componentWillUpdate(h,Le,re)),typeof M.componentDidUpdate=="function"&&(a.flags|=4),typeof M.getSnapshotBeforeUpdate=="function"&&(a.flags|=1024)):(typeof M.componentDidUpdate!="function"||P===i.memoizedProps&&Re===i.memoizedState||(a.flags|=4),typeof M.getSnapshotBeforeUpdate!="function"||P===i.memoizedProps&&Re===i.memoizedState||(a.flags|=1024),a.memoizedProps=h,a.memoizedState=Le),M.props=h,M.state=Le,M.context=re,h=We):(typeof M.componentDidUpdate!="function"||P===i.memoizedProps&&Re===i.memoizedState||(a.flags|=4),typeof M.getSnapshotBeforeUpdate!="function"||P===i.memoizedProps&&Re===i.memoizedState||(a.flags|=1024),h=!1)}return M=h,yf(i,a),h=(a.flags&128)!==0,M||h?(M=a.stateNode,l=h&&typeof l.getDerivedStateFromError!="function"?null:M.render(),a.flags|=1,i!==null&&h?(a.child=$o(a,i.child,null,x),a.child=$o(a,null,l,x)):si(i,a,l,x),a.memoizedState=M.state,i=a.child):i=dr(i,a,x),i}function GS(i,a,l,h){return Ec(),a.flags|=256,si(i,a,l,h),a.child}var Np={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Op(i){return{baseLanes:i,cachePool:Rv()}}function zp(i,a,l){return i=i!==null?i.childLanes&~l:0,a&&(i|=as),i}function VS(i,a,l){var h=a.pendingProps,x=!1,M=(a.flags&128)!==0,P;if((P=M)||(P=i!==null&&i.memoizedState===null?!1:(kn.current&2)!==0),P&&(x=!0,a.flags&=-129),P=(a.flags&32)!==0,a.flags&=-33,i===null){if(Zt){if(x?Kr(a):jr(),Zt){var V=Cn,re;if(re=V){e:{for(re=V,V=Ns;re.nodeType!==8;){if(!V){V=null;break e}if(re=Ms(re.nextSibling),re===null){V=null;break e}}V=re}V!==null?(a.memoizedState={dehydrated:V,treeContext:Ha!==null?{id:ar,overflow:or}:null,retryLane:536870912,hydrationErrors:null},re=Oi(18,null,null,0),re.stateNode=V,re.return=a,a.child=re,_i=a,Cn=null,re=!0):re=!1}re||ka(a)}if(V=a.memoizedState,V!==null&&(V=V.dehydrated,V!==null))return ym(V)?a.lanes=32:a.lanes=536870912,null;fr(a)}return V=h.children,h=h.fallback,x?(jr(),x=a.mode,V=Mf({mode:"hidden",children:V},x),h=za(h,x,l,null),V.return=a,h.return=a,V.sibling=h,a.child=V,x=a.child,x.memoizedState=Op(l),x.childLanes=zp(i,P,l),a.memoizedState=Np,h):(Kr(a),Hp(a,V))}if(re=i.memoizedState,re!==null&&(V=re.dehydrated,V!==null)){if(M)a.flags&256?(Kr(a),a.flags&=-257,a=Gp(i,a,l)):a.memoizedState!==null?(jr(),a.child=i.child,a.flags|=128,a=null):(jr(),x=h.fallback,V=a.mode,h=Mf({mode:"visible",children:h.children},V),x=za(x,V,l,null),x.flags|=2,h.return=a,x.return=a,h.sibling=x,a.child=h,$o(a,i.child,null,l),h=a.child,h.memoizedState=Op(l),h.childLanes=zp(i,P,l),a.memoizedState=Np,a=x);else if(Kr(a),ym(V)){if(P=V.nextSibling&&V.nextSibling.dataset,P)var Me=P.dgst;P=Me,h=Error(n(419)),h.stack="",h.digest=P,Tc({value:h,source:null,stack:null}),a=Gp(i,a,l)}else if(Kn||bc(i,a,l,!1),P=(l&i.childLanes)!==0,Kn||P){if(P=_n,P!==null&&(h=l&-l,h=(h&42)!==0?1:At(h),h=(h&(P.suspendedLanes|l))!==0?0:h,h!==0&&h!==re.retryLane))throw re.retryLane=h,No(i,h),ki(P,i,h),US;V.data==="$?"||rm(),a=Gp(i,a,l)}else V.data==="$?"?(a.flags|=192,a.child=i.child,a=null):(i=re.treeContext,Cn=Ms(V.nextSibling),_i=a,Zt=!0,Va=null,Ns=!1,i!==null&&(is[ss++]=ar,is[ss++]=or,is[ss++]=Ha,ar=i.id,or=i.overflow,Ha=a),a=Hp(a,h.children),a.flags|=4096);return a}return x?(jr(),x=h.fallback,V=a.mode,re=i.child,Me=re.sibling,h=rr(re,{mode:"hidden",children:h.children}),h.subtreeFlags=re.subtreeFlags&65011712,Me!==null?x=rr(Me,x):(x=za(x,V,l,null),x.flags|=2),x.return=a,h.return=a,h.sibling=x,a.child=h,h=x,x=a.child,V=i.child.memoizedState,V===null?V=Op(l):(re=V.cachePool,re!==null?(Me=Vn._currentValue,re=re.parent!==Me?{parent:Me,pool:Me}:re):re=Rv(),V={baseLanes:V.baseLanes|l,cachePool:re}),x.memoizedState=V,x.childLanes=zp(i,P,l),a.memoizedState=Np,h):(Kr(a),l=i.child,i=l.sibling,l=rr(l,{mode:"visible",children:h.children}),l.return=a,l.sibling=null,i!==null&&(P=a.deletions,P===null?(a.deletions=[i],a.flags|=16):P.push(i)),a.child=l,a.memoizedState=null,l)}function Hp(i,a){return a=Mf({mode:"visible",children:a},i.mode),a.return=i,i.child=a}function Mf(i,a){return i=Oi(22,i,null,a),i.lanes=0,i.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},i}function Gp(i,a,l){return $o(a,i.child,null,l),i=Hp(a,a.pendingProps.children),i.flags|=2,a.memoizedState=null,i}function kS(i,a,l){i.lanes|=a;var h=i.alternate;h!==null&&(h.lanes|=a),rp(i.return,a,l)}function Vp(i,a,l,h,x){var M=i.memoizedState;M===null?i.memoizedState={isBackwards:a,rendering:null,renderingStartTime:0,last:h,tail:l,tailMode:x}:(M.isBackwards=a,M.rendering=null,M.renderingStartTime=0,M.last=h,M.tail=l,M.tailMode=x)}function WS(i,a,l){var h=a.pendingProps,x=h.revealOrder,M=h.tail;if(si(i,a,h.children,l),h=kn.current,(h&2)!==0)h=h&1|2,a.flags|=128;else{if(i!==null&&(i.flags&128)!==0)e:for(i=a.child;i!==null;){if(i.tag===13)i.memoizedState!==null&&kS(i,l,a);else if(i.tag===19)kS(i,l,a);else if(i.child!==null){i.child.return=i,i=i.child;continue}if(i===a)break e;for(;i.sibling===null;){if(i.return===null||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}h&=1}switch(ie(kn,h),x){case"forwards":for(l=a.child,x=null;l!==null;)i=l.alternate,i!==null&&Sf(i)===null&&(x=l),l=l.sibling;l=x,l===null?(x=a.child,a.child=null):(x=l.sibling,l.sibling=null),Vp(a,!1,x,l,M);break;case"backwards":for(l=null,x=a.child,a.child=null;x!==null;){if(i=x.alternate,i!==null&&Sf(i)===null){a.child=x;break}i=x.sibling,x.sibling=l,l=x,x=i}Vp(a,!0,l,null,M);break;case"together":Vp(a,!1,null,null,void 0);break;default:a.memoizedState=null}return a.child}function dr(i,a,l){if(i!==null&&(a.dependencies=i.dependencies),na|=a.lanes,(l&a.childLanes)===0)if(i!==null){if(bc(i,a,l,!1),(l&a.childLanes)===0)return null}else return null;if(i!==null&&a.child!==i.child)throw Error(n(153));if(a.child!==null){for(i=a.child,l=rr(i,i.pendingProps),a.child=l,l.return=a;i.sibling!==null;)i=i.sibling,l=l.sibling=rr(i,i.pendingProps),l.return=a;l.sibling=null}return a.child}function kp(i,a){return(i.lanes&a)!==0?!0:(i=i.dependencies,!!(i!==null&&nf(i)))}function Hb(i,a,l){switch(a.tag){case 3:Be(a,a.stateNode.containerInfo),Xr(a,Vn,i.memoizedState.cache),Ec();break;case 27:case 5:Xe(a);break;case 4:Be(a,a.stateNode.containerInfo);break;case 10:Xr(a,a.type,a.memoizedProps.value);break;case 13:var h=a.memoizedState;if(h!==null)return h.dehydrated!==null?(Kr(a),a.flags|=128,null):(l&a.child.childLanes)!==0?VS(i,a,l):(Kr(a),i=dr(i,a,l),i!==null?i.sibling:null);Kr(a);break;case 19:var x=(i.flags&128)!==0;if(h=(l&a.childLanes)!==0,h||(bc(i,a,l,!1),h=(l&a.childLanes)!==0),x){if(h)return WS(i,a,l);a.flags|=128}if(x=a.memoizedState,x!==null&&(x.rendering=null,x.tail=null,x.lastEffect=null),ie(kn,kn.current),h)break;return null;case 22:case 23:return a.lanes=0,NS(i,a,l);case 24:Xr(a,Vn,i.memoizedState.cache)}return dr(i,a,l)}function XS(i,a,l){if(i!==null)if(i.memoizedProps!==a.pendingProps)Kn=!0;else{if(!kp(i,l)&&(a.flags&128)===0)return Kn=!1,Hb(i,a,l);Kn=(i.flags&131072)!==0}else Kn=!1,Zt&&(a.flags&1048576)!==0&&Av(a,tf,a.index);switch(a.lanes=0,a.tag){case 16:e:{i=a.pendingProps;var h=a.elementType,x=h._init;if(h=x(h._payload),a.type=h,typeof h=="function")Zh(h)?(i=$a(h,i),a.tag=1,a=HS(null,a,h,i,l)):(a.tag=0,a=Fp(null,a,h,i,l));else{if(h!=null){if(x=h.$$typeof,x===R){a.tag=11,a=IS(null,a,h,i,l);break e}else if(x===w){a.tag=14,a=BS(null,a,h,i,l);break e}}throw a=z(h)||h,Error(n(306,a,""))}}return a;case 0:return Fp(i,a,a.type,a.pendingProps,l);case 1:return h=a.type,x=$a(h,a.pendingProps),HS(i,a,h,x,l);case 3:e:{if(Be(a,a.stateNode.containerInfo),i===null)throw Error(n(387));h=a.pendingProps;var M=a.memoizedState;x=M.element,dp(i,a),Uc(a,h,null,l);var P=a.memoizedState;if(h=P.cache,Xr(a,Vn,h),h!==M.cache&&ap(a,[Vn],l,!0),Pc(),h=P.element,M.isDehydrated)if(M={element:h,isDehydrated:!1,cache:P.cache},a.updateQueue.baseState=M,a.memoizedState=M,a.flags&256){a=GS(i,a,h,l);break e}else if(h!==x){x=ts(Error(n(424)),a),Tc(x),a=GS(i,a,h,l);break e}else{switch(i=a.stateNode.containerInfo,i.nodeType){case 9:i=i.body;break;default:i=i.nodeName==="HTML"?i.ownerDocument.body:i}for(Cn=Ms(i.firstChild),_i=a,Zt=!0,Va=null,Ns=!0,l=MS(a,null,h,l),a.child=l;l;)l.flags=l.flags&-3|4096,l=l.sibling}else{if(Ec(),h===x){a=dr(i,a,l);break e}si(i,a,h,l)}a=a.child}return a;case 26:return yf(i,a),i===null?(l=Qx(a.type,null,a.pendingProps,null))?a.memoizedState=l:Zt||(l=a.type,i=a.pendingProps,h=Nf(ge.current).createElement(l),h[qt]=a,h[an]=i,ai(h,l,i),Se(h),a.stateNode=h):a.memoizedState=Qx(a.type,i.memoizedProps,a.pendingProps,i.memoizedState),null;case 27:return Xe(a),i===null&&Zt&&(h=a.stateNode=qx(a.type,a.pendingProps,ge.current),_i=a,Ns=!0,x=Cn,aa(a.type)?(Mm=x,Cn=Ms(h.firstChild)):Cn=x),si(i,a,a.pendingProps.children,l),yf(i,a),i===null&&(a.flags|=4194304),a.child;case 5:return i===null&&Zt&&((x=h=Cn)&&(h=pC(h,a.type,a.pendingProps,Ns),h!==null?(a.stateNode=h,_i=a,Cn=Ms(h.firstChild),Ns=!1,x=!0):x=!1),x||ka(a)),Xe(a),x=a.type,M=a.pendingProps,P=i!==null?i.memoizedProps:null,h=M.children,Sm(x,M)?h=null:P!==null&&Sm(x,P)&&(a.flags|=32),a.memoizedState!==null&&(x=vp(i,a,Pb,null,null,l),tu._currentValue=x),yf(i,a),si(i,a,h,l),a.child;case 6:return i===null&&Zt&&((i=l=Cn)&&(l=mC(l,a.pendingProps,Ns),l!==null?(a.stateNode=l,_i=a,Cn=null,i=!0):i=!1),i||ka(a)),null;case 13:return VS(i,a,l);case 4:return Be(a,a.stateNode.containerInfo),h=a.pendingProps,i===null?a.child=$o(a,null,h,l):si(i,a,h,l),a.child;case 11:return IS(i,a,a.type,a.pendingProps,l);case 7:return si(i,a,a.pendingProps,l),a.child;case 8:return si(i,a,a.pendingProps.children,l),a.child;case 12:return si(i,a,a.pendingProps.children,l),a.child;case 10:return h=a.pendingProps,Xr(a,a.type,h.value),si(i,a,h.children,l),a.child;case 9:return x=a.type._context,h=a.pendingProps.children,Xa(a),x=ui(x),h=h(x),a.flags|=1,si(i,a,h,l),a.child;case 14:return BS(i,a,a.type,a.pendingProps,l);case 15:return FS(i,a,a.type,a.pendingProps,l);case 19:return WS(i,a,l);case 31:return h=a.pendingProps,l=a.mode,h={mode:h.mode,children:h.children},i===null?(l=Mf(h,l),l.ref=a.ref,a.child=l,l.return=a,a=l):(l=rr(i.child,h),l.ref=a.ref,a.child=l,l.return=a,a=l),a;case 22:return NS(i,a,l);case 24:return Xa(a),h=ui(Vn),i===null?(x=cp(),x===null&&(x=_n,M=op(),x.pooledCache=M,M.refCount++,M!==null&&(x.pooledCacheLanes|=l),x=M),a.memoizedState={parent:h,cache:x},fp(a),Xr(a,Vn,x)):((i.lanes&l)!==0&&(dp(i,a),Uc(a,null,null,l),Pc()),x=i.memoizedState,M=a.memoizedState,x.parent!==h?(x={parent:h,cache:h},a.memoizedState=x,a.lanes===0&&(a.memoizedState=a.updateQueue.baseState=x),Xr(a,Vn,h)):(h=M.cache,Xr(a,Vn,h),h!==x.cache&&ap(a,[Vn],l,!0))),si(i,a,a.pendingProps.children,l),a.child;case 29:throw a.pendingProps}throw Error(n(156,a.tag))}function hr(i){i.flags|=4}function qS(i,a){if(a.type!=="stylesheet"||(a.state.loading&4)!==0)i.flags&=-16777217;else if(i.flags|=16777216,!eA(a)){if(a=rs.current,a!==null&&(($t&4194048)===$t?Os!==null:($t&62914560)!==$t&&($t&536870912)===0||a!==Os))throw Dc=up,wv;i.flags|=8192}}function Ef(i,a){a!==null&&(i.flags|=4),i.flags&16384&&(a=i.tag!==22?Te():536870912,i.lanes|=a,Zo|=a)}function Hc(i,a){if(!Zt)switch(i.tailMode){case"hidden":a=i.tail;for(var l=null;a!==null;)a.alternate!==null&&(l=a),a=a.sibling;l===null?i.tail=null:l.sibling=null;break;case"collapsed":l=i.tail;for(var h=null;l!==null;)l.alternate!==null&&(h=l),l=l.sibling;h===null?a||i.tail===null?i.tail=null:i.tail.sibling=null:h.sibling=null}}function Tn(i){var a=i.alternate!==null&&i.alternate.child===i.child,l=0,h=0;if(a)for(var x=i.child;x!==null;)l|=x.lanes|x.childLanes,h|=x.subtreeFlags&65011712,h|=x.flags&65011712,x.return=i,x=x.sibling;else for(x=i.child;x!==null;)l|=x.lanes|x.childLanes,h|=x.subtreeFlags,h|=x.flags,x.return=i,x=x.sibling;return i.subtreeFlags|=h,i.childLanes=l,a}function Gb(i,a,l){var h=a.pendingProps;switch(np(a),a.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Tn(a),null;case 1:return Tn(a),null;case 3:return l=a.stateNode,h=null,i!==null&&(h=i.memoizedState.cache),a.memoizedState.cache!==h&&(a.flags|=2048),cr(Vn),Ze(),l.pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),(i===null||i.child===null)&&(Mc(a)?hr(a):i===null||i.memoizedState.isDehydrated&&(a.flags&256)===0||(a.flags|=1024,Ev())),Tn(a),null;case 26:return l=a.memoizedState,i===null?(hr(a),l!==null?(Tn(a),qS(a,l)):(Tn(a),a.flags&=-16777217)):l?l!==i.memoizedState?(hr(a),Tn(a),qS(a,l)):(Tn(a),a.flags&=-16777217):(i.memoizedProps!==h&&hr(a),Tn(a),a.flags&=-16777217),null;case 27:ft(a),l=ge.current;var x=a.type;if(i!==null&&a.stateNode!=null)i.memoizedProps!==h&&hr(a);else{if(!h){if(a.stateNode===null)throw Error(n(166));return Tn(a),null}i=j.current,Mc(a)?yv(a):(i=qx(x,h,l),a.stateNode=i,hr(a))}return Tn(a),null;case 5:if(ft(a),l=a.type,i!==null&&a.stateNode!=null)i.memoizedProps!==h&&hr(a);else{if(!h){if(a.stateNode===null)throw Error(n(166));return Tn(a),null}if(i=j.current,Mc(a))yv(a);else{switch(x=Nf(ge.current),i){case 1:i=x.createElementNS("http://www.w3.org/2000/svg",l);break;case 2:i=x.createElementNS("http://www.w3.org/1998/Math/MathML",l);break;default:switch(l){case"svg":i=x.createElementNS("http://www.w3.org/2000/svg",l);break;case"math":i=x.createElementNS("http://www.w3.org/1998/Math/MathML",l);break;case"script":i=x.createElement("div"),i.innerHTML="<script><\/script>",i=i.removeChild(i.firstChild);break;case"select":i=typeof h.is=="string"?x.createElement("select",{is:h.is}):x.createElement("select"),h.multiple?i.multiple=!0:h.size&&(i.size=h.size);break;default:i=typeof h.is=="string"?x.createElement(l,{is:h.is}):x.createElement(l)}}i[qt]=a,i[an]=h;e:for(x=a.child;x!==null;){if(x.tag===5||x.tag===6)i.appendChild(x.stateNode);else if(x.tag!==4&&x.tag!==27&&x.child!==null){x.child.return=x,x=x.child;continue}if(x===a)break e;for(;x.sibling===null;){if(x.return===null||x.return===a)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}a.stateNode=i;e:switch(ai(i,l,h),l){case"button":case"input":case"select":case"textarea":i=!!h.autoFocus;break e;case"img":i=!0;break e;default:i=!1}i&&hr(a)}}return Tn(a),a.flags&=-16777217,null;case 6:if(i&&a.stateNode!=null)i.memoizedProps!==h&&hr(a);else{if(typeof h!="string"&&a.stateNode===null)throw Error(n(166));if(i=ge.current,Mc(a)){if(i=a.stateNode,l=a.memoizedProps,h=null,x=_i,x!==null)switch(x.tag){case 27:case 5:h=x.memoizedProps}i[qt]=a,i=!!(i.nodeValue===l||h!==null&&h.suppressHydrationWarning===!0||zx(i.nodeValue,l)),i||ka(a)}else i=Nf(i).createTextNode(h),i[qt]=a,a.stateNode=i}return Tn(a),null;case 13:if(h=a.memoizedState,i===null||i.memoizedState!==null&&i.memoizedState.dehydrated!==null){if(x=Mc(a),h!==null&&h.dehydrated!==null){if(i===null){if(!x)throw Error(n(318));if(x=a.memoizedState,x=x!==null?x.dehydrated:null,!x)throw Error(n(317));x[qt]=a}else Ec(),(a.flags&128)===0&&(a.memoizedState=null),a.flags|=4;Tn(a),x=!1}else x=Ev(),i!==null&&i.memoizedState!==null&&(i.memoizedState.hydrationErrors=x),x=!0;if(!x)return a.flags&256?(fr(a),a):(fr(a),null)}if(fr(a),(a.flags&128)!==0)return a.lanes=l,a;if(l=h!==null,i=i!==null&&i.memoizedState!==null,l){h=a.child,x=null,h.alternate!==null&&h.alternate.memoizedState!==null&&h.alternate.memoizedState.cachePool!==null&&(x=h.alternate.memoizedState.cachePool.pool);var M=null;h.memoizedState!==null&&h.memoizedState.cachePool!==null&&(M=h.memoizedState.cachePool.pool),M!==x&&(h.flags|=2048)}return l!==i&&l&&(a.child.flags|=8192),Ef(a,a.updateQueue),Tn(a),null;case 4:return Ze(),i===null&&pm(a.stateNode.containerInfo),Tn(a),null;case 10:return cr(a.type),Tn(a),null;case 19:if(ce(kn),x=a.memoizedState,x===null)return Tn(a),null;if(h=(a.flags&128)!==0,M=x.rendering,M===null)if(h)Hc(x,!1);else{if(Rn!==0||i!==null&&(i.flags&128)!==0)for(i=a.child;i!==null;){if(M=Sf(i),M!==null){for(a.flags|=128,Hc(x,!1),i=M.updateQueue,a.updateQueue=i,Ef(a,i),a.subtreeFlags=0,i=l,l=a.child;l!==null;)xv(l,i),l=l.sibling;return ie(kn,kn.current&1|2),a.child}i=i.sibling}x.tail!==null&&at()>Cf&&(a.flags|=128,h=!0,Hc(x,!1),a.lanes=4194304)}else{if(!h)if(i=Sf(M),i!==null){if(a.flags|=128,h=!0,i=i.updateQueue,a.updateQueue=i,Ef(a,i),Hc(x,!0),x.tail===null&&x.tailMode==="hidden"&&!M.alternate&&!Zt)return Tn(a),null}else 2*at()-x.renderingStartTime>Cf&&l!==536870912&&(a.flags|=128,h=!0,Hc(x,!1),a.lanes=4194304);x.isBackwards?(M.sibling=a.child,a.child=M):(i=x.last,i!==null?i.sibling=M:a.child=M,x.last=M)}return x.tail!==null?(a=x.tail,x.rendering=a,x.tail=a.sibling,x.renderingStartTime=at(),a.sibling=null,i=kn.current,ie(kn,h?i&1|2:i&1),a):(Tn(a),null);case 22:case 23:return fr(a),gp(),h=a.memoizedState!==null,i!==null?i.memoizedState!==null!==h&&(a.flags|=8192):h&&(a.flags|=8192),h?(l&536870912)!==0&&(a.flags&128)===0&&(Tn(a),a.subtreeFlags&6&&(a.flags|=8192)):Tn(a),l=a.updateQueue,l!==null&&Ef(a,l.retryQueue),l=null,i!==null&&i.memoizedState!==null&&i.memoizedState.cachePool!==null&&(l=i.memoizedState.cachePool.pool),h=null,a.memoizedState!==null&&a.memoizedState.cachePool!==null&&(h=a.memoizedState.cachePool.pool),h!==l&&(a.flags|=2048),i!==null&&ce(qa),null;case 24:return l=null,i!==null&&(l=i.memoizedState.cache),a.memoizedState.cache!==l&&(a.flags|=2048),cr(Vn),Tn(a),null;case 25:return null;case 30:return null}throw Error(n(156,a.tag))}function Vb(i,a){switch(np(a),a.tag){case 1:return i=a.flags,i&65536?(a.flags=i&-65537|128,a):null;case 3:return cr(Vn),Ze(),i=a.flags,(i&65536)!==0&&(i&128)===0?(a.flags=i&-65537|128,a):null;case 26:case 27:case 5:return ft(a),null;case 13:if(fr(a),i=a.memoizedState,i!==null&&i.dehydrated!==null){if(a.alternate===null)throw Error(n(340));Ec()}return i=a.flags,i&65536?(a.flags=i&-65537|128,a):null;case 19:return ce(kn),null;case 4:return Ze(),null;case 10:return cr(a.type),null;case 22:case 23:return fr(a),gp(),i!==null&&ce(qa),i=a.flags,i&65536?(a.flags=i&-65537|128,a):null;case 24:return cr(Vn),null;case 25:return null;default:return null}}function YS(i,a){switch(np(a),a.tag){case 3:cr(Vn),Ze();break;case 26:case 27:case 5:ft(a);break;case 4:Ze();break;case 13:fr(a);break;case 19:ce(kn);break;case 10:cr(a.type);break;case 22:case 23:fr(a),gp(),i!==null&&ce(qa);break;case 24:cr(Vn)}}function Gc(i,a){try{var l=a.updateQueue,h=l!==null?l.lastEffect:null;if(h!==null){var x=h.next;l=x;do{if((l.tag&i)===i){h=void 0;var M=l.create,P=l.inst;h=M(),P.destroy=h}l=l.next}while(l!==x)}}catch(V){pn(a,a.return,V)}}function Zr(i,a,l){try{var h=a.updateQueue,x=h!==null?h.lastEffect:null;if(x!==null){var M=x.next;h=M;do{if((h.tag&i)===i){var P=h.inst,V=P.destroy;if(V!==void 0){P.destroy=void 0,x=a;var re=l,Me=V;try{Me()}catch(We){pn(x,re,We)}}}h=h.next}while(h!==M)}}catch(We){pn(a,a.return,We)}}function $S(i){var a=i.updateQueue;if(a!==null){var l=i.stateNode;try{Bv(a,l)}catch(h){pn(i,i.return,h)}}}function QS(i,a,l){l.props=$a(i.type,i.memoizedProps),l.state=i.memoizedState;try{l.componentWillUnmount()}catch(h){pn(i,a,h)}}function Vc(i,a){try{var l=i.ref;if(l!==null){switch(i.tag){case 26:case 27:case 5:var h=i.stateNode;break;case 30:h=i.stateNode;break;default:h=i.stateNode}typeof l=="function"?i.refCleanup=l(h):l.current=h}}catch(x){pn(i,a,x)}}function zs(i,a){var l=i.ref,h=i.refCleanup;if(l!==null)if(typeof h=="function")try{h()}catch(x){pn(i,a,x)}finally{i.refCleanup=null,i=i.alternate,i!=null&&(i.refCleanup=null)}else if(typeof l=="function")try{l(null)}catch(x){pn(i,a,x)}else l.current=null}function KS(i){var a=i.type,l=i.memoizedProps,h=i.stateNode;try{e:switch(a){case"button":case"input":case"select":case"textarea":l.autoFocus&&h.focus();break e;case"img":l.src?h.src=l.src:l.srcSet&&(h.srcset=l.srcSet)}}catch(x){pn(i,i.return,x)}}function Wp(i,a,l){try{var h=i.stateNode;cC(h,i.type,l,a),h[an]=a}catch(x){pn(i,i.return,x)}}function jS(i){return i.tag===5||i.tag===3||i.tag===26||i.tag===27&&aa(i.type)||i.tag===4}function Xp(i){e:for(;;){for(;i.sibling===null;){if(i.return===null||jS(i.return))return null;i=i.return}for(i.sibling.return=i.return,i=i.sibling;i.tag!==5&&i.tag!==6&&i.tag!==18;){if(i.tag===27&&aa(i.type)||i.flags&2||i.child===null||i.tag===4)continue e;i.child.return=i,i=i.child}if(!(i.flags&2))return i.stateNode}}function qp(i,a,l){var h=i.tag;if(h===5||h===6)i=i.stateNode,a?(l.nodeType===9?l.body:l.nodeName==="HTML"?l.ownerDocument.body:l).insertBefore(i,a):(a=l.nodeType===9?l.body:l.nodeName==="HTML"?l.ownerDocument.body:l,a.appendChild(i),l=l._reactRootContainer,l!=null||a.onclick!==null||(a.onclick=Ff));else if(h!==4&&(h===27&&aa(i.type)&&(l=i.stateNode,a=null),i=i.child,i!==null))for(qp(i,a,l),i=i.sibling;i!==null;)qp(i,a,l),i=i.sibling}function Tf(i,a,l){var h=i.tag;if(h===5||h===6)i=i.stateNode,a?l.insertBefore(i,a):l.appendChild(i);else if(h!==4&&(h===27&&aa(i.type)&&(l=i.stateNode),i=i.child,i!==null))for(Tf(i,a,l),i=i.sibling;i!==null;)Tf(i,a,l),i=i.sibling}function ZS(i){var a=i.stateNode,l=i.memoizedProps;try{for(var h=i.type,x=a.attributes;x.length;)a.removeAttributeNode(x[0]);ai(a,h,l),a[qt]=i,a[an]=l}catch(M){pn(i,i.return,M)}}var pr=!1,Dn=!1,Yp=!1,JS=typeof WeakSet=="function"?WeakSet:Set,jn=null;function kb(i,a){if(i=i.containerInfo,_m=kf,i=uv(i),Xh(i)){if("selectionStart"in i)var l={start:i.selectionStart,end:i.selectionEnd};else e:{l=(l=i.ownerDocument)&&l.defaultView||window;var h=l.getSelection&&l.getSelection();if(h&&h.rangeCount!==0){l=h.anchorNode;var x=h.anchorOffset,M=h.focusNode;h=h.focusOffset;try{l.nodeType,M.nodeType}catch{l=null;break e}var P=0,V=-1,re=-1,Me=0,We=0,Qe=i,Re=null;t:for(;;){for(var Le;Qe!==l||x!==0&&Qe.nodeType!==3||(V=P+x),Qe!==M||h!==0&&Qe.nodeType!==3||(re=P+h),Qe.nodeType===3&&(P+=Qe.nodeValue.length),(Le=Qe.firstChild)!==null;)Re=Qe,Qe=Le;for(;;){if(Qe===i)break t;if(Re===l&&++Me===x&&(V=P),Re===M&&++We===h&&(re=P),(Le=Qe.nextSibling)!==null)break;Qe=Re,Re=Qe.parentNode}Qe=Le}l=V===-1||re===-1?null:{start:V,end:re}}else l=null}l=l||{start:0,end:0}}else l=null;for(vm={focusedElem:i,selectionRange:l},kf=!1,jn=a;jn!==null;)if(a=jn,i=a.child,(a.subtreeFlags&1024)!==0&&i!==null)i.return=a,jn=i;else for(;jn!==null;){switch(a=jn,M=a.alternate,i=a.flags,a.tag){case 0:break;case 11:case 15:break;case 1:if((i&1024)!==0&&M!==null){i=void 0,l=a,x=M.memoizedProps,M=M.memoizedState,h=l.stateNode;try{var Ct=$a(l.type,x,l.elementType===l.type);i=h.getSnapshotBeforeUpdate(Ct,M),h.__reactInternalSnapshotBeforeUpdate=i}catch(Et){pn(l,l.return,Et)}}break;case 3:if((i&1024)!==0){if(i=a.stateNode.containerInfo,l=i.nodeType,l===9)Am(i);else if(l===1)switch(i.nodeName){case"HEAD":case"HTML":case"BODY":Am(i);break;default:i.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((i&1024)!==0)throw Error(n(163))}if(i=a.sibling,i!==null){i.return=a.return,jn=i;break}jn=a.return}}function ex(i,a,l){var h=l.flags;switch(l.tag){case 0:case 11:case 15:Jr(i,l),h&4&&Gc(5,l);break;case 1:if(Jr(i,l),h&4)if(i=l.stateNode,a===null)try{i.componentDidMount()}catch(P){pn(l,l.return,P)}else{var x=$a(l.type,a.memoizedProps);a=a.memoizedState;try{i.componentDidUpdate(x,a,i.__reactInternalSnapshotBeforeUpdate)}catch(P){pn(l,l.return,P)}}h&64&&$S(l),h&512&&Vc(l,l.return);break;case 3:if(Jr(i,l),h&64&&(i=l.updateQueue,i!==null)){if(a=null,l.child!==null)switch(l.child.tag){case 27:case 5:a=l.child.stateNode;break;case 1:a=l.child.stateNode}try{Bv(i,a)}catch(P){pn(l,l.return,P)}}break;case 27:a===null&&h&4&&ZS(l);case 26:case 5:Jr(i,l),a===null&&h&4&&KS(l),h&512&&Vc(l,l.return);break;case 12:Jr(i,l);break;case 13:Jr(i,l),h&4&&ix(i,l),h&64&&(i=l.memoizedState,i!==null&&(i=i.dehydrated,i!==null&&(l=Zb.bind(null,l),gC(i,l))));break;case 22:if(h=l.memoizedState!==null||pr,!h){a=a!==null&&a.memoizedState!==null||Dn,x=pr;var M=Dn;pr=h,(Dn=a)&&!M?ea(i,l,(l.subtreeFlags&8772)!==0):Jr(i,l),pr=x,Dn=M}break;case 30:break;default:Jr(i,l)}}function tx(i){var a=i.alternate;a!==null&&(i.alternate=null,tx(a)),i.child=null,i.deletions=null,i.sibling=null,i.tag===5&&(a=i.stateNode,a!==null&&vs(a)),i.stateNode=null,i.return=null,i.dependencies=null,i.memoizedProps=null,i.memoizedState=null,i.pendingProps=null,i.stateNode=null,i.updateQueue=null}var An=null,bi=!1;function mr(i,a,l){for(l=l.child;l!==null;)nx(i,a,l),l=l.sibling}function nx(i,a,l){if(Oe&&typeof Oe.onCommitFiberUnmount=="function")try{Oe.onCommitFiberUnmount(pe,l)}catch{}switch(l.tag){case 26:Dn||zs(l,a),mr(i,a,l),l.memoizedState?l.memoizedState.count--:l.stateNode&&(l=l.stateNode,l.parentNode.removeChild(l));break;case 27:Dn||zs(l,a);var h=An,x=bi;aa(l.type)&&(An=l.stateNode,bi=!1),mr(i,a,l),jc(l.stateNode),An=h,bi=x;break;case 5:Dn||zs(l,a);case 6:if(h=An,x=bi,An=null,mr(i,a,l),An=h,bi=x,An!==null)if(bi)try{(An.nodeType===9?An.body:An.nodeName==="HTML"?An.ownerDocument.body:An).removeChild(l.stateNode)}catch(M){pn(l,a,M)}else try{An.removeChild(l.stateNode)}catch(M){pn(l,a,M)}break;case 18:An!==null&&(bi?(i=An,Wx(i.nodeType===9?i.body:i.nodeName==="HTML"?i.ownerDocument.body:i,l.stateNode),ru(i)):Wx(An,l.stateNode));break;case 4:h=An,x=bi,An=l.stateNode.containerInfo,bi=!0,mr(i,a,l),An=h,bi=x;break;case 0:case 11:case 14:case 15:Dn||Zr(2,l,a),Dn||Zr(4,l,a),mr(i,a,l);break;case 1:Dn||(zs(l,a),h=l.stateNode,typeof h.componentWillUnmount=="function"&&QS(l,a,h)),mr(i,a,l);break;case 21:mr(i,a,l);break;case 22:Dn=(h=Dn)||l.memoizedState!==null,mr(i,a,l),Dn=h;break;default:mr(i,a,l)}}function ix(i,a){if(a.memoizedState===null&&(i=a.alternate,i!==null&&(i=i.memoizedState,i!==null&&(i=i.dehydrated,i!==null))))try{ru(i)}catch(l){pn(a,a.return,l)}}function Wb(i){switch(i.tag){case 13:case 19:var a=i.stateNode;return a===null&&(a=i.stateNode=new JS),a;case 22:return i=i.stateNode,a=i._retryCache,a===null&&(a=i._retryCache=new JS),a;default:throw Error(n(435,i.tag))}}function $p(i,a){var l=Wb(i);a.forEach(function(h){var x=Jb.bind(null,i,h);l.has(h)||(l.add(h),h.then(x,x))})}function zi(i,a){var l=a.deletions;if(l!==null)for(var h=0;h<l.length;h++){var x=l[h],M=i,P=a,V=P;e:for(;V!==null;){switch(V.tag){case 27:if(aa(V.type)){An=V.stateNode,bi=!1;break e}break;case 5:An=V.stateNode,bi=!1;break e;case 3:case 4:An=V.stateNode.containerInfo,bi=!0;break e}V=V.return}if(An===null)throw Error(n(160));nx(M,P,x),An=null,bi=!1,M=x.alternate,M!==null&&(M.return=null),x.return=null}if(a.subtreeFlags&13878)for(a=a.child;a!==null;)sx(a,i),a=a.sibling}var ys=null;function sx(i,a){var l=i.alternate,h=i.flags;switch(i.tag){case 0:case 11:case 14:case 15:zi(a,i),Hi(i),h&4&&(Zr(3,i,i.return),Gc(3,i),Zr(5,i,i.return));break;case 1:zi(a,i),Hi(i),h&512&&(Dn||l===null||zs(l,l.return)),h&64&&pr&&(i=i.updateQueue,i!==null&&(h=i.callbacks,h!==null&&(l=i.shared.hiddenCallbacks,i.shared.hiddenCallbacks=l===null?h:l.concat(h))));break;case 26:var x=ys;if(zi(a,i),Hi(i),h&512&&(Dn||l===null||zs(l,l.return)),h&4){var M=l!==null?l.memoizedState:null;if(h=i.memoizedState,l===null)if(h===null)if(i.stateNode===null){e:{h=i.type,l=i.memoizedProps,x=x.ownerDocument||x;t:switch(h){case"title":M=x.getElementsByTagName("title")[0],(!M||M[_s]||M[qt]||M.namespaceURI==="http://www.w3.org/2000/svg"||M.hasAttribute("itemprop"))&&(M=x.createElement(h),x.head.insertBefore(M,x.querySelector("head > title"))),ai(M,h,l),M[qt]=i,Se(M),h=M;break e;case"link":var P=Zx("link","href",x).get(h+(l.href||""));if(P){for(var V=0;V<P.length;V++)if(M=P[V],M.getAttribute("href")===(l.href==null||l.href===""?null:l.href)&&M.getAttribute("rel")===(l.rel==null?null:l.rel)&&M.getAttribute("title")===(l.title==null?null:l.title)&&M.getAttribute("crossorigin")===(l.crossOrigin==null?null:l.crossOrigin)){P.splice(V,1);break t}}M=x.createElement(h),ai(M,h,l),x.head.appendChild(M);break;case"meta":if(P=Zx("meta","content",x).get(h+(l.content||""))){for(V=0;V<P.length;V++)if(M=P[V],M.getAttribute("content")===(l.content==null?null:""+l.content)&&M.getAttribute("name")===(l.name==null?null:l.name)&&M.getAttribute("property")===(l.property==null?null:l.property)&&M.getAttribute("http-equiv")===(l.httpEquiv==null?null:l.httpEquiv)&&M.getAttribute("charset")===(l.charSet==null?null:l.charSet)){P.splice(V,1);break t}}M=x.createElement(h),ai(M,h,l),x.head.appendChild(M);break;default:throw Error(n(468,h))}M[qt]=i,Se(M),h=M}i.stateNode=h}else Jx(x,i.type,i.stateNode);else i.stateNode=jx(x,h,i.memoizedProps);else M!==h?(M===null?l.stateNode!==null&&(l=l.stateNode,l.parentNode.removeChild(l)):M.count--,h===null?Jx(x,i.type,i.stateNode):jx(x,h,i.memoizedProps)):h===null&&i.stateNode!==null&&Wp(i,i.memoizedProps,l.memoizedProps)}break;case 27:zi(a,i),Hi(i),h&512&&(Dn||l===null||zs(l,l.return)),l!==null&&h&4&&Wp(i,i.memoizedProps,l.memoizedProps);break;case 5:if(zi(a,i),Hi(i),h&512&&(Dn||l===null||zs(l,l.return)),i.flags&32){x=i.stateNode;try{Fs(x,"")}catch(Le){pn(i,i.return,Le)}}h&4&&i.stateNode!=null&&(x=i.memoizedProps,Wp(i,x,l!==null?l.memoizedProps:x)),h&1024&&(Yp=!0);break;case 6:if(zi(a,i),Hi(i),h&4){if(i.stateNode===null)throw Error(n(162));h=i.memoizedProps,l=i.stateNode;try{l.nodeValue=h}catch(Le){pn(i,i.return,Le)}}break;case 3:if(Hf=null,x=ys,ys=Of(a.containerInfo),zi(a,i),ys=x,Hi(i),h&4&&l!==null&&l.memoizedState.isDehydrated)try{ru(a.containerInfo)}catch(Le){pn(i,i.return,Le)}Yp&&(Yp=!1,rx(i));break;case 4:h=ys,ys=Of(i.stateNode.containerInfo),zi(a,i),Hi(i),ys=h;break;case 12:zi(a,i),Hi(i);break;case 13:zi(a,i),Hi(i),i.child.flags&8192&&i.memoizedState!==null!=(l!==null&&l.memoizedState!==null)&&(em=at()),h&4&&(h=i.updateQueue,h!==null&&(i.updateQueue=null,$p(i,h)));break;case 22:x=i.memoizedState!==null;var re=l!==null&&l.memoizedState!==null,Me=pr,We=Dn;if(pr=Me||x,Dn=We||re,zi(a,i),Dn=We,pr=Me,Hi(i),h&8192)e:for(a=i.stateNode,a._visibility=x?a._visibility&-2:a._visibility|1,x&&(l===null||re||pr||Dn||Qa(i)),l=null,a=i;;){if(a.tag===5||a.tag===26){if(l===null){re=l=a;try{if(M=re.stateNode,x)P=M.style,typeof P.setProperty=="function"?P.setProperty("display","none","important"):P.display="none";else{V=re.stateNode;var Qe=re.memoizedProps.style,Re=Qe!=null&&Qe.hasOwnProperty("display")?Qe.display:null;V.style.display=Re==null||typeof Re=="boolean"?"":(""+Re).trim()}}catch(Le){pn(re,re.return,Le)}}}else if(a.tag===6){if(l===null){re=a;try{re.stateNode.nodeValue=x?"":re.memoizedProps}catch(Le){pn(re,re.return,Le)}}}else if((a.tag!==22&&a.tag!==23||a.memoizedState===null||a===i)&&a.child!==null){a.child.return=a,a=a.child;continue}if(a===i)break e;for(;a.sibling===null;){if(a.return===null||a.return===i)break e;l===a&&(l=null),a=a.return}l===a&&(l=null),a.sibling.return=a.return,a=a.sibling}h&4&&(h=i.updateQueue,h!==null&&(l=h.retryQueue,l!==null&&(h.retryQueue=null,$p(i,l))));break;case 19:zi(a,i),Hi(i),h&4&&(h=i.updateQueue,h!==null&&(i.updateQueue=null,$p(i,h)));break;case 30:break;case 21:break;default:zi(a,i),Hi(i)}}function Hi(i){var a=i.flags;if(a&2){try{for(var l,h=i.return;h!==null;){if(jS(h)){l=h;break}h=h.return}if(l==null)throw Error(n(160));switch(l.tag){case 27:var x=l.stateNode,M=Xp(i);Tf(i,M,x);break;case 5:var P=l.stateNode;l.flags&32&&(Fs(P,""),l.flags&=-33);var V=Xp(i);Tf(i,V,P);break;case 3:case 4:var re=l.stateNode.containerInfo,Me=Xp(i);qp(i,Me,re);break;default:throw Error(n(161))}}catch(We){pn(i,i.return,We)}i.flags&=-3}a&4096&&(i.flags&=-4097)}function rx(i){if(i.subtreeFlags&1024)for(i=i.child;i!==null;){var a=i;rx(a),a.tag===5&&a.flags&1024&&a.stateNode.reset(),i=i.sibling}}function Jr(i,a){if(a.subtreeFlags&8772)for(a=a.child;a!==null;)ex(i,a.alternate,a),a=a.sibling}function Qa(i){for(i=i.child;i!==null;){var a=i;switch(a.tag){case 0:case 11:case 14:case 15:Zr(4,a,a.return),Qa(a);break;case 1:zs(a,a.return);var l=a.stateNode;typeof l.componentWillUnmount=="function"&&QS(a,a.return,l),Qa(a);break;case 27:jc(a.stateNode);case 26:case 5:zs(a,a.return),Qa(a);break;case 22:a.memoizedState===null&&Qa(a);break;case 30:Qa(a);break;default:Qa(a)}i=i.sibling}}function ea(i,a,l){for(l=l&&(a.subtreeFlags&8772)!==0,a=a.child;a!==null;){var h=a.alternate,x=i,M=a,P=M.flags;switch(M.tag){case 0:case 11:case 15:ea(x,M,l),Gc(4,M);break;case 1:if(ea(x,M,l),h=M,x=h.stateNode,typeof x.componentDidMount=="function")try{x.componentDidMount()}catch(Me){pn(h,h.return,Me)}if(h=M,x=h.updateQueue,x!==null){var V=h.stateNode;try{var re=x.shared.hiddenCallbacks;if(re!==null)for(x.shared.hiddenCallbacks=null,x=0;x<re.length;x++)Iv(re[x],V)}catch(Me){pn(h,h.return,Me)}}l&&P&64&&$S(M),Vc(M,M.return);break;case 27:ZS(M);case 26:case 5:ea(x,M,l),l&&h===null&&P&4&&KS(M),Vc(M,M.return);break;case 12:ea(x,M,l);break;case 13:ea(x,M,l),l&&P&4&&ix(x,M);break;case 22:M.memoizedState===null&&ea(x,M,l),Vc(M,M.return);break;case 30:break;default:ea(x,M,l)}a=a.sibling}}function Qp(i,a){var l=null;i!==null&&i.memoizedState!==null&&i.memoizedState.cachePool!==null&&(l=i.memoizedState.cachePool.pool),i=null,a.memoizedState!==null&&a.memoizedState.cachePool!==null&&(i=a.memoizedState.cachePool.pool),i!==l&&(i!=null&&i.refCount++,l!=null&&Cc(l))}function Kp(i,a){i=null,a.alternate!==null&&(i=a.alternate.memoizedState.cache),a=a.memoizedState.cache,a!==i&&(a.refCount++,i!=null&&Cc(i))}function Hs(i,a,l,h){if(a.subtreeFlags&10256)for(a=a.child;a!==null;)ax(i,a,l,h),a=a.sibling}function ax(i,a,l,h){var x=a.flags;switch(a.tag){case 0:case 11:case 15:Hs(i,a,l,h),x&2048&&Gc(9,a);break;case 1:Hs(i,a,l,h);break;case 3:Hs(i,a,l,h),x&2048&&(i=null,a.alternate!==null&&(i=a.alternate.memoizedState.cache),a=a.memoizedState.cache,a!==i&&(a.refCount++,i!=null&&Cc(i)));break;case 12:if(x&2048){Hs(i,a,l,h),i=a.stateNode;try{var M=a.memoizedProps,P=M.id,V=M.onPostCommit;typeof V=="function"&&V(P,a.alternate===null?"mount":"update",i.passiveEffectDuration,-0)}catch(re){pn(a,a.return,re)}}else Hs(i,a,l,h);break;case 13:Hs(i,a,l,h);break;case 23:break;case 22:M=a.stateNode,P=a.alternate,a.memoizedState!==null?M._visibility&2?Hs(i,a,l,h):kc(i,a):M._visibility&2?Hs(i,a,l,h):(M._visibility|=2,Qo(i,a,l,h,(a.subtreeFlags&10256)!==0)),x&2048&&Qp(P,a);break;case 24:Hs(i,a,l,h),x&2048&&Kp(a.alternate,a);break;default:Hs(i,a,l,h)}}function Qo(i,a,l,h,x){for(x=x&&(a.subtreeFlags&10256)!==0,a=a.child;a!==null;){var M=i,P=a,V=l,re=h,Me=P.flags;switch(P.tag){case 0:case 11:case 15:Qo(M,P,V,re,x),Gc(8,P);break;case 23:break;case 22:var We=P.stateNode;P.memoizedState!==null?We._visibility&2?Qo(M,P,V,re,x):kc(M,P):(We._visibility|=2,Qo(M,P,V,re,x)),x&&Me&2048&&Qp(P.alternate,P);break;case 24:Qo(M,P,V,re,x),x&&Me&2048&&Kp(P.alternate,P);break;default:Qo(M,P,V,re,x)}a=a.sibling}}function kc(i,a){if(a.subtreeFlags&10256)for(a=a.child;a!==null;){var l=i,h=a,x=h.flags;switch(h.tag){case 22:kc(l,h),x&2048&&Qp(h.alternate,h);break;case 24:kc(l,h),x&2048&&Kp(h.alternate,h);break;default:kc(l,h)}a=a.sibling}}var Wc=8192;function Ko(i){if(i.subtreeFlags&Wc)for(i=i.child;i!==null;)ox(i),i=i.sibling}function ox(i){switch(i.tag){case 26:Ko(i),i.flags&Wc&&i.memoizedState!==null&&wC(ys,i.memoizedState,i.memoizedProps);break;case 5:Ko(i);break;case 3:case 4:var a=ys;ys=Of(i.stateNode.containerInfo),Ko(i),ys=a;break;case 22:i.memoizedState===null&&(a=i.alternate,a!==null&&a.memoizedState!==null?(a=Wc,Wc=16777216,Ko(i),Wc=a):Ko(i));break;default:Ko(i)}}function lx(i){var a=i.alternate;if(a!==null&&(i=a.child,i!==null)){a.child=null;do a=i.sibling,i.sibling=null,i=a;while(i!==null)}}function Xc(i){var a=i.deletions;if((i.flags&16)!==0){if(a!==null)for(var l=0;l<a.length;l++){var h=a[l];jn=h,ux(h,i)}lx(i)}if(i.subtreeFlags&10256)for(i=i.child;i!==null;)cx(i),i=i.sibling}function cx(i){switch(i.tag){case 0:case 11:case 15:Xc(i),i.flags&2048&&Zr(9,i,i.return);break;case 3:Xc(i);break;case 12:Xc(i);break;case 22:var a=i.stateNode;i.memoizedState!==null&&a._visibility&2&&(i.return===null||i.return.tag!==13)?(a._visibility&=-3,bf(i)):Xc(i);break;default:Xc(i)}}function bf(i){var a=i.deletions;if((i.flags&16)!==0){if(a!==null)for(var l=0;l<a.length;l++){var h=a[l];jn=h,ux(h,i)}lx(i)}for(i=i.child;i!==null;){switch(a=i,a.tag){case 0:case 11:case 15:Zr(8,a,a.return),bf(a);break;case 22:l=a.stateNode,l._visibility&2&&(l._visibility&=-3,bf(a));break;default:bf(a)}i=i.sibling}}function ux(i,a){for(;jn!==null;){var l=jn;switch(l.tag){case 0:case 11:case 15:Zr(8,l,a);break;case 23:case 22:if(l.memoizedState!==null&&l.memoizedState.cachePool!==null){var h=l.memoizedState.cachePool.pool;h!=null&&h.refCount++}break;case 24:Cc(l.memoizedState.cache)}if(h=l.child,h!==null)h.return=l,jn=h;else e:for(l=i;jn!==null;){h=jn;var x=h.sibling,M=h.return;if(tx(h),h===l){jn=null;break e}if(x!==null){x.return=M,jn=x;break e}jn=M}}}var Xb={getCacheForType:function(i){var a=ui(Vn),l=a.data.get(i);return l===void 0&&(l=i(),a.data.set(i,l)),l}},qb=typeof WeakMap=="function"?WeakMap:Map,nn=0,_n=null,Vt=null,$t=0,sn=0,Gi=null,ta=!1,jo=!1,jp=!1,gr=0,Rn=0,na=0,Ka=0,Zp=0,as=0,Zo=0,qc=null,Ci=null,Jp=!1,em=0,Cf=1/0,Rf=null,ia=null,ri=0,sa=null,Jo=null,el=0,tm=0,nm=null,fx=null,Yc=0,im=null;function Vi(){if((nn&2)!==0&&$t!==0)return $t&-$t;if(I.T!==null){var i=Go;return i!==0?i:um()}return Mt()}function dx(){as===0&&(as=($t&536870912)===0||Zt?oe():536870912);var i=rs.current;return i!==null&&(i.flags|=32),as}function ki(i,a,l){(i===_n&&(sn===2||sn===9)||i.cancelPendingCommit!==null)&&(tl(i,0),ra(i,$t,as,!1)),he(i,l),((nn&2)===0||i!==_n)&&(i===_n&&((nn&2)===0&&(Ka|=l),Rn===4&&ra(i,$t,as,!1)),Gs(i))}function hx(i,a,l){if((nn&6)!==0)throw Error(n(327));var h=!l&&(a&124)===0&&(a&i.expiredLanes)===0||st(i,a),x=h?Qb(i,a):am(i,a,!0),M=h;do{if(x===0){jo&&!h&&ra(i,a,0,!1);break}else{if(l=i.current.alternate,M&&!Yb(l)){x=am(i,a,!1),M=!1;continue}if(x===2){if(M=a,i.errorRecoveryDisabledLanes&M)var P=0;else P=i.pendingLanes&-536870913,P=P!==0?P:P&536870912?536870912:0;if(P!==0){a=P;e:{var V=i;x=qc;var re=V.current.memoizedState.isDehydrated;if(re&&(tl(V,P).flags|=256),P=am(V,P,!1),P!==2){if(jp&&!re){V.errorRecoveryDisabledLanes|=M,Ka|=M,x=4;break e}M=Ci,Ci=x,M!==null&&(Ci===null?Ci=M:Ci.push.apply(Ci,M))}x=P}if(M=!1,x!==2)continue}}if(x===1){tl(i,0),ra(i,a,0,!0);break}e:{switch(h=i,M=x,M){case 0:case 1:throw Error(n(345));case 4:if((a&4194048)!==a)break;case 6:ra(h,a,as,!ta);break e;case 2:Ci=null;break;case 3:case 5:break;default:throw Error(n(329))}if((a&62914560)===a&&(x=em+300-at(),10<x)){if(ra(h,a,as,!ta),tt(h,0,!0)!==0)break e;h.timeoutHandle=Vx(px.bind(null,h,l,Ci,Rf,Jp,a,as,Ka,Zo,ta,M,2,-0,0),x);break e}px(h,l,Ci,Rf,Jp,a,as,Ka,Zo,ta,M,0,-0,0)}}break}while(!0);Gs(i)}function px(i,a,l,h,x,M,P,V,re,Me,We,Qe,Re,Le){if(i.timeoutHandle=-1,Qe=a.subtreeFlags,(Qe&8192||(Qe&16785408)===16785408)&&(eu={stylesheets:null,count:0,unsuspend:RC},ox(a),Qe=DC(),Qe!==null)){i.cancelPendingCommit=Qe(Ax.bind(null,i,a,M,l,h,x,P,V,re,We,1,Re,Le)),ra(i,M,P,!Me);return}Ax(i,a,M,l,h,x,P,V,re)}function Yb(i){for(var a=i;;){var l=a.tag;if((l===0||l===11||l===15)&&a.flags&16384&&(l=a.updateQueue,l!==null&&(l=l.stores,l!==null)))for(var h=0;h<l.length;h++){var x=l[h],M=x.getSnapshot;x=x.value;try{if(!Ni(M(),x))return!1}catch{return!1}}if(l=a.child,a.subtreeFlags&16384&&l!==null)l.return=a,a=l;else{if(a===i)break;for(;a.sibling===null;){if(a.return===null||a.return===i)return!0;a=a.return}a.sibling.return=a.return,a=a.sibling}}return!0}function ra(i,a,l,h){a&=~Zp,a&=~Ka,i.suspendedLanes|=a,i.pingedLanes&=~a,h&&(i.warmLanes|=a),h=i.expirationTimes;for(var x=a;0<x;){var M=31-je(x),P=1<<M;h[M]=-1,x&=~P}l!==0&&Ge(i,l,a)}function wf(){return(nn&6)===0?($c(0),!1):!0}function sm(){if(Vt!==null){if(sn===0)var i=Vt.return;else i=Vt,lr=Wa=null,Ap(i),Yo=null,Oc=0,i=Vt;for(;i!==null;)YS(i.alternate,i),i=i.return;Vt=null}}function tl(i,a){var l=i.timeoutHandle;l!==-1&&(i.timeoutHandle=-1,fC(l)),l=i.cancelPendingCommit,l!==null&&(i.cancelPendingCommit=null,l()),sm(),_n=i,Vt=l=rr(i.current,null),$t=a,sn=0,Gi=null,ta=!1,jo=st(i,a),jp=!1,Zo=as=Zp=Ka=na=Rn=0,Ci=qc=null,Jp=!1,(a&8)!==0&&(a|=a&32);var h=i.entangledLanes;if(h!==0)for(i=i.entanglements,h&=a;0<h;){var x=31-je(h),M=1<<x;a|=i[x],h&=~M}return gr=a,Ku(),l}function mx(i,a){zt=null,I.H=gf,a===wc||a===af?(a=Pv(),sn=3):a===wv?(a=Pv(),sn=4):sn=a===US?8:a!==null&&typeof a=="object"&&typeof a.then=="function"?6:1,Gi=a,Vt===null&&(Rn=1,Af(i,ts(a,i.current)))}function gx(){var i=I.H;return I.H=gf,i===null?gf:i}function _x(){var i=I.A;return I.A=Xb,i}function rm(){Rn=4,ta||($t&4194048)!==$t&&rs.current!==null||(jo=!0),(na&134217727)===0&&(Ka&134217727)===0||_n===null||ra(_n,$t,as,!1)}function am(i,a,l){var h=nn;nn|=2;var x=gx(),M=_x();(_n!==i||$t!==a)&&(Rf=null,tl(i,a)),a=!1;var P=Rn;e:do try{if(sn!==0&&Vt!==null){var V=Vt,re=Gi;switch(sn){case 8:sm(),P=6;break e;case 3:case 2:case 9:case 6:rs.current===null&&(a=!0);var Me=sn;if(sn=0,Gi=null,nl(i,V,re,Me),l&&jo){P=0;break e}break;default:Me=sn,sn=0,Gi=null,nl(i,V,re,Me)}}$b(),P=Rn;break}catch(We){mx(i,We)}while(!0);return a&&i.shellSuspendCounter++,lr=Wa=null,nn=h,I.H=x,I.A=M,Vt===null&&(_n=null,$t=0,Ku()),P}function $b(){for(;Vt!==null;)vx(Vt)}function Qb(i,a){var l=nn;nn|=2;var h=gx(),x=_x();_n!==i||$t!==a?(Rf=null,Cf=at()+500,tl(i,a)):jo=st(i,a);e:do try{if(sn!==0&&Vt!==null){a=Vt;var M=Gi;t:switch(sn){case 1:sn=0,Gi=null,nl(i,a,M,1);break;case 2:case 9:if(Dv(M)){sn=0,Gi=null,Sx(a);break}a=function(){sn!==2&&sn!==9||_n!==i||(sn=7),Gs(i)},M.then(a,a);break e;case 3:sn=7;break e;case 4:sn=5;break e;case 7:Dv(M)?(sn=0,Gi=null,Sx(a)):(sn=0,Gi=null,nl(i,a,M,7));break;case 5:var P=null;switch(Vt.tag){case 26:P=Vt.memoizedState;case 5:case 27:var V=Vt;if(!P||eA(P)){sn=0,Gi=null;var re=V.sibling;if(re!==null)Vt=re;else{var Me=V.return;Me!==null?(Vt=Me,Df(Me)):Vt=null}break t}}sn=0,Gi=null,nl(i,a,M,5);break;case 6:sn=0,Gi=null,nl(i,a,M,6);break;case 8:sm(),Rn=6;break e;default:throw Error(n(462))}}Kb();break}catch(We){mx(i,We)}while(!0);return lr=Wa=null,I.H=h,I.A=x,nn=l,Vt!==null?0:(_n=null,$t=0,Ku(),Rn)}function Kb(){for(;Vt!==null&&!it();)vx(Vt)}function vx(i){var a=XS(i.alternate,i,gr);i.memoizedProps=i.pendingProps,a===null?Df(i):Vt=a}function Sx(i){var a=i,l=a.alternate;switch(a.tag){case 15:case 0:a=zS(l,a,a.pendingProps,a.type,void 0,$t);break;case 11:a=zS(l,a,a.pendingProps,a.type.render,a.ref,$t);break;case 5:Ap(a);default:YS(l,a),a=Vt=xv(a,gr),a=XS(l,a,gr)}i.memoizedProps=i.pendingProps,a===null?Df(i):Vt=a}function nl(i,a,l,h){lr=Wa=null,Ap(a),Yo=null,Oc=0;var x=a.return;try{if(zb(i,x,a,l,$t)){Rn=1,Af(i,ts(l,i.current)),Vt=null;return}}catch(M){if(x!==null)throw Vt=x,M;Rn=1,Af(i,ts(l,i.current)),Vt=null;return}a.flags&32768?(Zt||h===1?i=!0:jo||($t&536870912)!==0?i=!1:(ta=i=!0,(h===2||h===9||h===3||h===6)&&(h=rs.current,h!==null&&h.tag===13&&(h.flags|=16384))),xx(a,i)):Df(a)}function Df(i){var a=i;do{if((a.flags&32768)!==0){xx(a,ta);return}i=a.return;var l=Gb(a.alternate,a,gr);if(l!==null){Vt=l;return}if(a=a.sibling,a!==null){Vt=a;return}Vt=a=i}while(a!==null);Rn===0&&(Rn=5)}function xx(i,a){do{var l=Vb(i.alternate,i);if(l!==null){l.flags&=32767,Vt=l;return}if(l=i.return,l!==null&&(l.flags|=32768,l.subtreeFlags=0,l.deletions=null),!a&&(i=i.sibling,i!==null)){Vt=i;return}Vt=i=l}while(i!==null);Rn=6,Vt=null}function Ax(i,a,l,h,x,M,P,V,re){i.cancelPendingCommit=null;do Lf();while(ri!==0);if((nn&6)!==0)throw Error(n(327));if(a!==null){if(a===i.current)throw Error(n(177));if(M=a.lanes|a.childLanes,M|=Kh,De(i,l,M,P,V,re),i===_n&&(Vt=_n=null,$t=0),Jo=a,sa=i,el=l,tm=M,nm=x,fx=h,(a.subtreeFlags&10256)!==0||(a.flags&10256)!==0?(i.callbackNode=null,i.callbackPriority=0,eC(N,function(){return bx(),null})):(i.callbackNode=null,i.callbackPriority=0),h=(a.flags&13878)!==0,(a.subtreeFlags&13878)!==0||h){h=I.T,I.T=null,x=Y.p,Y.p=2,P=nn,nn|=4;try{kb(i,a,l)}finally{nn=P,Y.p=x,I.T=h}}ri=1,yx(),Mx(),Ex()}}function yx(){if(ri===1){ri=0;var i=sa,a=Jo,l=(a.flags&13878)!==0;if((a.subtreeFlags&13878)!==0||l){l=I.T,I.T=null;var h=Y.p;Y.p=2;var x=nn;nn|=4;try{sx(a,i);var M=vm,P=uv(i.containerInfo),V=M.focusedElem,re=M.selectionRange;if(P!==V&&V&&V.ownerDocument&&cv(V.ownerDocument.documentElement,V)){if(re!==null&&Xh(V)){var Me=re.start,We=re.end;if(We===void 0&&(We=Me),"selectionStart"in V)V.selectionStart=Me,V.selectionEnd=Math.min(We,V.value.length);else{var Qe=V.ownerDocument||document,Re=Qe&&Qe.defaultView||window;if(Re.getSelection){var Le=Re.getSelection(),Ct=V.textContent.length,Et=Math.min(re.start,Ct),cn=re.end===void 0?Et:Math.min(re.end,Ct);!Le.extend&&Et>cn&&(P=cn,cn=Et,Et=P);var xe=lv(V,Et),de=lv(V,cn);if(xe&&de&&(Le.rangeCount!==1||Le.anchorNode!==xe.node||Le.anchorOffset!==xe.offset||Le.focusNode!==de.node||Le.focusOffset!==de.offset)){var ye=Qe.createRange();ye.setStart(xe.node,xe.offset),Le.removeAllRanges(),Et>cn?(Le.addRange(ye),Le.extend(de.node,de.offset)):(ye.setEnd(de.node,de.offset),Le.addRange(ye))}}}}for(Qe=[],Le=V;Le=Le.parentNode;)Le.nodeType===1&&Qe.push({element:Le,left:Le.scrollLeft,top:Le.scrollTop});for(typeof V.focus=="function"&&V.focus(),V=0;V<Qe.length;V++){var Ye=Qe[V];Ye.element.scrollLeft=Ye.left,Ye.element.scrollTop=Ye.top}}kf=!!_m,vm=_m=null}finally{nn=x,Y.p=h,I.T=l}}i.current=a,ri=2}}function Mx(){if(ri===2){ri=0;var i=sa,a=Jo,l=(a.flags&8772)!==0;if((a.subtreeFlags&8772)!==0||l){l=I.T,I.T=null;var h=Y.p;Y.p=2;var x=nn;nn|=4;try{ex(i,a.alternate,a)}finally{nn=x,Y.p=h,I.T=l}}ri=3}}function Ex(){if(ri===4||ri===3){ri=0,Ke();var i=sa,a=Jo,l=el,h=fx;(a.subtreeFlags&10256)!==0||(a.flags&10256)!==0?ri=5:(ri=0,Jo=sa=null,Tx(i,i.pendingLanes));var x=i.pendingLanes;if(x===0&&(ia=null),Rt(l),a=a.stateNode,Oe&&typeof Oe.onCommitFiberRoot=="function")try{Oe.onCommitFiberRoot(pe,a,void 0,(a.current.flags&128)===128)}catch{}if(h!==null){a=I.T,x=Y.p,Y.p=2,I.T=null;try{for(var M=i.onRecoverableError,P=0;P<h.length;P++){var V=h[P];M(V.value,{componentStack:V.stack})}}finally{I.T=a,Y.p=x}}(el&3)!==0&&Lf(),Gs(i),x=i.pendingLanes,(l&4194090)!==0&&(x&42)!==0?i===im?Yc++:(Yc=0,im=i):Yc=0,$c(0)}}function Tx(i,a){(i.pooledCacheLanes&=a)===0&&(a=i.pooledCache,a!=null&&(i.pooledCache=null,Cc(a)))}function Lf(i){return yx(),Mx(),Ex(),bx()}function bx(){if(ri!==5)return!1;var i=sa,a=tm;tm=0;var l=Rt(el),h=I.T,x=Y.p;try{Y.p=32>l?32:l,I.T=null,l=nm,nm=null;var M=sa,P=el;if(ri=0,Jo=sa=null,el=0,(nn&6)!==0)throw Error(n(331));var V=nn;if(nn|=4,cx(M.current),ax(M,M.current,P,l),nn=V,$c(0,!1),Oe&&typeof Oe.onPostCommitFiberRoot=="function")try{Oe.onPostCommitFiberRoot(pe,M)}catch{}return!0}finally{Y.p=x,I.T=h,Tx(i,a)}}function Cx(i,a,l){a=ts(l,a),a=Bp(i.stateNode,a,2),i=$r(i,a,2),i!==null&&(he(i,2),Gs(i))}function pn(i,a,l){if(i.tag===3)Cx(i,i,l);else for(;a!==null;){if(a.tag===3){Cx(a,i,l);break}else if(a.tag===1){var h=a.stateNode;if(typeof a.type.getDerivedStateFromError=="function"||typeof h.componentDidCatch=="function"&&(ia===null||!ia.has(h))){i=ts(l,i),l=LS(2),h=$r(a,l,2),h!==null&&(PS(l,h,a,i),he(h,2),Gs(h));break}}a=a.return}}function om(i,a,l){var h=i.pingCache;if(h===null){h=i.pingCache=new qb;var x=new Set;h.set(a,x)}else x=h.get(a),x===void 0&&(x=new Set,h.set(a,x));x.has(l)||(jp=!0,x.add(l),i=jb.bind(null,i,a,l),a.then(i,i))}function jb(i,a,l){var h=i.pingCache;h!==null&&h.delete(a),i.pingedLanes|=i.suspendedLanes&l,i.warmLanes&=~l,_n===i&&($t&l)===l&&(Rn===4||Rn===3&&($t&62914560)===$t&&300>at()-em?(nn&2)===0&&tl(i,0):Zp|=l,Zo===$t&&(Zo=0)),Gs(i)}function Rx(i,a){a===0&&(a=Te()),i=No(i,a),i!==null&&(he(i,a),Gs(i))}function Zb(i){var a=i.memoizedState,l=0;a!==null&&(l=a.retryLane),Rx(i,l)}function Jb(i,a){var l=0;switch(i.tag){case 13:var h=i.stateNode,x=i.memoizedState;x!==null&&(l=x.retryLane);break;case 19:h=i.stateNode;break;case 22:h=i.stateNode._retryCache;break;default:throw Error(n(314))}h!==null&&h.delete(a),Rx(i,l)}function eC(i,a){return ct(i,a)}var Pf=null,il=null,lm=!1,Uf=!1,cm=!1,ja=0;function Gs(i){i!==il&&i.next===null&&(il===null?Pf=il=i:il=il.next=i),Uf=!0,lm||(lm=!0,nC())}function $c(i,a){if(!cm&&Uf){cm=!0;do for(var l=!1,h=Pf;h!==null;){if(i!==0){var x=h.pendingLanes;if(x===0)var M=0;else{var P=h.suspendedLanes,V=h.pingedLanes;M=(1<<31-je(42|i)+1)-1,M&=x&~(P&~V),M=M&201326741?M&201326741|1:M?M|2:0}M!==0&&(l=!0,Px(h,M))}else M=$t,M=tt(h,h===_n?M:0,h.cancelPendingCommit!==null||h.timeoutHandle!==-1),(M&3)===0||st(h,M)||(l=!0,Px(h,M));h=h.next}while(l);cm=!1}}function tC(){wx()}function wx(){Uf=lm=!1;var i=0;ja!==0&&(uC()&&(i=ja),ja=0);for(var a=at(),l=null,h=Pf;h!==null;){var x=h.next,M=Dx(h,a);M===0?(h.next=null,l===null?Pf=x:l.next=x,x===null&&(il=l)):(l=h,(i!==0||(M&3)!==0)&&(Uf=!0)),h=x}$c(i)}function Dx(i,a){for(var l=i.suspendedLanes,h=i.pingedLanes,x=i.expirationTimes,M=i.pendingLanes&-62914561;0<M;){var P=31-je(M),V=1<<P,re=x[P];re===-1?((V&l)===0||(V&h)!==0)&&(x[P]=St(V,a)):re<=a&&(i.expiredLanes|=V),M&=~V}if(a=_n,l=$t,l=tt(i,i===a?l:0,i.cancelPendingCommit!==null||i.timeoutHandle!==-1),h=i.callbackNode,l===0||i===a&&(sn===2||sn===9)||i.cancelPendingCommit!==null)return h!==null&&h!==null&&Z(h),i.callbackNode=null,i.callbackPriority=0;if((l&3)===0||st(i,l)){if(a=l&-l,a===i.callbackPriority)return a;switch(h!==null&&Z(h),Rt(l)){case 2:case 8:l=G;break;case 32:l=N;break;case 268435456:l=se;break;default:l=N}return h=Lx.bind(null,i),l=ct(l,h),i.callbackPriority=a,i.callbackNode=l,a}return h!==null&&h!==null&&Z(h),i.callbackPriority=2,i.callbackNode=null,2}function Lx(i,a){if(ri!==0&&ri!==5)return i.callbackNode=null,i.callbackPriority=0,null;var l=i.callbackNode;if(Lf()&&i.callbackNode!==l)return null;var h=$t;return h=tt(i,i===_n?h:0,i.cancelPendingCommit!==null||i.timeoutHandle!==-1),h===0?null:(hx(i,h,a),Dx(i,at()),i.callbackNode!=null&&i.callbackNode===l?Lx.bind(null,i):null)}function Px(i,a){if(Lf())return null;hx(i,a,!0)}function nC(){dC(function(){(nn&6)!==0?ct(Q,tC):wx()})}function um(){return ja===0&&(ja=oe()),ja}function Ux(i){return i==null||typeof i=="symbol"||typeof i=="boolean"?null:typeof i=="function"?i:ku(""+i)}function Ix(i,a){var l=a.ownerDocument.createElement("input");return l.name=a.name,l.value=a.value,i.id&&l.setAttribute("form",i.id),a.parentNode.insertBefore(l,a),i=new FormData(i),l.parentNode.removeChild(l),i}function iC(i,a,l,h,x){if(a==="submit"&&l&&l.stateNode===x){var M=Ux((x[an]||null).action),P=h.submitter;P&&(a=(a=P[an]||null)?Ux(a.formAction):P.getAttribute("formAction"),a!==null&&(M=a,P=null));var V=new Yu("action","action",null,h,x);i.push({event:V,listeners:[{instance:null,listener:function(){if(h.defaultPrevented){if(ja!==0){var re=P?Ix(x,P):new FormData(x);Dp(l,{pending:!0,data:re,method:x.method,action:M},null,re)}}else typeof M=="function"&&(V.preventDefault(),re=P?Ix(x,P):new FormData(x),Dp(l,{pending:!0,data:re,method:x.method,action:M},M,re))},currentTarget:x}]})}}for(var fm=0;fm<Qh.length;fm++){var dm=Qh[fm],sC=dm.toLowerCase(),rC=dm[0].toUpperCase()+dm.slice(1);As(sC,"on"+rC)}As(hv,"onAnimationEnd"),As(pv,"onAnimationIteration"),As(mv,"onAnimationStart"),As("dblclick","onDoubleClick"),As("focusin","onFocus"),As("focusout","onBlur"),As(yb,"onTransitionRun"),As(Mb,"onTransitionStart"),As(Eb,"onTransitionCancel"),As(gv,"onTransitionEnd"),H("onMouseEnter",["mouseout","mouseover"]),H("onMouseLeave",["mouseout","mouseover"]),H("onPointerEnter",["pointerout","pointerover"]),H("onPointerLeave",["pointerout","pointerover"]),we("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),we("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),we("onBeforeInput",["compositionend","keypress","textInput","paste"]),we("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),we("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),we("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Qc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),aC=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Qc));function Bx(i,a){a=(a&4)!==0;for(var l=0;l<i.length;l++){var h=i[l],x=h.event;h=h.listeners;e:{var M=void 0;if(a)for(var P=h.length-1;0<=P;P--){var V=h[P],re=V.instance,Me=V.currentTarget;if(V=V.listener,re!==M&&x.isPropagationStopped())break e;M=V,x.currentTarget=Me;try{M(x)}catch(We){xf(We)}x.currentTarget=null,M=re}else for(P=0;P<h.length;P++){if(V=h[P],re=V.instance,Me=V.currentTarget,V=V.listener,re!==M&&x.isPropagationStopped())break e;M=V,x.currentTarget=Me;try{M(x)}catch(We){xf(We)}x.currentTarget=null,M=re}}}}function kt(i,a){var l=a[er];l===void 0&&(l=a[er]=new Set);var h=i+"__bubble";l.has(h)||(Fx(a,i,2,!1),l.add(h))}function hm(i,a,l){var h=0;a&&(h|=4),Fx(l,i,h,a)}var If="_reactListening"+Math.random().toString(36).slice(2);function pm(i){if(!i[If]){i[If]=!0,Ue.forEach(function(l){l!=="selectionchange"&&(aC.has(l)||hm(l,!1,i),hm(l,!0,i))});var a=i.nodeType===9?i:i.ownerDocument;a===null||a[If]||(a[If]=!0,hm("selectionchange",!1,a))}}function Fx(i,a,l,h){switch(aA(a)){case 2:var x=UC;break;case 8:x=IC;break;default:x=Rm}l=x.bind(null,a,l,i),x=void 0,!Fh||a!=="touchstart"&&a!=="touchmove"&&a!=="wheel"||(x=!0),h?x!==void 0?i.addEventListener(a,l,{capture:!0,passive:x}):i.addEventListener(a,l,!0):x!==void 0?i.addEventListener(a,l,{passive:x}):i.addEventListener(a,l,!1)}function mm(i,a,l,h,x){var M=h;if((a&1)===0&&(a&2)===0&&h!==null)e:for(;;){if(h===null)return;var P=h.tag;if(P===3||P===4){var V=h.stateNode.containerInfo;if(V===x)break;if(P===4)for(P=h.return;P!==null;){var re=P.tag;if((re===3||re===4)&&P.stateNode.containerInfo===x)return;P=P.return}for(;V!==null;){if(P=Ss(V),P===null)return;if(re=P.tag,re===5||re===6||re===26||re===27){h=M=P;continue e}V=V.parentNode}}h=h.return}k_(function(){var Me=M,We=Ih(l),Qe=[];e:{var Re=_v.get(i);if(Re!==void 0){var Le=Yu,Ct=i;switch(i){case"keypress":if(Xu(l)===0)break e;case"keydown":case"keyup":Le=eb;break;case"focusin":Ct="focus",Le=Hh;break;case"focusout":Ct="blur",Le=Hh;break;case"beforeblur":case"afterblur":Le=Hh;break;case"click":if(l.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":Le=q_;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":Le=VT;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":Le=ib;break;case hv:case pv:case mv:Le=XT;break;case gv:Le=rb;break;case"scroll":case"scrollend":Le=HT;break;case"wheel":Le=ob;break;case"copy":case"cut":case"paste":Le=YT;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":Le=$_;break;case"toggle":case"beforetoggle":Le=cb}var Et=(a&4)!==0,cn=!Et&&(i==="scroll"||i==="scrollend"),xe=Et?Re!==null?Re+"Capture":null:Re;Et=[];for(var de=Me,ye;de!==null;){var Ye=de;if(ye=Ye.stateNode,Ye=Ye.tag,Ye!==5&&Ye!==26&&Ye!==27||ye===null||xe===null||(Ye=pc(de,xe),Ye!=null&&Et.push(Kc(de,Ye,ye))),cn)break;de=de.return}0<Et.length&&(Re=new Le(Re,Ct,null,l,We),Qe.push({event:Re,listeners:Et}))}}if((a&7)===0){e:{if(Re=i==="mouseover"||i==="pointerover",Le=i==="mouseout"||i==="pointerout",Re&&l!==Uh&&(Ct=l.relatedTarget||l.fromElement)&&(Ss(Ct)||Ct[ni]))break e;if((Le||Re)&&(Re=We.window===We?We:(Re=We.ownerDocument)?Re.defaultView||Re.parentWindow:window,Le?(Ct=l.relatedTarget||l.toElement,Le=Me,Ct=Ct?Ss(Ct):null,Ct!==null&&(cn=o(Ct),Et=Ct.tag,Ct!==cn||Et!==5&&Et!==27&&Et!==6)&&(Ct=null)):(Le=null,Ct=Me),Le!==Ct)){if(Et=q_,Ye="onMouseLeave",xe="onMouseEnter",de="mouse",(i==="pointerout"||i==="pointerover")&&(Et=$_,Ye="onPointerLeave",xe="onPointerEnter",de="pointer"),cn=Le==null?Re:nr(Le),ye=Ct==null?Re:nr(Ct),Re=new Et(Ye,de+"leave",Le,l,We),Re.target=cn,Re.relatedTarget=ye,Ye=null,Ss(We)===Me&&(Et=new Et(xe,de+"enter",Ct,l,We),Et.target=ye,Et.relatedTarget=cn,Ye=Et),cn=Ye,Le&&Ct)t:{for(Et=Le,xe=Ct,de=0,ye=Et;ye;ye=sl(ye))de++;for(ye=0,Ye=xe;Ye;Ye=sl(Ye))ye++;for(;0<de-ye;)Et=sl(Et),de--;for(;0<ye-de;)xe=sl(xe),ye--;for(;de--;){if(Et===xe||xe!==null&&Et===xe.alternate)break t;Et=sl(Et),xe=sl(xe)}Et=null}else Et=null;Le!==null&&Nx(Qe,Re,Le,Et,!1),Ct!==null&&cn!==null&&Nx(Qe,cn,Ct,Et,!0)}}e:{if(Re=Me?nr(Me):window,Le=Re.nodeName&&Re.nodeName.toLowerCase(),Le==="select"||Le==="input"&&Re.type==="file")var gt=nv;else if(ev(Re))if(iv)gt=Sb;else{gt=_b;var Gt=gb}else Le=Re.nodeName,!Le||Le.toLowerCase()!=="input"||Re.type!=="checkbox"&&Re.type!=="radio"?Me&&Ph(Me.elementType)&&(gt=nv):gt=vb;if(gt&&(gt=gt(i,Me))){tv(Qe,gt,l,We);break e}Gt&&Gt(i,Re,Me),i==="focusout"&&Me&&Re.type==="number"&&Me.memoizedProps.value!=null&&Hn(Re,"number",Re.value)}switch(Gt=Me?nr(Me):window,i){case"focusin":(ev(Gt)||Gt.contentEditable==="true")&&(Io=Gt,qh=Me,yc=null);break;case"focusout":yc=qh=Io=null;break;case"mousedown":Yh=!0;break;case"contextmenu":case"mouseup":case"dragend":Yh=!1,fv(Qe,l,We);break;case"selectionchange":if(Ab)break;case"keydown":case"keyup":fv(Qe,l,We)}var yt;if(Vh)e:{switch(i){case"compositionstart":var bt="onCompositionStart";break e;case"compositionend":bt="onCompositionEnd";break e;case"compositionupdate":bt="onCompositionUpdate";break e}bt=void 0}else Uo?Z_(i,l)&&(bt="onCompositionEnd"):i==="keydown"&&l.keyCode===229&&(bt="onCompositionStart");bt&&(Q_&&l.locale!=="ko"&&(Uo||bt!=="onCompositionStart"?bt==="onCompositionEnd"&&Uo&&(yt=W_()):(Wr=We,Nh="value"in Wr?Wr.value:Wr.textContent,Uo=!0)),Gt=Bf(Me,bt),0<Gt.length&&(bt=new Y_(bt,i,null,l,We),Qe.push({event:bt,listeners:Gt}),yt?bt.data=yt:(yt=J_(l),yt!==null&&(bt.data=yt)))),(yt=fb?db(i,l):hb(i,l))&&(bt=Bf(Me,"onBeforeInput"),0<bt.length&&(Gt=new Y_("onBeforeInput","beforeinput",null,l,We),Qe.push({event:Gt,listeners:bt}),Gt.data=yt)),iC(Qe,i,Me,l,We)}Bx(Qe,a)})}function Kc(i,a,l){return{instance:i,listener:a,currentTarget:l}}function Bf(i,a){for(var l=a+"Capture",h=[];i!==null;){var x=i,M=x.stateNode;if(x=x.tag,x!==5&&x!==26&&x!==27||M===null||(x=pc(i,l),x!=null&&h.unshift(Kc(i,x,M)),x=pc(i,a),x!=null&&h.push(Kc(i,x,M))),i.tag===3)return h;i=i.return}return[]}function sl(i){if(i===null)return null;do i=i.return;while(i&&i.tag!==5&&i.tag!==27);return i||null}function Nx(i,a,l,h,x){for(var M=a._reactName,P=[];l!==null&&l!==h;){var V=l,re=V.alternate,Me=V.stateNode;if(V=V.tag,re!==null&&re===h)break;V!==5&&V!==26&&V!==27||Me===null||(re=Me,x?(Me=pc(l,M),Me!=null&&P.unshift(Kc(l,Me,re))):x||(Me=pc(l,M),Me!=null&&P.push(Kc(l,Me,re)))),l=l.return}P.length!==0&&i.push({event:a,listeners:P})}var oC=/\r\n?/g,lC=/\u0000|\uFFFD/g;function Ox(i){return(typeof i=="string"?i:""+i).replace(oC,`
`).replace(lC,"")}function zx(i,a){return a=Ox(a),Ox(i)===a}function Ff(){}function ln(i,a,l,h,x,M){switch(l){case"children":typeof h=="string"?a==="body"||a==="textarea"&&h===""||Fs(i,h):(typeof h=="number"||typeof h=="bigint")&&a!=="body"&&Fs(i,""+h);break;case"className":qe(i,"class",h);break;case"tabIndex":qe(i,"tabindex",h);break;case"dir":case"role":case"viewBox":case"width":case"height":qe(i,l,h);break;case"style":G_(i,h,M);break;case"data":if(a!=="object"){qe(i,"data",h);break}case"src":case"href":if(h===""&&(a!=="a"||l!=="href")){i.removeAttribute(l);break}if(h==null||typeof h=="function"||typeof h=="symbol"||typeof h=="boolean"){i.removeAttribute(l);break}h=ku(""+h),i.setAttribute(l,h);break;case"action":case"formAction":if(typeof h=="function"){i.setAttribute(l,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof M=="function"&&(l==="formAction"?(a!=="input"&&ln(i,a,"name",x.name,x,null),ln(i,a,"formEncType",x.formEncType,x,null),ln(i,a,"formMethod",x.formMethod,x,null),ln(i,a,"formTarget",x.formTarget,x,null)):(ln(i,a,"encType",x.encType,x,null),ln(i,a,"method",x.method,x,null),ln(i,a,"target",x.target,x,null)));if(h==null||typeof h=="symbol"||typeof h=="boolean"){i.removeAttribute(l);break}h=ku(""+h),i.setAttribute(l,h);break;case"onClick":h!=null&&(i.onclick=Ff);break;case"onScroll":h!=null&&kt("scroll",i);break;case"onScrollEnd":h!=null&&kt("scrollend",i);break;case"dangerouslySetInnerHTML":if(h!=null){if(typeof h!="object"||!("__html"in h))throw Error(n(61));if(l=h.__html,l!=null){if(x.children!=null)throw Error(n(60));i.innerHTML=l}}break;case"multiple":i.multiple=h&&typeof h!="function"&&typeof h!="symbol";break;case"muted":i.muted=h&&typeof h!="function"&&typeof h!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(h==null||typeof h=="function"||typeof h=="boolean"||typeof h=="symbol"){i.removeAttribute("xlink:href");break}l=ku(""+h),i.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",l);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":h!=null&&typeof h!="function"&&typeof h!="symbol"?i.setAttribute(l,""+h):i.removeAttribute(l);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":h&&typeof h!="function"&&typeof h!="symbol"?i.setAttribute(l,""):i.removeAttribute(l);break;case"capture":case"download":h===!0?i.setAttribute(l,""):h!==!1&&h!=null&&typeof h!="function"&&typeof h!="symbol"?i.setAttribute(l,h):i.removeAttribute(l);break;case"cols":case"rows":case"size":case"span":h!=null&&typeof h!="function"&&typeof h!="symbol"&&!isNaN(h)&&1<=h?i.setAttribute(l,h):i.removeAttribute(l);break;case"rowSpan":case"start":h==null||typeof h=="function"||typeof h=="symbol"||isNaN(h)?i.removeAttribute(l):i.setAttribute(l,h);break;case"popover":kt("beforetoggle",i),kt("toggle",i),Fe(i,"popover",h);break;case"xlinkActuate":et(i,"http://www.w3.org/1999/xlink","xlink:actuate",h);break;case"xlinkArcrole":et(i,"http://www.w3.org/1999/xlink","xlink:arcrole",h);break;case"xlinkRole":et(i,"http://www.w3.org/1999/xlink","xlink:role",h);break;case"xlinkShow":et(i,"http://www.w3.org/1999/xlink","xlink:show",h);break;case"xlinkTitle":et(i,"http://www.w3.org/1999/xlink","xlink:title",h);break;case"xlinkType":et(i,"http://www.w3.org/1999/xlink","xlink:type",h);break;case"xmlBase":et(i,"http://www.w3.org/XML/1998/namespace","xml:base",h);break;case"xmlLang":et(i,"http://www.w3.org/XML/1998/namespace","xml:lang",h);break;case"xmlSpace":et(i,"http://www.w3.org/XML/1998/namespace","xml:space",h);break;case"is":Fe(i,"is",h);break;case"innerText":case"textContent":break;default:(!(2<l.length)||l[0]!=="o"&&l[0]!=="O"||l[1]!=="n"&&l[1]!=="N")&&(l=OT.get(l)||l,Fe(i,l,h))}}function gm(i,a,l,h,x,M){switch(l){case"style":G_(i,h,M);break;case"dangerouslySetInnerHTML":if(h!=null){if(typeof h!="object"||!("__html"in h))throw Error(n(61));if(l=h.__html,l!=null){if(x.children!=null)throw Error(n(60));i.innerHTML=l}}break;case"children":typeof h=="string"?Fs(i,h):(typeof h=="number"||typeof h=="bigint")&&Fs(i,""+h);break;case"onScroll":h!=null&&kt("scroll",i);break;case"onScrollEnd":h!=null&&kt("scrollend",i);break;case"onClick":h!=null&&(i.onclick=Ff);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!Ie.hasOwnProperty(l))e:{if(l[0]==="o"&&l[1]==="n"&&(x=l.endsWith("Capture"),a=l.slice(2,x?l.length-7:void 0),M=i[an]||null,M=M!=null?M[l]:null,typeof M=="function"&&i.removeEventListener(a,M,x),typeof h=="function")){typeof M!="function"&&M!==null&&(l in i?i[l]=null:i.hasAttribute(l)&&i.removeAttribute(l)),i.addEventListener(a,h,x);break e}l in i?i[l]=h:h===!0?i.setAttribute(l,""):Fe(i,l,h)}}}function ai(i,a,l){switch(a){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":kt("error",i),kt("load",i);var h=!1,x=!1,M;for(M in l)if(l.hasOwnProperty(M)){var P=l[M];if(P!=null)switch(M){case"src":h=!0;break;case"srcSet":x=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(n(137,a));default:ln(i,a,M,P,l,null)}}x&&ln(i,a,"srcSet",l.srcSet,l,null),h&&ln(i,a,"src",l.src,l,null);return;case"input":kt("invalid",i);var V=M=P=x=null,re=null,Me=null;for(h in l)if(l.hasOwnProperty(h)){var We=l[h];if(We!=null)switch(h){case"name":x=We;break;case"type":P=We;break;case"checked":re=We;break;case"defaultChecked":Me=We;break;case"value":M=We;break;case"defaultValue":V=We;break;case"children":case"dangerouslySetInnerHTML":if(We!=null)throw Error(n(137,a));break;default:ln(i,a,h,We,l,null)}}tn(i,M,V,re,Me,P,x,!1),gn(i);return;case"select":kt("invalid",i),h=P=M=null;for(x in l)if(l.hasOwnProperty(x)&&(V=l[x],V!=null))switch(x){case"value":M=V;break;case"defaultValue":P=V;break;case"multiple":h=V;default:ln(i,a,x,V,l,null)}a=M,l=P,i.multiple=!!h,a!=null?Gn(i,!!h,a,!1):l!=null&&Gn(i,!!h,l,!0);return;case"textarea":kt("invalid",i),M=x=h=null;for(P in l)if(l.hasOwnProperty(P)&&(V=l[P],V!=null))switch(P){case"value":h=V;break;case"defaultValue":x=V;break;case"children":M=V;break;case"dangerouslySetInnerHTML":if(V!=null)throw Error(n(91));break;default:ln(i,a,P,V,l,null)}ii(i,h,x,M),gn(i);return;case"option":for(re in l)if(l.hasOwnProperty(re)&&(h=l[re],h!=null))switch(re){case"selected":i.selected=h&&typeof h!="function"&&typeof h!="symbol";break;default:ln(i,a,re,h,l,null)}return;case"dialog":kt("beforetoggle",i),kt("toggle",i),kt("cancel",i),kt("close",i);break;case"iframe":case"object":kt("load",i);break;case"video":case"audio":for(h=0;h<Qc.length;h++)kt(Qc[h],i);break;case"image":kt("error",i),kt("load",i);break;case"details":kt("toggle",i);break;case"embed":case"source":case"link":kt("error",i),kt("load",i);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(Me in l)if(l.hasOwnProperty(Me)&&(h=l[Me],h!=null))switch(Me){case"children":case"dangerouslySetInnerHTML":throw Error(n(137,a));default:ln(i,a,Me,h,l,null)}return;default:if(Ph(a)){for(We in l)l.hasOwnProperty(We)&&(h=l[We],h!==void 0&&gm(i,a,We,h,l,void 0));return}}for(V in l)l.hasOwnProperty(V)&&(h=l[V],h!=null&&ln(i,a,V,h,l,null))}function cC(i,a,l,h){switch(a){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var x=null,M=null,P=null,V=null,re=null,Me=null,We=null;for(Le in l){var Qe=l[Le];if(l.hasOwnProperty(Le)&&Qe!=null)switch(Le){case"checked":break;case"value":break;case"defaultValue":re=Qe;default:h.hasOwnProperty(Le)||ln(i,a,Le,null,h,Qe)}}for(var Re in h){var Le=h[Re];if(Qe=l[Re],h.hasOwnProperty(Re)&&(Le!=null||Qe!=null))switch(Re){case"type":M=Le;break;case"name":x=Le;break;case"checked":Me=Le;break;case"defaultChecked":We=Le;break;case"value":P=Le;break;case"defaultValue":V=Le;break;case"children":case"dangerouslySetInnerHTML":if(Le!=null)throw Error(n(137,a));break;default:Le!==Qe&&ln(i,a,Re,Le,h,Qe)}}Fi(i,P,V,re,Me,We,M,x);return;case"select":Le=P=V=Re=null;for(M in l)if(re=l[M],l.hasOwnProperty(M)&&re!=null)switch(M){case"value":break;case"multiple":Le=re;default:h.hasOwnProperty(M)||ln(i,a,M,null,h,re)}for(x in h)if(M=h[x],re=l[x],h.hasOwnProperty(x)&&(M!=null||re!=null))switch(x){case"value":Re=M;break;case"defaultValue":V=M;break;case"multiple":P=M;default:M!==re&&ln(i,a,x,M,h,re)}a=V,l=P,h=Le,Re!=null?Gn(i,!!l,Re,!1):!!h!=!!l&&(a!=null?Gn(i,!!l,a,!0):Gn(i,!!l,l?[]:"",!1));return;case"textarea":Le=Re=null;for(V in l)if(x=l[V],l.hasOwnProperty(V)&&x!=null&&!h.hasOwnProperty(V))switch(V){case"value":break;case"children":break;default:ln(i,a,V,null,h,x)}for(P in h)if(x=h[P],M=l[P],h.hasOwnProperty(P)&&(x!=null||M!=null))switch(P){case"value":Re=x;break;case"defaultValue":Le=x;break;case"children":break;case"dangerouslySetInnerHTML":if(x!=null)throw Error(n(91));break;default:x!==M&&ln(i,a,P,x,h,M)}Qn(i,Re,Le);return;case"option":for(var Ct in l)if(Re=l[Ct],l.hasOwnProperty(Ct)&&Re!=null&&!h.hasOwnProperty(Ct))switch(Ct){case"selected":i.selected=!1;break;default:ln(i,a,Ct,null,h,Re)}for(re in h)if(Re=h[re],Le=l[re],h.hasOwnProperty(re)&&Re!==Le&&(Re!=null||Le!=null))switch(re){case"selected":i.selected=Re&&typeof Re!="function"&&typeof Re!="symbol";break;default:ln(i,a,re,Re,h,Le)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var Et in l)Re=l[Et],l.hasOwnProperty(Et)&&Re!=null&&!h.hasOwnProperty(Et)&&ln(i,a,Et,null,h,Re);for(Me in h)if(Re=h[Me],Le=l[Me],h.hasOwnProperty(Me)&&Re!==Le&&(Re!=null||Le!=null))switch(Me){case"children":case"dangerouslySetInnerHTML":if(Re!=null)throw Error(n(137,a));break;default:ln(i,a,Me,Re,h,Le)}return;default:if(Ph(a)){for(var cn in l)Re=l[cn],l.hasOwnProperty(cn)&&Re!==void 0&&!h.hasOwnProperty(cn)&&gm(i,a,cn,void 0,h,Re);for(We in h)Re=h[We],Le=l[We],!h.hasOwnProperty(We)||Re===Le||Re===void 0&&Le===void 0||gm(i,a,We,Re,h,Le);return}}for(var xe in l)Re=l[xe],l.hasOwnProperty(xe)&&Re!=null&&!h.hasOwnProperty(xe)&&ln(i,a,xe,null,h,Re);for(Qe in h)Re=h[Qe],Le=l[Qe],!h.hasOwnProperty(Qe)||Re===Le||Re==null&&Le==null||ln(i,a,Qe,Re,h,Le)}var _m=null,vm=null;function Nf(i){return i.nodeType===9?i:i.ownerDocument}function Hx(i){switch(i){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Gx(i,a){if(i===0)switch(a){case"svg":return 1;case"math":return 2;default:return 0}return i===1&&a==="foreignObject"?0:i}function Sm(i,a){return i==="textarea"||i==="noscript"||typeof a.children=="string"||typeof a.children=="number"||typeof a.children=="bigint"||typeof a.dangerouslySetInnerHTML=="object"&&a.dangerouslySetInnerHTML!==null&&a.dangerouslySetInnerHTML.__html!=null}var xm=null;function uC(){var i=window.event;return i&&i.type==="popstate"?i===xm?!1:(xm=i,!0):(xm=null,!1)}var Vx=typeof setTimeout=="function"?setTimeout:void 0,fC=typeof clearTimeout=="function"?clearTimeout:void 0,kx=typeof Promise=="function"?Promise:void 0,dC=typeof queueMicrotask=="function"?queueMicrotask:typeof kx<"u"?function(i){return kx.resolve(null).then(i).catch(hC)}:Vx;function hC(i){setTimeout(function(){throw i})}function aa(i){return i==="head"}function Wx(i,a){var l=a,h=0,x=0;do{var M=l.nextSibling;if(i.removeChild(l),M&&M.nodeType===8)if(l=M.data,l==="/$"){if(0<h&&8>h){l=h;var P=i.ownerDocument;if(l&1&&jc(P.documentElement),l&2&&jc(P.body),l&4)for(l=P.head,jc(l),P=l.firstChild;P;){var V=P.nextSibling,re=P.nodeName;P[_s]||re==="SCRIPT"||re==="STYLE"||re==="LINK"&&P.rel.toLowerCase()==="stylesheet"||l.removeChild(P),P=V}}if(x===0){i.removeChild(M),ru(a);return}x--}else l==="$"||l==="$?"||l==="$!"?x++:h=l.charCodeAt(0)-48;else h=0;l=M}while(l);ru(a)}function Am(i){var a=i.firstChild;for(a&&a.nodeType===10&&(a=a.nextSibling);a;){var l=a;switch(a=a.nextSibling,l.nodeName){case"HTML":case"HEAD":case"BODY":Am(l),vs(l);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(l.rel.toLowerCase()==="stylesheet")continue}i.removeChild(l)}}function pC(i,a,l,h){for(;i.nodeType===1;){var x=l;if(i.nodeName.toLowerCase()!==a.toLowerCase()){if(!h&&(i.nodeName!=="INPUT"||i.type!=="hidden"))break}else if(h){if(!i[_s])switch(a){case"meta":if(!i.hasAttribute("itemprop"))break;return i;case"link":if(M=i.getAttribute("rel"),M==="stylesheet"&&i.hasAttribute("data-precedence"))break;if(M!==x.rel||i.getAttribute("href")!==(x.href==null||x.href===""?null:x.href)||i.getAttribute("crossorigin")!==(x.crossOrigin==null?null:x.crossOrigin)||i.getAttribute("title")!==(x.title==null?null:x.title))break;return i;case"style":if(i.hasAttribute("data-precedence"))break;return i;case"script":if(M=i.getAttribute("src"),(M!==(x.src==null?null:x.src)||i.getAttribute("type")!==(x.type==null?null:x.type)||i.getAttribute("crossorigin")!==(x.crossOrigin==null?null:x.crossOrigin))&&M&&i.hasAttribute("async")&&!i.hasAttribute("itemprop"))break;return i;default:return i}}else if(a==="input"&&i.type==="hidden"){var M=x.name==null?null:""+x.name;if(x.type==="hidden"&&i.getAttribute("name")===M)return i}else return i;if(i=Ms(i.nextSibling),i===null)break}return null}function mC(i,a,l){if(a==="")return null;for(;i.nodeType!==3;)if((i.nodeType!==1||i.nodeName!=="INPUT"||i.type!=="hidden")&&!l||(i=Ms(i.nextSibling),i===null))return null;return i}function ym(i){return i.data==="$!"||i.data==="$?"&&i.ownerDocument.readyState==="complete"}function gC(i,a){var l=i.ownerDocument;if(i.data!=="$?"||l.readyState==="complete")a();else{var h=function(){a(),l.removeEventListener("DOMContentLoaded",h)};l.addEventListener("DOMContentLoaded",h),i._reactRetry=h}}function Ms(i){for(;i!=null;i=i.nextSibling){var a=i.nodeType;if(a===1||a===3)break;if(a===8){if(a=i.data,a==="$"||a==="$!"||a==="$?"||a==="F!"||a==="F")break;if(a==="/$")return null}}return i}var Mm=null;function Xx(i){i=i.previousSibling;for(var a=0;i;){if(i.nodeType===8){var l=i.data;if(l==="$"||l==="$!"||l==="$?"){if(a===0)return i;a--}else l==="/$"&&a++}i=i.previousSibling}return null}function qx(i,a,l){switch(a=Nf(l),i){case"html":if(i=a.documentElement,!i)throw Error(n(452));return i;case"head":if(i=a.head,!i)throw Error(n(453));return i;case"body":if(i=a.body,!i)throw Error(n(454));return i;default:throw Error(n(451))}}function jc(i){for(var a=i.attributes;a.length;)i.removeAttributeNode(a[0]);vs(i)}var os=new Map,Yx=new Set;function Of(i){return typeof i.getRootNode=="function"?i.getRootNode():i.nodeType===9?i:i.ownerDocument}var _r=Y.d;Y.d={f:_C,r:vC,D:SC,C:xC,L:AC,m:yC,X:EC,S:MC,M:TC};function _C(){var i=_r.f(),a=wf();return i||a}function vC(i){var a=xs(i);a!==null&&a.tag===5&&a.type==="form"?hS(a):_r.r(i)}var rl=typeof document>"u"?null:document;function $x(i,a,l){var h=rl;if(h&&typeof a=="string"&&a){var x=Ot(a);x='link[rel="'+i+'"][href="'+x+'"]',typeof l=="string"&&(x+='[crossorigin="'+l+'"]'),Yx.has(x)||(Yx.add(x),i={rel:i,crossOrigin:l,href:a},h.querySelector(x)===null&&(a=h.createElement("link"),ai(a,"link",i),Se(a),h.head.appendChild(a)))}}function SC(i){_r.D(i),$x("dns-prefetch",i,null)}function xC(i,a){_r.C(i,a),$x("preconnect",i,a)}function AC(i,a,l){_r.L(i,a,l);var h=rl;if(h&&i&&a){var x='link[rel="preload"][as="'+Ot(a)+'"]';a==="image"&&l&&l.imageSrcSet?(x+='[imagesrcset="'+Ot(l.imageSrcSet)+'"]',typeof l.imageSizes=="string"&&(x+='[imagesizes="'+Ot(l.imageSizes)+'"]')):x+='[href="'+Ot(i)+'"]';var M=x;switch(a){case"style":M=al(i);break;case"script":M=ol(i)}os.has(M)||(i=p({rel:"preload",href:a==="image"&&l&&l.imageSrcSet?void 0:i,as:a},l),os.set(M,i),h.querySelector(x)!==null||a==="style"&&h.querySelector(Zc(M))||a==="script"&&h.querySelector(Jc(M))||(a=h.createElement("link"),ai(a,"link",i),Se(a),h.head.appendChild(a)))}}function yC(i,a){_r.m(i,a);var l=rl;if(l&&i){var h=a&&typeof a.as=="string"?a.as:"script",x='link[rel="modulepreload"][as="'+Ot(h)+'"][href="'+Ot(i)+'"]',M=x;switch(h){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":M=ol(i)}if(!os.has(M)&&(i=p({rel:"modulepreload",href:i},a),os.set(M,i),l.querySelector(x)===null)){switch(h){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(l.querySelector(Jc(M)))return}h=l.createElement("link"),ai(h,"link",i),Se(h),l.head.appendChild(h)}}}function MC(i,a,l){_r.S(i,a,l);var h=rl;if(h&&i){var x=K(h).hoistableStyles,M=al(i);a=a||"default";var P=x.get(M);if(!P){var V={loading:0,preload:null};if(P=h.querySelector(Zc(M)))V.loading=5;else{i=p({rel:"stylesheet",href:i,"data-precedence":a},l),(l=os.get(M))&&Em(i,l);var re=P=h.createElement("link");Se(re),ai(re,"link",i),re._p=new Promise(function(Me,We){re.onload=Me,re.onerror=We}),re.addEventListener("load",function(){V.loading|=1}),re.addEventListener("error",function(){V.loading|=2}),V.loading|=4,zf(P,a,h)}P={type:"stylesheet",instance:P,count:1,state:V},x.set(M,P)}}}function EC(i,a){_r.X(i,a);var l=rl;if(l&&i){var h=K(l).hoistableScripts,x=ol(i),M=h.get(x);M||(M=l.querySelector(Jc(x)),M||(i=p({src:i,async:!0},a),(a=os.get(x))&&Tm(i,a),M=l.createElement("script"),Se(M),ai(M,"link",i),l.head.appendChild(M)),M={type:"script",instance:M,count:1,state:null},h.set(x,M))}}function TC(i,a){_r.M(i,a);var l=rl;if(l&&i){var h=K(l).hoistableScripts,x=ol(i),M=h.get(x);M||(M=l.querySelector(Jc(x)),M||(i=p({src:i,async:!0,type:"module"},a),(a=os.get(x))&&Tm(i,a),M=l.createElement("script"),Se(M),ai(M,"link",i),l.head.appendChild(M)),M={type:"script",instance:M,count:1,state:null},h.set(x,M))}}function Qx(i,a,l,h){var x=(x=ge.current)?Of(x):null;if(!x)throw Error(n(446));switch(i){case"meta":case"title":return null;case"style":return typeof l.precedence=="string"&&typeof l.href=="string"?(a=al(l.href),l=K(x).hoistableStyles,h=l.get(a),h||(h={type:"style",instance:null,count:0,state:null},l.set(a,h)),h):{type:"void",instance:null,count:0,state:null};case"link":if(l.rel==="stylesheet"&&typeof l.href=="string"&&typeof l.precedence=="string"){i=al(l.href);var M=K(x).hoistableStyles,P=M.get(i);if(P||(x=x.ownerDocument||x,P={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},M.set(i,P),(M=x.querySelector(Zc(i)))&&!M._p&&(P.instance=M,P.state.loading=5),os.has(i)||(l={rel:"preload",as:"style",href:l.href,crossOrigin:l.crossOrigin,integrity:l.integrity,media:l.media,hrefLang:l.hrefLang,referrerPolicy:l.referrerPolicy},os.set(i,l),M||bC(x,i,l,P.state))),a&&h===null)throw Error(n(528,""));return P}if(a&&h!==null)throw Error(n(529,""));return null;case"script":return a=l.async,l=l.src,typeof l=="string"&&a&&typeof a!="function"&&typeof a!="symbol"?(a=ol(l),l=K(x).hoistableScripts,h=l.get(a),h||(h={type:"script",instance:null,count:0,state:null},l.set(a,h)),h):{type:"void",instance:null,count:0,state:null};default:throw Error(n(444,i))}}function al(i){return'href="'+Ot(i)+'"'}function Zc(i){return'link[rel="stylesheet"]['+i+"]"}function Kx(i){return p({},i,{"data-precedence":i.precedence,precedence:null})}function bC(i,a,l,h){i.querySelector('link[rel="preload"][as="style"]['+a+"]")?h.loading=1:(a=i.createElement("link"),h.preload=a,a.addEventListener("load",function(){return h.loading|=1}),a.addEventListener("error",function(){return h.loading|=2}),ai(a,"link",l),Se(a),i.head.appendChild(a))}function ol(i){return'[src="'+Ot(i)+'"]'}function Jc(i){return"script[async]"+i}function jx(i,a,l){if(a.count++,a.instance===null)switch(a.type){case"style":var h=i.querySelector('style[data-href~="'+Ot(l.href)+'"]');if(h)return a.instance=h,Se(h),h;var x=p({},l,{"data-href":l.href,"data-precedence":l.precedence,href:null,precedence:null});return h=(i.ownerDocument||i).createElement("style"),Se(h),ai(h,"style",x),zf(h,l.precedence,i),a.instance=h;case"stylesheet":x=al(l.href);var M=i.querySelector(Zc(x));if(M)return a.state.loading|=4,a.instance=M,Se(M),M;h=Kx(l),(x=os.get(x))&&Em(h,x),M=(i.ownerDocument||i).createElement("link"),Se(M);var P=M;return P._p=new Promise(function(V,re){P.onload=V,P.onerror=re}),ai(M,"link",h),a.state.loading|=4,zf(M,l.precedence,i),a.instance=M;case"script":return M=ol(l.src),(x=i.querySelector(Jc(M)))?(a.instance=x,Se(x),x):(h=l,(x=os.get(M))&&(h=p({},l),Tm(h,x)),i=i.ownerDocument||i,x=i.createElement("script"),Se(x),ai(x,"link",h),i.head.appendChild(x),a.instance=x);case"void":return null;default:throw Error(n(443,a.type))}else a.type==="stylesheet"&&(a.state.loading&4)===0&&(h=a.instance,a.state.loading|=4,zf(h,l.precedence,i));return a.instance}function zf(i,a,l){for(var h=l.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),x=h.length?h[h.length-1]:null,M=x,P=0;P<h.length;P++){var V=h[P];if(V.dataset.precedence===a)M=V;else if(M!==x)break}M?M.parentNode.insertBefore(i,M.nextSibling):(a=l.nodeType===9?l.head:l,a.insertBefore(i,a.firstChild))}function Em(i,a){i.crossOrigin==null&&(i.crossOrigin=a.crossOrigin),i.referrerPolicy==null&&(i.referrerPolicy=a.referrerPolicy),i.title==null&&(i.title=a.title)}function Tm(i,a){i.crossOrigin==null&&(i.crossOrigin=a.crossOrigin),i.referrerPolicy==null&&(i.referrerPolicy=a.referrerPolicy),i.integrity==null&&(i.integrity=a.integrity)}var Hf=null;function Zx(i,a,l){if(Hf===null){var h=new Map,x=Hf=new Map;x.set(l,h)}else x=Hf,h=x.get(l),h||(h=new Map,x.set(l,h));if(h.has(i))return h;for(h.set(i,null),l=l.getElementsByTagName(i),x=0;x<l.length;x++){var M=l[x];if(!(M[_s]||M[qt]||i==="link"&&M.getAttribute("rel")==="stylesheet")&&M.namespaceURI!=="http://www.w3.org/2000/svg"){var P=M.getAttribute(a)||"";P=i+P;var V=h.get(P);V?V.push(M):h.set(P,[M])}}return h}function Jx(i,a,l){i=i.ownerDocument||i,i.head.insertBefore(l,a==="title"?i.querySelector("head > title"):null)}function CC(i,a,l){if(l===1||a.itemProp!=null)return!1;switch(i){case"meta":case"title":return!0;case"style":if(typeof a.precedence!="string"||typeof a.href!="string"||a.href==="")break;return!0;case"link":if(typeof a.rel!="string"||typeof a.href!="string"||a.href===""||a.onLoad||a.onError)break;switch(a.rel){case"stylesheet":return i=a.disabled,typeof a.precedence=="string"&&i==null;default:return!0}case"script":if(a.async&&typeof a.async!="function"&&typeof a.async!="symbol"&&!a.onLoad&&!a.onError&&a.src&&typeof a.src=="string")return!0}return!1}function eA(i){return!(i.type==="stylesheet"&&(i.state.loading&3)===0)}var eu=null;function RC(){}function wC(i,a,l){if(eu===null)throw Error(n(475));var h=eu;if(a.type==="stylesheet"&&(typeof l.media!="string"||matchMedia(l.media).matches!==!1)&&(a.state.loading&4)===0){if(a.instance===null){var x=al(l.href),M=i.querySelector(Zc(x));if(M){i=M._p,i!==null&&typeof i=="object"&&typeof i.then=="function"&&(h.count++,h=Gf.bind(h),i.then(h,h)),a.state.loading|=4,a.instance=M,Se(M);return}M=i.ownerDocument||i,l=Kx(l),(x=os.get(x))&&Em(l,x),M=M.createElement("link"),Se(M);var P=M;P._p=new Promise(function(V,re){P.onload=V,P.onerror=re}),ai(M,"link",l),a.instance=M}h.stylesheets===null&&(h.stylesheets=new Map),h.stylesheets.set(a,i),(i=a.state.preload)&&(a.state.loading&3)===0&&(h.count++,a=Gf.bind(h),i.addEventListener("load",a),i.addEventListener("error",a))}}function DC(){if(eu===null)throw Error(n(475));var i=eu;return i.stylesheets&&i.count===0&&bm(i,i.stylesheets),0<i.count?function(a){var l=setTimeout(function(){if(i.stylesheets&&bm(i,i.stylesheets),i.unsuspend){var h=i.unsuspend;i.unsuspend=null,h()}},6e4);return i.unsuspend=a,function(){i.unsuspend=null,clearTimeout(l)}}:null}function Gf(){if(this.count--,this.count===0){if(this.stylesheets)bm(this,this.stylesheets);else if(this.unsuspend){var i=this.unsuspend;this.unsuspend=null,i()}}}var Vf=null;function bm(i,a){i.stylesheets=null,i.unsuspend!==null&&(i.count++,Vf=new Map,a.forEach(LC,i),Vf=null,Gf.call(i))}function LC(i,a){if(!(a.state.loading&4)){var l=Vf.get(i);if(l)var h=l.get(null);else{l=new Map,Vf.set(i,l);for(var x=i.querySelectorAll("link[data-precedence],style[data-precedence]"),M=0;M<x.length;M++){var P=x[M];(P.nodeName==="LINK"||P.getAttribute("media")!=="not all")&&(l.set(P.dataset.precedence,P),h=P)}h&&l.set(null,h)}x=a.instance,P=x.getAttribute("data-precedence"),M=l.get(P)||h,M===h&&l.set(null,x),l.set(P,x),this.count++,h=Gf.bind(this),x.addEventListener("load",h),x.addEventListener("error",h),M?M.parentNode.insertBefore(x,M.nextSibling):(i=i.nodeType===9?i.head:i,i.insertBefore(x,i.firstChild)),a.state.loading|=4}}var tu={$$typeof:E,Provider:null,Consumer:null,_currentValue:q,_currentValue2:q,_threadCount:0};function PC(i,a,l,h,x,M,P,V){this.tag=1,this.containerInfo=i,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=W(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=W(0),this.hiddenUpdates=W(null),this.identifierPrefix=h,this.onUncaughtError=x,this.onCaughtError=M,this.onRecoverableError=P,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=V,this.incompleteTransitions=new Map}function tA(i,a,l,h,x,M,P,V,re,Me,We,Qe){return i=new PC(i,a,l,P,V,re,Me,Qe),a=1,M===!0&&(a|=24),M=Oi(3,null,null,a),i.current=M,M.stateNode=i,a=op(),a.refCount++,i.pooledCache=a,a.refCount++,M.memoizedState={element:h,isDehydrated:l,cache:a},fp(M),i}function nA(i){return i?(i=Oo,i):Oo}function iA(i,a,l,h,x,M){x=nA(x),h.context===null?h.context=x:h.pendingContext=x,h=Yr(a),h.payload={element:l},M=M===void 0?null:M,M!==null&&(h.callback=M),l=$r(i,h,a),l!==null&&(ki(l,i,a),Lc(l,i,a))}function sA(i,a){if(i=i.memoizedState,i!==null&&i.dehydrated!==null){var l=i.retryLane;i.retryLane=l!==0&&l<a?l:a}}function Cm(i,a){sA(i,a),(i=i.alternate)&&sA(i,a)}function rA(i){if(i.tag===13){var a=No(i,67108864);a!==null&&ki(a,i,67108864),Cm(i,67108864)}}var kf=!0;function UC(i,a,l,h){var x=I.T;I.T=null;var M=Y.p;try{Y.p=2,Rm(i,a,l,h)}finally{Y.p=M,I.T=x}}function IC(i,a,l,h){var x=I.T;I.T=null;var M=Y.p;try{Y.p=8,Rm(i,a,l,h)}finally{Y.p=M,I.T=x}}function Rm(i,a,l,h){if(kf){var x=wm(h);if(x===null)mm(i,a,h,Wf,l),oA(i,h);else if(FC(x,i,a,l,h))h.stopPropagation();else if(oA(i,h),a&4&&-1<BC.indexOf(i)){for(;x!==null;){var M=xs(x);if(M!==null)switch(M.tag){case 3:if(M=M.stateNode,M.current.memoizedState.isDehydrated){var P=be(M.pendingLanes);if(P!==0){var V=M;for(V.pendingLanes|=2,V.entangledLanes|=2;P;){var re=1<<31-je(P);V.entanglements[1]|=re,P&=~re}Gs(M),(nn&6)===0&&(Cf=at()+500,$c(0))}}break;case 13:V=No(M,2),V!==null&&ki(V,M,2),wf(),Cm(M,2)}if(M=wm(h),M===null&&mm(i,a,h,Wf,l),M===x)break;x=M}x!==null&&h.stopPropagation()}else mm(i,a,h,null,l)}}function wm(i){return i=Ih(i),Dm(i)}var Wf=null;function Dm(i){if(Wf=null,i=Ss(i),i!==null){var a=o(i);if(a===null)i=null;else{var l=a.tag;if(l===13){if(i=c(a),i!==null)return i;i=null}else if(l===3){if(a.stateNode.current.memoizedState.isDehydrated)return a.tag===3?a.stateNode.containerInfo:null;i=null}else a!==i&&(i=null)}}return Wf=i,null}function aA(i){switch(i){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch($e()){case Q:return 2;case G:return 8;case N:case U:return 32;case se:return 268435456;default:return 32}default:return 32}}var Lm=!1,oa=null,la=null,ca=null,nu=new Map,iu=new Map,ua=[],BC="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function oA(i,a){switch(i){case"focusin":case"focusout":oa=null;break;case"dragenter":case"dragleave":la=null;break;case"mouseover":case"mouseout":ca=null;break;case"pointerover":case"pointerout":nu.delete(a.pointerId);break;case"gotpointercapture":case"lostpointercapture":iu.delete(a.pointerId)}}function su(i,a,l,h,x,M){return i===null||i.nativeEvent!==M?(i={blockedOn:a,domEventName:l,eventSystemFlags:h,nativeEvent:M,targetContainers:[x]},a!==null&&(a=xs(a),a!==null&&rA(a)),i):(i.eventSystemFlags|=h,a=i.targetContainers,x!==null&&a.indexOf(x)===-1&&a.push(x),i)}function FC(i,a,l,h,x){switch(a){case"focusin":return oa=su(oa,i,a,l,h,x),!0;case"dragenter":return la=su(la,i,a,l,h,x),!0;case"mouseover":return ca=su(ca,i,a,l,h,x),!0;case"pointerover":var M=x.pointerId;return nu.set(M,su(nu.get(M)||null,i,a,l,h,x)),!0;case"gotpointercapture":return M=x.pointerId,iu.set(M,su(iu.get(M)||null,i,a,l,h,x)),!0}return!1}function lA(i){var a=Ss(i.target);if(a!==null){var l=o(a);if(l!==null){if(a=l.tag,a===13){if(a=c(l),a!==null){i.blockedOn=a,en(i.priority,function(){if(l.tag===13){var h=Vi();h=At(h);var x=No(l,h);x!==null&&ki(x,l,h),Cm(l,h)}});return}}else if(a===3&&l.stateNode.current.memoizedState.isDehydrated){i.blockedOn=l.tag===3?l.stateNode.containerInfo:null;return}}}i.blockedOn=null}function Xf(i){if(i.blockedOn!==null)return!1;for(var a=i.targetContainers;0<a.length;){var l=wm(i.nativeEvent);if(l===null){l=i.nativeEvent;var h=new l.constructor(l.type,l);Uh=h,l.target.dispatchEvent(h),Uh=null}else return a=xs(l),a!==null&&rA(a),i.blockedOn=l,!1;a.shift()}return!0}function cA(i,a,l){Xf(i)&&l.delete(a)}function NC(){Lm=!1,oa!==null&&Xf(oa)&&(oa=null),la!==null&&Xf(la)&&(la=null),ca!==null&&Xf(ca)&&(ca=null),nu.forEach(cA),iu.forEach(cA)}function qf(i,a){i.blockedOn===a&&(i.blockedOn=null,Lm||(Lm=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,NC)))}var Yf=null;function uA(i){Yf!==i&&(Yf=i,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){Yf===i&&(Yf=null);for(var a=0;a<i.length;a+=3){var l=i[a],h=i[a+1],x=i[a+2];if(typeof h!="function"){if(Dm(h||l)===null)continue;break}var M=xs(l);M!==null&&(i.splice(a,3),a-=3,Dp(M,{pending:!0,data:x,method:l.method,action:h},h,x))}}))}function ru(i){function a(re){return qf(re,i)}oa!==null&&qf(oa,i),la!==null&&qf(la,i),ca!==null&&qf(ca,i),nu.forEach(a),iu.forEach(a);for(var l=0;l<ua.length;l++){var h=ua[l];h.blockedOn===i&&(h.blockedOn=null)}for(;0<ua.length&&(l=ua[0],l.blockedOn===null);)lA(l),l.blockedOn===null&&ua.shift();if(l=(i.ownerDocument||i).$$reactFormReplay,l!=null)for(h=0;h<l.length;h+=3){var x=l[h],M=l[h+1],P=x[an]||null;if(typeof M=="function")P||uA(l);else if(P){var V=null;if(M&&M.hasAttribute("formAction")){if(x=M,P=M[an]||null)V=P.formAction;else if(Dm(x)!==null)continue}else V=P.action;typeof V=="function"?l[h+1]=V:(l.splice(h,3),h-=3),uA(l)}}}function Pm(i){this._internalRoot=i}$f.prototype.render=Pm.prototype.render=function(i){var a=this._internalRoot;if(a===null)throw Error(n(409));var l=a.current,h=Vi();iA(l,h,i,a,null,null)},$f.prototype.unmount=Pm.prototype.unmount=function(){var i=this._internalRoot;if(i!==null){this._internalRoot=null;var a=i.containerInfo;iA(i.current,2,null,i,null,null),wf(),a[ni]=null}};function $f(i){this._internalRoot=i}$f.prototype.unstable_scheduleHydration=function(i){if(i){var a=Mt();i={blockedOn:null,target:i,priority:a};for(var l=0;l<ua.length&&a!==0&&a<ua[l].priority;l++);ua.splice(l,0,i),l===0&&lA(i)}};var fA=e.version;if(fA!=="19.1.0")throw Error(n(527,fA,"19.1.0"));Y.findDOMNode=function(i){var a=i._reactInternals;if(a===void 0)throw typeof i.render=="function"?Error(n(188)):(i=Object.keys(i).join(","),Error(n(268,i)));return i=f(a),i=i!==null?d(i):null,i=i===null?null:i.stateNode,i};var OC={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:I,reconcilerVersion:"19.1.0"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Qf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Qf.isDisabled&&Qf.supportsFiber)try{pe=Qf.inject(OC),Oe=Qf}catch{}}return ou.createRoot=function(i,a){if(!s(i))throw Error(n(299));var l=!1,h="",x=CS,M=RS,P=wS,V=null;return a!=null&&(a.unstable_strictMode===!0&&(l=!0),a.identifierPrefix!==void 0&&(h=a.identifierPrefix),a.onUncaughtError!==void 0&&(x=a.onUncaughtError),a.onCaughtError!==void 0&&(M=a.onCaughtError),a.onRecoverableError!==void 0&&(P=a.onRecoverableError),a.unstable_transitionCallbacks!==void 0&&(V=a.unstable_transitionCallbacks)),a=tA(i,1,!1,null,null,l,h,x,M,P,V,null),i[ni]=a.current,pm(i),new Pm(a)},ou.hydrateRoot=function(i,a,l){if(!s(i))throw Error(n(299));var h=!1,x="",M=CS,P=RS,V=wS,re=null,Me=null;return l!=null&&(l.unstable_strictMode===!0&&(h=!0),l.identifierPrefix!==void 0&&(x=l.identifierPrefix),l.onUncaughtError!==void 0&&(M=l.onUncaughtError),l.onCaughtError!==void 0&&(P=l.onCaughtError),l.onRecoverableError!==void 0&&(V=l.onRecoverableError),l.unstable_transitionCallbacks!==void 0&&(re=l.unstable_transitionCallbacks),l.formState!==void 0&&(Me=l.formState)),a=tA(i,1,!0,a,l??null,h,x,M,P,V,re,Me),a.context=nA(null),l=a.current,h=Vi(),h=At(h),x=Yr(h),x.callback=null,$r(l,x,h),l=h,a.current.lanes=l,he(a,l),Gs(a),i[ni]=a.current,pm(i),new $f(a)},ou.version="19.1.0",ou}var AA;function ZC(){if(AA)return Bm.exports;AA=1;function r(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}return r(),Bm.exports=jC(),Bm.exports}var JC=ZC();/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const s_="160",ll={ROTATE:0,DOLLY:1,PAN:2},cl={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},e1=0,yA=1,t1=2,hE=1,n1=2,wr=3,js=0,Ii=1,hs=2,ba=0,Ca=1,MA=2,EA=3,TA=4,pE=5,po=100,i1=101,s1=102,bA=103,CA=104,r1=200,a1=201,o1=202,l1=203,bu=204,Cu=205,c1=206,u1=207,f1=208,d1=209,h1=210,p1=211,m1=212,g1=213,_1=214,v1=0,S1=1,x1=2,oh=3,A1=4,y1=5,M1=6,E1=7,mE=0,T1=1,b1=2,Ra=0,C1=1,R1=2,w1=3,D1=4,L1=5,P1=6,gE=300,Jl=301,ec=302,t0=303,n0=304,yh=306,i0=1e3,Ls=1001,s0=1002,li=1003,RA=1004,zm=1005,fs=1006,U1=1007,Ru=1008,Or=1009,I1=1010,B1=1011,r_=1012,_E=1013,Qi=1014,Xs=1015,tc=1016,vE=1017,SE=1018,Mo=1020,F1=1021,Ai=1023,N1=1024,O1=1025,wa=1026,nc=1027,z1=1028,a_=1029,H1=1030,xE=1031,Su=1033,Hm=33776,Gm=33777,Vm=33778,km=33779,wA=35840,DA=35841,LA=35842,PA=35843,AE=36196,UA=37492,IA=37496,BA=37808,FA=37809,NA=37810,OA=37811,zA=37812,HA=37813,GA=37814,VA=37815,kA=37816,WA=37817,XA=37818,qA=37819,YA=37820,$A=37821,Wm=36492,QA=36494,KA=36495,G1=36283,jA=36284,ZA=36285,JA=36286,yE=3e3,Eo=3001,V1=3200,k1=3201,W1=0,X1=1,ps="",ci="srgb",Gr="srgb-linear",o_="display-p3",Mh="display-p3-linear",lh="linear",vn="srgb",ch="rec709",uh="p3",ul=7680,ey=519,q1=512,Y1=513,$1=514,ME=515,Q1=516,K1=517,j1=518,Z1=519,ty=35044,J1=35048,ny="300 es",r0=1035,Br=2e3,fh=2001;let wo=class{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const s=this._listeners[e];if(s!==void 0){const o=s.indexOf(t);o!==-1&&s.splice(o,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const s=n.slice(0);for(let o=0,c=s.length;o<c;o++)s[o].call(this,e);e.target=null}}};const di=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Kd=Math.PI/180,a0=180/Math.PI;function Nu(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(di[r&255]+di[r>>8&255]+di[r>>16&255]+di[r>>24&255]+"-"+di[e&255]+di[e>>8&255]+"-"+di[e>>16&15|64]+di[e>>24&255]+"-"+di[t&63|128]+di[t>>8&255]+"-"+di[t>>16&255]+di[t>>24&255]+di[n&255]+di[n>>8&255]+di[n>>16&255]+di[n>>24&255]).toLowerCase()}function gi(r,e,t){return Math.max(e,Math.min(t,r))}function eR(r,e){return(r%e+e)%e}function Xm(r,e,t){return(1-t)*r+t*e}function iy(r){return(r&r-1)===0&&r!==0}function o0(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function lu(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function Ri(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const EE={DEG2RAD:Kd};let vt=class TE{constructor(e=0,t=0){TE.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6],this.y=s[1]*t+s[4]*n+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(gi(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),o=this.x-e.x,c=this.y-e.y;return this.x=o*n-c*s+e.x,this.y=o*s+c*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Pt=class bE{constructor(e,t,n,s,o,c,u,f,d){bE.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,s,o,c,u,f,d)}set(e,t,n,s,o,c,u,f,d){const p=this.elements;return p[0]=e,p[1]=s,p[2]=u,p[3]=t,p[4]=o,p[5]=f,p[6]=n,p[7]=c,p[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,c=n[0],u=n[3],f=n[6],d=n[1],p=n[4],m=n[7],g=n[2],v=n[5],A=n[8],y=s[0],S=s[3],_=s[6],b=s[1],E=s[4],R=s[7],D=s[2],L=s[5],w=s[8];return o[0]=c*y+u*b+f*D,o[3]=c*S+u*E+f*L,o[6]=c*_+u*R+f*w,o[1]=d*y+p*b+m*D,o[4]=d*S+p*E+m*L,o[7]=d*_+p*R+m*w,o[2]=g*y+v*b+A*D,o[5]=g*S+v*E+A*L,o[8]=g*_+v*R+A*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8];return t*c*p-t*u*d-n*o*p+n*u*f+s*o*d-s*c*f}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8],m=p*c-u*d,g=u*f-p*o,v=d*o-c*f,A=t*m+n*g+s*v;if(A===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/A;return e[0]=m*y,e[1]=(s*d-p*n)*y,e[2]=(u*n-s*c)*y,e[3]=g*y,e[4]=(p*t-s*f)*y,e[5]=(s*o-u*t)*y,e[6]=v*y,e[7]=(n*f-d*t)*y,e[8]=(c*t-n*o)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,o,c,u){const f=Math.cos(o),d=Math.sin(o);return this.set(n*f,n*d,-n*(f*c+d*u)+c+e,-s*d,s*f,-s*(-d*c+f*u)+u+t,0,0,1),this}scale(e,t){return this.premultiply(qm.makeScale(e,t)),this}rotate(e){return this.premultiply(qm.makeRotation(-e)),this}translate(e,t){return this.premultiply(qm.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<9;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}};const qm=new Pt;function CE(r){for(let e=r.length-1;e>=0;--e)if(r[e]>=65535)return!0;return!1}function dh(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function tR(){const r=dh("canvas");return r.style.display="block",r}const sy={};function xu(r){r in sy||(sy[r]=!0,console.warn(r))}const ry=new Pt().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),ay=new Pt().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),Kf={[Gr]:{transfer:lh,primaries:ch,toReference:r=>r,fromReference:r=>r},[ci]:{transfer:vn,primaries:ch,toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[Mh]:{transfer:lh,primaries:uh,toReference:r=>r.applyMatrix3(ay),fromReference:r=>r.applyMatrix3(ry)},[o_]:{transfer:vn,primaries:uh,toReference:r=>r.convertSRGBToLinear().applyMatrix3(ay),fromReference:r=>r.applyMatrix3(ry).convertLinearToSRGB()}},nR=new Set([Gr,Mh]),dn={enabled:!0,_workingColorSpace:Gr,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!nR.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,e,t){if(this.enabled===!1||e===t||!e||!t)return r;const n=Kf[e].toReference,s=Kf[t].fromReference;return s(n(r))},fromWorkingColorSpace:function(r,e){return this.convert(r,this._workingColorSpace,e)},toWorkingColorSpace:function(r,e){return this.convert(r,e,this._workingColorSpace)},getPrimaries:function(r){return Kf[r].primaries},getTransfer:function(r){return r===ps?lh:Kf[r].transfer}};function Yl(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Ym(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let fl,RE=class{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{fl===void 0&&(fl=dh("canvas")),fl.width=e.width,fl.height=e.height;const n=fl.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=fl}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=dh("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const s=n.getImageData(0,0,e.width,e.height),o=s.data;for(let c=0;c<o.length;c++)o[c]=Yl(o[c]/255)*255;return n.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Yl(t[n]/255)*255):t[n]=Yl(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}},iR=0,wE=class{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:iR++}),this.uuid=Nu(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},s=this.data;if(s!==null){let o;if(Array.isArray(s)){o=[];for(let c=0,u=s.length;c<u;c++)s[c].isDataTexture?o.push($m(s[c].image)):o.push($m(s[c]))}else o=$m(s);n.url=o}return t||(e.images[this.uuid]=n),n}};function $m(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?RE.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let sR=0,Zs=class jd extends wo{constructor(e=jd.DEFAULT_IMAGE,t=jd.DEFAULT_MAPPING,n=Ls,s=Ls,o=fs,c=Ru,u=Ai,f=Or,d=jd.DEFAULT_ANISOTROPY,p=ps){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:sR++}),this.uuid=Nu(),this.name="",this.source=new wE(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=o,this.minFilter=c,this.anisotropy=d,this.format=u,this.internalFormat=null,this.type=f,this.offset=new vt(0,0),this.repeat=new vt(1,1),this.center=new vt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Pt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof p=="string"?this.colorSpace=p:(xu("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=p===Eo?ci:ps),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==gE)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case i0:e.x=e.x-Math.floor(e.x);break;case Ls:e.x=e.x<0?0:1;break;case s0:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case i0:e.y=e.y-Math.floor(e.y);break;case Ls:e.y=e.y<0?0:1;break;case s0:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return xu("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===ci?Eo:yE}set encoding(e){xu("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=e===Eo?ci:ps}};Zs.DEFAULT_IMAGE=null;Zs.DEFAULT_MAPPING=gE;Zs.DEFAULT_ANISOTROPY=1;let ti=class DE{constructor(e=0,t=0,n=0,s=1){DE.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,o=this.w,c=e.elements;return this.x=c[0]*t+c[4]*n+c[8]*s+c[12]*o,this.y=c[1]*t+c[5]*n+c[9]*s+c[13]*o,this.z=c[2]*t+c[6]*n+c[10]*s+c[14]*o,this.w=c[3]*t+c[7]*n+c[11]*s+c[15]*o,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,s,o;const f=e.elements,d=f[0],p=f[4],m=f[8],g=f[1],v=f[5],A=f[9],y=f[2],S=f[6],_=f[10];if(Math.abs(p-g)<.01&&Math.abs(m-y)<.01&&Math.abs(A-S)<.01){if(Math.abs(p+g)<.1&&Math.abs(m+y)<.1&&Math.abs(A+S)<.1&&Math.abs(d+v+_-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const E=(d+1)/2,R=(v+1)/2,D=(_+1)/2,L=(p+g)/4,w=(m+y)/4,B=(A+S)/4;return E>R&&E>D?E<.01?(n=0,s=.707106781,o=.707106781):(n=Math.sqrt(E),s=L/n,o=w/n):R>D?R<.01?(n=.707106781,s=0,o=.707106781):(s=Math.sqrt(R),n=L/s,o=B/s):D<.01?(n=.707106781,s=.707106781,o=0):(o=Math.sqrt(D),n=w/o,s=B/o),this.set(n,s,o,t),this}let b=Math.sqrt((S-A)*(S-A)+(m-y)*(m-y)+(g-p)*(g-p));return Math.abs(b)<.001&&(b=1),this.x=(S-A)/b,this.y=(m-y)/b,this.z=(g-p)/b,this.w=Math.acos((d+v+_-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},rR=class extends wo{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new ti(0,0,e,t),this.scissorTest=!1,this.viewport=new ti(0,0,e,t);const s={width:e,height:t,depth:1};n.encoding!==void 0&&(xu("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===Eo?ci:ps),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:fs,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},n),this.texture=new Zs(s,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps,this.texture.internalFormat=n.internalFormat,this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new wE(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},Pa=class extends rR{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}},LE=class extends Zs{constructor(e=null,t=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=li,this.minFilter=li,this.wrapR=Ls,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},aR=class extends Zs{constructor(e=null,t=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=li,this.minFilter=li,this.wrapR=Ls,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},En=class{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,o,c,u){let f=n[s+0],d=n[s+1],p=n[s+2],m=n[s+3];const g=o[c+0],v=o[c+1],A=o[c+2],y=o[c+3];if(u===0){e[t+0]=f,e[t+1]=d,e[t+2]=p,e[t+3]=m;return}if(u===1){e[t+0]=g,e[t+1]=v,e[t+2]=A,e[t+3]=y;return}if(m!==y||f!==g||d!==v||p!==A){let S=1-u;const _=f*g+d*v+p*A+m*y,b=_>=0?1:-1,E=1-_*_;if(E>Number.EPSILON){const D=Math.sqrt(E),L=Math.atan2(D,_*b);S=Math.sin(S*L)/D,u=Math.sin(u*L)/D}const R=u*b;if(f=f*S+g*R,d=d*S+v*R,p=p*S+A*R,m=m*S+y*R,S===1-u){const D=1/Math.sqrt(f*f+d*d+p*p+m*m);f*=D,d*=D,p*=D,m*=D}}e[t]=f,e[t+1]=d,e[t+2]=p,e[t+3]=m}static multiplyQuaternionsFlat(e,t,n,s,o,c){const u=n[s],f=n[s+1],d=n[s+2],p=n[s+3],m=o[c],g=o[c+1],v=o[c+2],A=o[c+3];return e[t]=u*A+p*m+f*v-d*g,e[t+1]=f*A+p*g+d*m-u*v,e[t+2]=d*A+p*v+u*g-f*m,e[t+3]=p*A-u*m-f*g-d*v,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,s=e._y,o=e._z,c=e._order,u=Math.cos,f=Math.sin,d=u(n/2),p=u(s/2),m=u(o/2),g=f(n/2),v=f(s/2),A=f(o/2);switch(c){case"XYZ":this._x=g*p*m+d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m-g*v*A;break;case"YXZ":this._x=g*p*m+d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m+g*v*A;break;case"ZXY":this._x=g*p*m-d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m-g*v*A;break;case"ZYX":this._x=g*p*m-d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m+g*v*A;break;case"YZX":this._x=g*p*m+d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m-g*v*A;break;case"XZY":this._x=g*p*m-d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m+g*v*A;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+c)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],s=t[4],o=t[8],c=t[1],u=t[5],f=t[9],d=t[2],p=t[6],m=t[10],g=n+u+m;if(g>0){const v=.5/Math.sqrt(g+1);this._w=.25/v,this._x=(p-f)*v,this._y=(o-d)*v,this._z=(c-s)*v}else if(n>u&&n>m){const v=2*Math.sqrt(1+n-u-m);this._w=(p-f)/v,this._x=.25*v,this._y=(s+c)/v,this._z=(o+d)/v}else if(u>m){const v=2*Math.sqrt(1+u-n-m);this._w=(o-d)/v,this._x=(s+c)/v,this._y=.25*v,this._z=(f+p)/v}else{const v=2*Math.sqrt(1+m-n-u);this._w=(c-s)/v,this._x=(o+d)/v,this._y=(f+p)/v,this._z=.25*v}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(gi(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,o=e._z,c=e._w,u=t._x,f=t._y,d=t._z,p=t._w;return this._x=n*p+c*u+s*d-o*f,this._y=s*p+c*f+o*u-n*d,this._z=o*p+c*d+n*f-s*u,this._w=c*p-n*u-s*f-o*d,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,s=this._y,o=this._z,c=this._w;let u=c*e._w+n*e._x+s*e._y+o*e._z;if(u<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,u=-u):this.copy(e),u>=1)return this._w=c,this._x=n,this._y=s,this._z=o,this;const f=1-u*u;if(f<=Number.EPSILON){const v=1-t;return this._w=v*c+t*this._w,this._x=v*n+t*this._x,this._y=v*s+t*this._y,this._z=v*o+t*this._z,this.normalize(),this}const d=Math.sqrt(f),p=Math.atan2(d,u),m=Math.sin((1-t)*p)/d,g=Math.sin(t*p)/d;return this._w=c*m+this._w*g,this._x=n*m+this._x*g,this._y=s*m+this._y*g,this._z=o*m+this._z*g,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),s=2*Math.PI*Math.random(),o=2*Math.PI*Math.random();return this.set(t*Math.cos(s),n*Math.sin(o),n*Math.cos(o),t*Math.sin(s))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},ne=class PE{constructor(e=0,t=0,n=0){PE.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(oy.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(oy.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,s=this.z,o=e.elements;return this.x=o[0]*t+o[3]*n+o[6]*s,this.y=o[1]*t+o[4]*n+o[7]*s,this.z=o[2]*t+o[5]*n+o[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,o=e.elements,c=1/(o[3]*t+o[7]*n+o[11]*s+o[15]);return this.x=(o[0]*t+o[4]*n+o[8]*s+o[12])*c,this.y=(o[1]*t+o[5]*n+o[9]*s+o[13])*c,this.z=(o[2]*t+o[6]*n+o[10]*s+o[14])*c,this}applyQuaternion(e){const t=this.x,n=this.y,s=this.z,o=e.x,c=e.y,u=e.z,f=e.w,d=2*(c*s-u*n),p=2*(u*t-o*s),m=2*(o*n-c*t);return this.x=t+f*d+c*m-u*p,this.y=n+f*p+u*d-o*m,this.z=s+f*m+o*p-c*d,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,s=this.z,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*s,this.y=o[1]*t+o[5]*n+o[9]*s,this.z=o[2]*t+o[6]*n+o[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,o=e.z,c=t.x,u=t.y,f=t.z;return this.x=s*f-o*u,this.y=o*c-n*f,this.z=n*u-s*c,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Qm.copy(this).projectOnVector(e),this.sub(Qm)}reflect(e){return this.sub(Qm.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(gi(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const Qm=new ne,oy=new En;let qs=class{constructor(e=new ne(1/0,1/0,1/0),t=new ne(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Es.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Es.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Es.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const o=n.getAttribute("position");if(t===!0&&o!==void 0&&e.isInstancedMesh!==!0)for(let c=0,u=o.count;c<u;c++)e.isMesh===!0?e.getVertexPosition(c,Es):Es.fromBufferAttribute(o,c),Es.applyMatrix4(e.matrixWorld),this.expandByPoint(Es);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),jf.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),jf.copy(n.boundingBox)),jf.applyMatrix4(e.matrixWorld),this.union(jf)}const s=e.children;for(let o=0,c=s.length;o<c;o++)this.expandByObject(s[o],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Es),Es.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(cu),Zf.subVectors(this.max,cu),dl.subVectors(e.a,cu),hl.subVectors(e.b,cu),pl.subVectors(e.c,cu),da.subVectors(hl,dl),ha.subVectors(pl,hl),Za.subVectors(dl,pl);let t=[0,-da.z,da.y,0,-ha.z,ha.y,0,-Za.z,Za.y,da.z,0,-da.x,ha.z,0,-ha.x,Za.z,0,-Za.x,-da.y,da.x,0,-ha.y,ha.x,0,-Za.y,Za.x,0];return!Km(t,dl,hl,pl,Zf)||(t=[1,0,0,0,1,0,0,0,1],!Km(t,dl,hl,pl,Zf))?!1:(Jf.crossVectors(da,ha),t=[Jf.x,Jf.y,Jf.z],Km(t,dl,hl,pl,Zf))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Es).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Es).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(vr[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),vr[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),vr[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),vr[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),vr[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),vr[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),vr[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),vr[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(vr),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}};const vr=[new ne,new ne,new ne,new ne,new ne,new ne,new ne,new ne],Es=new ne,jf=new qs,dl=new ne,hl=new ne,pl=new ne,da=new ne,ha=new ne,Za=new ne,cu=new ne,Zf=new ne,Jf=new ne,Ja=new ne;function Km(r,e,t,n,s){for(let o=0,c=r.length-3;o<=c;o+=3){Ja.fromArray(r,o);const u=s.x*Math.abs(Ja.x)+s.y*Math.abs(Ja.y)+s.z*Math.abs(Ja.z),f=e.dot(Ja),d=t.dot(Ja),p=n.dot(Ja);if(Math.max(-Math.max(f,d,p),Math.min(f,d,p))>u)return!1}return!0}const oR=new qs,uu=new ne,jm=new ne;let l_=class{constructor(e=new ne,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):oR.setFromPoints(e).getCenter(n);let s=0;for(let o=0,c=e.length;o<c;o++)s=Math.max(s,n.distanceToSquared(e[o]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;uu.subVectors(e,this.center);const t=uu.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),s=(n-this.radius)*.5;this.center.addScaledVector(uu,s/n),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(jm.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(uu.copy(e.center).add(jm)),this.expandByPoint(uu.copy(e.center).sub(jm))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}};const Sr=new ne,Zm=new ne,ed=new ne,pa=new ne,Jm=new ne,td=new ne,eg=new ne;let UE=class{constructor(e=new ne,t=new ne(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Sr)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Sr.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Sr.copy(this.origin).addScaledVector(this.direction,t),Sr.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){Zm.copy(e).add(t).multiplyScalar(.5),ed.copy(t).sub(e).normalize(),pa.copy(this.origin).sub(Zm);const o=e.distanceTo(t)*.5,c=-this.direction.dot(ed),u=pa.dot(this.direction),f=-pa.dot(ed),d=pa.lengthSq(),p=Math.abs(1-c*c);let m,g,v,A;if(p>0)if(m=c*f-u,g=c*u-f,A=o*p,m>=0)if(g>=-A)if(g<=A){const y=1/p;m*=y,g*=y,v=m*(m+c*g+2*u)+g*(c*m+g+2*f)+d}else g=o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;else g=-o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;else g<=-A?(m=Math.max(0,-(-c*o+u)),g=m>0?-o:Math.min(Math.max(-o,-f),o),v=-m*m+g*(g+2*f)+d):g<=A?(m=0,g=Math.min(Math.max(-o,-f),o),v=g*(g+2*f)+d):(m=Math.max(0,-(c*o+u)),g=m>0?o:Math.min(Math.max(-o,-f),o),v=-m*m+g*(g+2*f)+d);else g=c>0?-o:o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;return n&&n.copy(this.origin).addScaledVector(this.direction,m),s&&s.copy(Zm).addScaledVector(ed,g),v}intersectSphere(e,t){Sr.subVectors(e.center,this.origin);const n=Sr.dot(this.direction),s=Sr.dot(Sr)-n*n,o=e.radius*e.radius;if(s>o)return null;const c=Math.sqrt(o-s),u=n-c,f=n+c;return f<0?null:u<0?this.at(f,t):this.at(u,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,s,o,c,u,f;const d=1/this.direction.x,p=1/this.direction.y,m=1/this.direction.z,g=this.origin;return d>=0?(n=(e.min.x-g.x)*d,s=(e.max.x-g.x)*d):(n=(e.max.x-g.x)*d,s=(e.min.x-g.x)*d),p>=0?(o=(e.min.y-g.y)*p,c=(e.max.y-g.y)*p):(o=(e.max.y-g.y)*p,c=(e.min.y-g.y)*p),n>c||o>s||((o>n||isNaN(n))&&(n=o),(c<s||isNaN(s))&&(s=c),m>=0?(u=(e.min.z-g.z)*m,f=(e.max.z-g.z)*m):(u=(e.max.z-g.z)*m,f=(e.min.z-g.z)*m),n>f||u>s)||((u>n||n!==n)&&(n=u),(f<s||s!==s)&&(s=f),s<0)?null:this.at(n>=0?n:s,t)}intersectsBox(e){return this.intersectBox(e,Sr)!==null}intersectTriangle(e,t,n,s,o){Jm.subVectors(t,e),td.subVectors(n,e),eg.crossVectors(Jm,td);let c=this.direction.dot(eg),u;if(c>0){if(s)return null;u=1}else if(c<0)u=-1,c=-c;else return null;pa.subVectors(this.origin,e);const f=u*this.direction.dot(td.crossVectors(pa,td));if(f<0)return null;const d=u*this.direction.dot(Jm.cross(pa));if(d<0||f+d>c)return null;const p=-u*pa.dot(eg);return p<0?null:this.at(p/c,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},Bt=class l0{constructor(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S){l0.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S)}set(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S){const _=this.elements;return _[0]=e,_[4]=t,_[8]=n,_[12]=s,_[1]=o,_[5]=c,_[9]=u,_[13]=f,_[2]=d,_[6]=p,_[10]=m,_[14]=g,_[3]=v,_[7]=A,_[11]=y,_[15]=S,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new l0().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/ml.setFromMatrixColumn(e,0).length(),o=1/ml.setFromMatrixColumn(e,1).length(),c=1/ml.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*c,t[9]=n[9]*c,t[10]=n[10]*c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,s=e.y,o=e.z,c=Math.cos(n),u=Math.sin(n),f=Math.cos(s),d=Math.sin(s),p=Math.cos(o),m=Math.sin(o);if(e.order==="XYZ"){const g=c*p,v=c*m,A=u*p,y=u*m;t[0]=f*p,t[4]=-f*m,t[8]=d,t[1]=v+A*d,t[5]=g-y*d,t[9]=-u*f,t[2]=y-g*d,t[6]=A+v*d,t[10]=c*f}else if(e.order==="YXZ"){const g=f*p,v=f*m,A=d*p,y=d*m;t[0]=g+y*u,t[4]=A*u-v,t[8]=c*d,t[1]=c*m,t[5]=c*p,t[9]=-u,t[2]=v*u-A,t[6]=y+g*u,t[10]=c*f}else if(e.order==="ZXY"){const g=f*p,v=f*m,A=d*p,y=d*m;t[0]=g-y*u,t[4]=-c*m,t[8]=A+v*u,t[1]=v+A*u,t[5]=c*p,t[9]=y-g*u,t[2]=-c*d,t[6]=u,t[10]=c*f}else if(e.order==="ZYX"){const g=c*p,v=c*m,A=u*p,y=u*m;t[0]=f*p,t[4]=A*d-v,t[8]=g*d+y,t[1]=f*m,t[5]=y*d+g,t[9]=v*d-A,t[2]=-d,t[6]=u*f,t[10]=c*f}else if(e.order==="YZX"){const g=c*f,v=c*d,A=u*f,y=u*d;t[0]=f*p,t[4]=y-g*m,t[8]=A*m+v,t[1]=m,t[5]=c*p,t[9]=-u*p,t[2]=-d*p,t[6]=v*m+A,t[10]=g-y*m}else if(e.order==="XZY"){const g=c*f,v=c*d,A=u*f,y=u*d;t[0]=f*p,t[4]=-m,t[8]=d*p,t[1]=g*m+y,t[5]=c*p,t[9]=v*m-A,t[2]=A*m-v,t[6]=u*p,t[10]=y*m+g}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(lR,e,cR)}lookAt(e,t,n){const s=this.elements;return Wi.subVectors(e,t),Wi.lengthSq()===0&&(Wi.z=1),Wi.normalize(),ma.crossVectors(n,Wi),ma.lengthSq()===0&&(Math.abs(n.z)===1?Wi.x+=1e-4:Wi.z+=1e-4,Wi.normalize(),ma.crossVectors(n,Wi)),ma.normalize(),nd.crossVectors(Wi,ma),s[0]=ma.x,s[4]=nd.x,s[8]=Wi.x,s[1]=ma.y,s[5]=nd.y,s[9]=Wi.y,s[2]=ma.z,s[6]=nd.z,s[10]=Wi.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,c=n[0],u=n[4],f=n[8],d=n[12],p=n[1],m=n[5],g=n[9],v=n[13],A=n[2],y=n[6],S=n[10],_=n[14],b=n[3],E=n[7],R=n[11],D=n[15],L=s[0],w=s[4],B=s[8],C=s[12],T=s[1],O=s[5],X=s[9],$=s[13],z=s[2],k=s[6],I=s[10],Y=s[14],q=s[3],J=s[7],F=s[11],ee=s[15];return o[0]=c*L+u*T+f*z+d*q,o[4]=c*w+u*O+f*k+d*J,o[8]=c*B+u*X+f*I+d*F,o[12]=c*C+u*$+f*Y+d*ee,o[1]=p*L+m*T+g*z+v*q,o[5]=p*w+m*O+g*k+v*J,o[9]=p*B+m*X+g*I+v*F,o[13]=p*C+m*$+g*Y+v*ee,o[2]=A*L+y*T+S*z+_*q,o[6]=A*w+y*O+S*k+_*J,o[10]=A*B+y*X+S*I+_*F,o[14]=A*C+y*$+S*Y+_*ee,o[3]=b*L+E*T+R*z+D*q,o[7]=b*w+E*O+R*k+D*J,o[11]=b*B+E*X+R*I+D*F,o[15]=b*C+E*$+R*Y+D*ee,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],o=e[12],c=e[1],u=e[5],f=e[9],d=e[13],p=e[2],m=e[6],g=e[10],v=e[14],A=e[3],y=e[7],S=e[11],_=e[15];return A*(+o*f*m-s*d*m-o*u*g+n*d*g+s*u*v-n*f*v)+y*(+t*f*v-t*d*g+o*c*g-s*c*v+s*d*p-o*f*p)+S*(+t*d*m-t*u*v-o*c*m+n*c*v+o*u*p-n*d*p)+_*(-s*u*p-t*f*m+t*u*g+s*c*m-n*c*g+n*f*p)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8],m=e[9],g=e[10],v=e[11],A=e[12],y=e[13],S=e[14],_=e[15],b=m*S*d-y*g*d+y*f*v-u*S*v-m*f*_+u*g*_,E=A*g*d-p*S*d-A*f*v+c*S*v+p*f*_-c*g*_,R=p*y*d-A*m*d+A*u*v-c*y*v-p*u*_+c*m*_,D=A*m*f-p*y*f-A*u*g+c*y*g+p*u*S-c*m*S,L=t*b+n*E+s*R+o*D;if(L===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/L;return e[0]=b*w,e[1]=(y*g*o-m*S*o-y*s*v+n*S*v+m*s*_-n*g*_)*w,e[2]=(u*S*o-y*f*o+y*s*d-n*S*d-u*s*_+n*f*_)*w,e[3]=(m*f*o-u*g*o-m*s*d+n*g*d+u*s*v-n*f*v)*w,e[4]=E*w,e[5]=(p*S*o-A*g*o+A*s*v-t*S*v-p*s*_+t*g*_)*w,e[6]=(A*f*o-c*S*o-A*s*d+t*S*d+c*s*_-t*f*_)*w,e[7]=(c*g*o-p*f*o+p*s*d-t*g*d-c*s*v+t*f*v)*w,e[8]=R*w,e[9]=(A*m*o-p*y*o-A*n*v+t*y*v+p*n*_-t*m*_)*w,e[10]=(c*y*o-A*u*o+A*n*d-t*y*d-c*n*_+t*u*_)*w,e[11]=(p*u*o-c*m*o-p*n*d+t*m*d+c*n*v-t*u*v)*w,e[12]=D*w,e[13]=(p*y*s-A*m*s+A*n*g-t*y*g-p*n*S+t*m*S)*w,e[14]=(A*u*s-c*y*s-A*n*f+t*y*f+c*n*S-t*u*S)*w,e[15]=(c*m*s-p*u*s+p*n*f-t*m*f-c*n*g+t*u*g)*w,this}scale(e){const t=this.elements,n=e.x,s=e.y,o=e.z;return t[0]*=n,t[4]*=s,t[8]*=o,t[1]*=n,t[5]*=s,t[9]*=o,t[2]*=n,t[6]*=s,t[10]*=o,t[3]*=n,t[7]*=s,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),s=Math.sin(t),o=1-n,c=e.x,u=e.y,f=e.z,d=o*c,p=o*u;return this.set(d*c+n,d*u-s*f,d*f+s*u,0,d*u+s*f,p*u+n,p*f-s*c,0,d*f-s*u,p*f+s*c,o*f*f+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,o,c){return this.set(1,n,o,0,e,1,c,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,o=t._x,c=t._y,u=t._z,f=t._w,d=o+o,p=c+c,m=u+u,g=o*d,v=o*p,A=o*m,y=c*p,S=c*m,_=u*m,b=f*d,E=f*p,R=f*m,D=n.x,L=n.y,w=n.z;return s[0]=(1-(y+_))*D,s[1]=(v+R)*D,s[2]=(A-E)*D,s[3]=0,s[4]=(v-R)*L,s[5]=(1-(g+_))*L,s[6]=(S+b)*L,s[7]=0,s[8]=(A+E)*w,s[9]=(S-b)*w,s[10]=(1-(g+y))*w,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let o=ml.set(s[0],s[1],s[2]).length();const c=ml.set(s[4],s[5],s[6]).length(),u=ml.set(s[8],s[9],s[10]).length();this.determinant()<0&&(o=-o),e.x=s[12],e.y=s[13],e.z=s[14],Ts.copy(this);const d=1/o,p=1/c,m=1/u;return Ts.elements[0]*=d,Ts.elements[1]*=d,Ts.elements[2]*=d,Ts.elements[4]*=p,Ts.elements[5]*=p,Ts.elements[6]*=p,Ts.elements[8]*=m,Ts.elements[9]*=m,Ts.elements[10]*=m,t.setFromRotationMatrix(Ts),n.x=o,n.y=c,n.z=u,this}makePerspective(e,t,n,s,o,c,u=Br){const f=this.elements,d=2*o/(t-e),p=2*o/(n-s),m=(t+e)/(t-e),g=(n+s)/(n-s);let v,A;if(u===Br)v=-(c+o)/(c-o),A=-2*c*o/(c-o);else if(u===fh)v=-c/(c-o),A=-c*o/(c-o);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+u);return f[0]=d,f[4]=0,f[8]=m,f[12]=0,f[1]=0,f[5]=p,f[9]=g,f[13]=0,f[2]=0,f[6]=0,f[10]=v,f[14]=A,f[3]=0,f[7]=0,f[11]=-1,f[15]=0,this}makeOrthographic(e,t,n,s,o,c,u=Br){const f=this.elements,d=1/(t-e),p=1/(n-s),m=1/(c-o),g=(t+e)*d,v=(n+s)*p;let A,y;if(u===Br)A=(c+o)*m,y=-2*m;else if(u===fh)A=o*m,y=-1*m;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+u);return f[0]=2*d,f[4]=0,f[8]=0,f[12]=-g,f[1]=0,f[5]=2*p,f[9]=0,f[13]=-v,f[2]=0,f[6]=0,f[10]=y,f[14]=-A,f[3]=0,f[7]=0,f[11]=0,f[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<16;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}};const ml=new ne,Ts=new Bt,lR=new ne(0,0,0),cR=new ne(1,1,1),ma=new ne,nd=new ne,Wi=new ne,ly=new Bt,cy=new En;let IE=class BE{constructor(e=0,t=0,n=0,s=BE.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,o=s[0],c=s[4],u=s[8],f=s[1],d=s[5],p=s[9],m=s[2],g=s[6],v=s[10];switch(t){case"XYZ":this._y=Math.asin(gi(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-p,v),this._z=Math.atan2(-c,o)):(this._x=Math.atan2(g,d),this._z=0);break;case"YXZ":this._x=Math.asin(-gi(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(u,v),this._z=Math.atan2(f,d)):(this._y=Math.atan2(-m,o),this._z=0);break;case"ZXY":this._x=Math.asin(gi(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(-m,v),this._z=Math.atan2(-c,d)):(this._y=0,this._z=Math.atan2(f,o));break;case"ZYX":this._y=Math.asin(-gi(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(g,v),this._z=Math.atan2(f,o)):(this._x=0,this._z=Math.atan2(-c,d));break;case"YZX":this._z=Math.asin(gi(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(-p,d),this._y=Math.atan2(-m,o)):(this._x=0,this._y=Math.atan2(u,v));break;case"XZY":this._z=Math.asin(-gi(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(g,d),this._y=Math.atan2(u,o)):(this._x=Math.atan2(-p,v),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return ly.makeRotationFromQuaternion(e),this.setFromRotationMatrix(ly,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return cy.setFromEuler(this),this.setFromQuaternion(cy,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};IE.DEFAULT_ORDER="XYZ";let FE=class{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}},uR=0;const uy=new ne,gl=new En,xr=new Bt,id=new ne,fu=new ne,fR=new ne,dR=new En,fy=new ne(1,0,0),dy=new ne(0,1,0),hy=new ne(0,0,1),hR={type:"added"},pR={type:"removed"};let yi=class Zd extends wo{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:uR++}),this.uuid=Nu(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Zd.DEFAULT_UP.clone();const e=new ne,t=new IE,n=new En,s=new ne(1,1,1);function o(){n.setFromEuler(t,!1)}function c(){t.setFromQuaternion(n,void 0,!1)}t._onChange(o),n._onChange(c),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new Bt},normalMatrix:{value:new Pt}}),this.matrix=new Bt,this.matrixWorld=new Bt,this.matrixAutoUpdate=Zd.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Zd.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new FE,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return gl.setFromAxisAngle(e,t),this.quaternion.multiply(gl),this}rotateOnWorldAxis(e,t){return gl.setFromAxisAngle(e,t),this.quaternion.premultiply(gl),this}rotateX(e){return this.rotateOnAxis(fy,e)}rotateY(e){return this.rotateOnAxis(dy,e)}rotateZ(e){return this.rotateOnAxis(hy,e)}translateOnAxis(e,t){return uy.copy(e).applyQuaternion(this.quaternion),this.position.add(uy.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(fy,e)}translateY(e){return this.translateOnAxis(dy,e)}translateZ(e){return this.translateOnAxis(hy,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(xr.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?id.copy(e):id.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),fu.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?xr.lookAt(fu,id,this.up):xr.lookAt(id,fu,this.up),this.quaternion.setFromRotationMatrix(xr),s&&(xr.extractRotation(s.matrixWorld),gl.setFromRotationMatrix(xr),this.quaternion.premultiply(gl.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(hR)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(pR)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),xr.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),xr.multiply(e.parent.matrixWorld)),e.applyMatrix4(xr),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,s=this.children.length;n<s;n++){const c=this.children[n].getObjectByProperty(e,t);if(c!==void 0)return c}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let o=0,c=s.length;o<c;o++)s[o].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fu,e,fR),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(fu,dR,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++){const o=t[n];(o.matrixWorldAutoUpdate===!0||e===!0)&&o.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const s=this.children;for(let o=0,c=s.length;o<c;o++){const u=s[o];u.matrixWorldAutoUpdate===!0&&u.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.visibility=this._visibility,s.active=this._active,s.bounds=this._bounds.map(u=>({boxInitialized:u.boxInitialized,boxMin:u.box.min.toArray(),boxMax:u.box.max.toArray(),sphereInitialized:u.sphereInitialized,sphereRadius:u.sphere.radius,sphereCenter:u.sphere.center.toArray()})),s.maxGeometryCount=this._maxGeometryCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.geometryCount=this._geometryCount,s.matricesTexture=this._matricesTexture.toJSON(e),this.boundingSphere!==null&&(s.boundingSphere={center:s.boundingSphere.center.toArray(),radius:s.boundingSphere.radius}),this.boundingBox!==null&&(s.boundingBox={min:s.boundingBox.min.toArray(),max:s.boundingBox.max.toArray()}));function o(u,f){return u[f.uuid]===void 0&&(u[f.uuid]=f.toJSON(e)),f.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=o(e.geometries,this.geometry);const u=this.geometry.parameters;if(u!==void 0&&u.shapes!==void 0){const f=u.shapes;if(Array.isArray(f))for(let d=0,p=f.length;d<p;d++){const m=f[d];o(e.shapes,m)}else o(e.shapes,f)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(o(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const u=[];for(let f=0,d=this.material.length;f<d;f++)u.push(o(e.materials,this.material[f]));s.material=u}else s.material=o(e.materials,this.material);if(this.children.length>0){s.children=[];for(let u=0;u<this.children.length;u++)s.children.push(this.children[u].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let u=0;u<this.animations.length;u++){const f=this.animations[u];s.animations.push(o(e.animations,f))}}if(t){const u=c(e.geometries),f=c(e.materials),d=c(e.textures),p=c(e.images),m=c(e.shapes),g=c(e.skeletons),v=c(e.animations),A=c(e.nodes);u.length>0&&(n.geometries=u),f.length>0&&(n.materials=f),d.length>0&&(n.textures=d),p.length>0&&(n.images=p),m.length>0&&(n.shapes=m),g.length>0&&(n.skeletons=g),v.length>0&&(n.animations=v),A.length>0&&(n.nodes=A)}return n.object=s,n;function c(u){const f=[];for(const d in u){const p=u[d];delete p.metadata,f.push(p)}return f}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const s=e.children[n];this.add(s.clone())}return this}};yi.DEFAULT_UP=new ne(0,1,0);yi.DEFAULT_MATRIX_AUTO_UPDATE=!0;yi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const bs=new ne,Ar=new ne,tg=new ne,yr=new ne,_l=new ne,vl=new ne,py=new ne,ng=new ne,ig=new ne,sg=new ne;let sd=!1,rd=class lo{constructor(e=new ne,t=new ne,n=new ne){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,s){s.subVectors(n,t),bs.subVectors(e,t),s.cross(bs);const o=s.lengthSq();return o>0?s.multiplyScalar(1/Math.sqrt(o)):s.set(0,0,0)}static getBarycoord(e,t,n,s,o){bs.subVectors(s,t),Ar.subVectors(n,t),tg.subVectors(e,t);const c=bs.dot(bs),u=bs.dot(Ar),f=bs.dot(tg),d=Ar.dot(Ar),p=Ar.dot(tg),m=c*d-u*u;if(m===0)return o.set(0,0,0),null;const g=1/m,v=(d*f-u*p)*g,A=(c*p-u*f)*g;return o.set(1-v-A,A,v)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,yr)===null?!1:yr.x>=0&&yr.y>=0&&yr.x+yr.y<=1}static getUV(e,t,n,s,o,c,u,f){return sd===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),sd=!0),this.getInterpolation(e,t,n,s,o,c,u,f)}static getInterpolation(e,t,n,s,o,c,u,f){return this.getBarycoord(e,t,n,s,yr)===null?(f.x=0,f.y=0,"z"in f&&(f.z=0),"w"in f&&(f.w=0),null):(f.setScalar(0),f.addScaledVector(o,yr.x),f.addScaledVector(c,yr.y),f.addScaledVector(u,yr.z),f)}static isFrontFacing(e,t,n,s){return bs.subVectors(n,t),Ar.subVectors(e,t),bs.cross(Ar).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return bs.subVectors(this.c,this.b),Ar.subVectors(this.a,this.b),bs.cross(Ar).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return lo.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return lo.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,s,o){return sd===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),sd=!0),lo.getInterpolation(e,this.a,this.b,this.c,t,n,s,o)}getInterpolation(e,t,n,s,o){return lo.getInterpolation(e,this.a,this.b,this.c,t,n,s,o)}containsPoint(e){return lo.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return lo.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,s=this.b,o=this.c;let c,u;_l.subVectors(s,n),vl.subVectors(o,n),ng.subVectors(e,n);const f=_l.dot(ng),d=vl.dot(ng);if(f<=0&&d<=0)return t.copy(n);ig.subVectors(e,s);const p=_l.dot(ig),m=vl.dot(ig);if(p>=0&&m<=p)return t.copy(s);const g=f*m-p*d;if(g<=0&&f>=0&&p<=0)return c=f/(f-p),t.copy(n).addScaledVector(_l,c);sg.subVectors(e,o);const v=_l.dot(sg),A=vl.dot(sg);if(A>=0&&v<=A)return t.copy(o);const y=v*d-f*A;if(y<=0&&d>=0&&A<=0)return u=d/(d-A),t.copy(n).addScaledVector(vl,u);const S=p*A-v*m;if(S<=0&&m-p>=0&&v-A>=0)return py.subVectors(o,s),u=(m-p)/(m-p+(v-A)),t.copy(s).addScaledVector(py,u);const _=1/(S+y+g);return c=y*_,u=g*_,t.copy(n).addScaledVector(_l,c).addScaledVector(vl,u)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}};const NE={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ga={h:0,s:0,l:0},ad={h:0,s:0,l:0};function rg(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}let jt=class{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=ci){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,dn.toWorkingColorSpace(this,t),this}setRGB(e,t,n,s=dn.workingColorSpace){return this.r=e,this.g=t,this.b=n,dn.toWorkingColorSpace(this,s),this}setHSL(e,t,n,s=dn.workingColorSpace){if(e=eR(e,1),t=gi(t,0,1),n=gi(n,0,1),t===0)this.r=this.g=this.b=n;else{const o=n<=.5?n*(1+t):n+t-n*t,c=2*n-o;this.r=rg(c,o,e+1/3),this.g=rg(c,o,e),this.b=rg(c,o,e-1/3)}return dn.toWorkingColorSpace(this,s),this}setStyle(e,t=ci){function n(o){o!==void 0&&parseFloat(o)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let o;const c=s[1],u=s[2];switch(c){case"rgb":case"rgba":if(o=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setRGB(Math.min(255,parseInt(o[1],10))/255,Math.min(255,parseInt(o[2],10))/255,Math.min(255,parseInt(o[3],10))/255,t);if(o=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setRGB(Math.min(100,parseInt(o[1],10))/100,Math.min(100,parseInt(o[2],10))/100,Math.min(100,parseInt(o[3],10))/100,t);break;case"hsl":case"hsla":if(o=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setHSL(parseFloat(o[1])/360,parseFloat(o[2])/100,parseFloat(o[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const o=s[1],c=o.length;if(c===3)return this.setRGB(parseInt(o.charAt(0),16)/15,parseInt(o.charAt(1),16)/15,parseInt(o.charAt(2),16)/15,t);if(c===6)return this.setHex(parseInt(o,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=ci){const n=NE[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Yl(e.r),this.g=Yl(e.g),this.b=Yl(e.b),this}copyLinearToSRGB(e){return this.r=Ym(e.r),this.g=Ym(e.g),this.b=Ym(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=ci){return dn.fromWorkingColorSpace(hi.copy(this),e),Math.round(gi(hi.r*255,0,255))*65536+Math.round(gi(hi.g*255,0,255))*256+Math.round(gi(hi.b*255,0,255))}getHexString(e=ci){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=dn.workingColorSpace){dn.fromWorkingColorSpace(hi.copy(this),t);const n=hi.r,s=hi.g,o=hi.b,c=Math.max(n,s,o),u=Math.min(n,s,o);let f,d;const p=(u+c)/2;if(u===c)f=0,d=0;else{const m=c-u;switch(d=p<=.5?m/(c+u):m/(2-c-u),c){case n:f=(s-o)/m+(s<o?6:0);break;case s:f=(o-n)/m+2;break;case o:f=(n-s)/m+4;break}f/=6}return e.h=f,e.s=d,e.l=p,e}getRGB(e,t=dn.workingColorSpace){return dn.fromWorkingColorSpace(hi.copy(this),t),e.r=hi.r,e.g=hi.g,e.b=hi.b,e}getStyle(e=ci){dn.fromWorkingColorSpace(hi.copy(this),e);const t=hi.r,n=hi.g,s=hi.b;return e!==ci?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(ga),this.setHSL(ga.h+e,ga.s+t,ga.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ga),e.getHSL(ad);const n=Xm(ga.h,ad.h,t),s=Xm(ga.s,ad.s,t),o=Xm(ga.l,ad.l,t);return this.setHSL(n,s,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,s=this.b,o=e.elements;return this.r=o[0]*t+o[3]*n+o[6]*s,this.g=o[1]*t+o[4]*n+o[7]*s,this.b=o[2]*t+o[5]*n+o[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const hi=new jt;jt.NAMES=NE;let mR=0,Eh=class extends wo{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:mR++}),this.uuid=Nu(),this.name="",this.type="Material",this.blending=Ca,this.side=js,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=bu,this.blendDst=Cu,this.blendEquation=po,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new jt(0,0,0),this.blendAlpha=0,this.depthFunc=oh,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=ey,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ul,this.stencilZFail=ul,this.stencilZPass=ul,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(n):s&&s.isVector3&&n&&n.isVector3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Ca&&(n.blending=this.blending),this.side!==js&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==bu&&(n.blendSrc=this.blendSrc),this.blendDst!==Cu&&(n.blendDst=this.blendDst),this.blendEquation!==po&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==oh&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==ey&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==ul&&(n.stencilFail=this.stencilFail),this.stencilZFail!==ul&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==ul&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function s(o){const c=[];for(const u in o){const f=o[u];delete f.metadata,c.push(f)}return c}if(t){const o=s(e.textures),c=s(e.images);o.length>0&&(n.textures=o),c.length>0&&(n.images=c)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const s=t.length;n=new Array(s);for(let o=0;o!==s;++o)n[o]=t[o].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}},bo=class extends Eh{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new jt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=mE,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}};const Pr=gR();function gR(){const r=new ArrayBuffer(4),e=new Float32Array(r),t=new Uint32Array(r),n=new Uint32Array(512),s=new Uint32Array(512);for(let f=0;f<256;++f){const d=f-127;d<-27?(n[f]=0,n[f|256]=32768,s[f]=24,s[f|256]=24):d<-14?(n[f]=1024>>-d-14,n[f|256]=1024>>-d-14|32768,s[f]=-d-1,s[f|256]=-d-1):d<=15?(n[f]=d+15<<10,n[f|256]=d+15<<10|32768,s[f]=13,s[f|256]=13):d<128?(n[f]=31744,n[f|256]=64512,s[f]=24,s[f|256]=24):(n[f]=31744,n[f|256]=64512,s[f]=13,s[f|256]=13)}const o=new Uint32Array(2048),c=new Uint32Array(64),u=new Uint32Array(64);for(let f=1;f<1024;++f){let d=f<<13,p=0;for(;(d&8388608)===0;)d<<=1,p-=8388608;d&=-8388609,p+=947912704,o[f]=d|p}for(let f=1024;f<2048;++f)o[f]=939524096+(f-1024<<13);for(let f=1;f<31;++f)c[f]=f<<23;c[31]=1199570944,c[32]=2147483648;for(let f=33;f<63;++f)c[f]=2147483648+(f-32<<23);c[63]=3347054592;for(let f=1;f<64;++f)f!==32&&(u[f]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:s,mantissaTable:o,exponentTable:c,offsetTable:u}}function _R(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=gi(r,-65504,65504),Pr.floatView[0]=r;const e=Pr.uint32View[0],t=e>>23&511;return Pr.baseTable[t]+((e&8388607)>>Pr.shiftTable[t])}function vR(r){const e=r>>10;return Pr.uint32View[0]=Pr.mantissaTable[Pr.offsetTable[e]+(r&1023)]+Pr.exponentTable[e],Pr.floatView[0]}const wu={toHalfFloat:_R,fromHalfFloat:vR},Fn=new ne,od=new vt;let ms=class{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=ty,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=Xs,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}get updateRange(){return console.warn("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."),this._updateRange}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,o=this.itemSize;s<o;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)od.fromBufferAttribute(this,t),od.applyMatrix3(e),this.setXY(t,od.x,od.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Fn.fromBufferAttribute(this,t),Fn.applyMatrix3(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Fn.fromBufferAttribute(this,t),Fn.applyMatrix4(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Fn.fromBufferAttribute(this,t),Fn.applyNormalMatrix(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Fn.fromBufferAttribute(this,t),Fn.transformDirection(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=lu(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Ri(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=lu(t,this.array)),t}setX(e,t){return this.normalized&&(t=Ri(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=lu(t,this.array)),t}setY(e,t){return this.normalized&&(t=Ri(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=lu(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Ri(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=lu(t,this.array)),t}setW(e,t){return this.normalized&&(t=Ri(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Ri(t,this.array),n=Ri(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=Ri(t,this.array),n=Ri(n,this.array),s=Ri(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.normalized&&(t=Ri(t,this.array),n=Ri(n,this.array),s=Ri(s,this.array),o=Ri(o,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==ty&&(e.usage=this.usage),e}},OE=class extends ms{constructor(e,t,n){super(new Uint16Array(e),t,n)}},zE=class extends ms{constructor(e,t,n){super(new Uint32Array(e),t,n)}},ji=class extends ms{constructor(e,t,n){super(new Float32Array(e),t,n)}},SR=0;const ls=new Bt,ag=new yi,Sl=new ne,Xi=new qs,du=new qs,Jn=new ne;let Js=class HE extends wo{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:SR++}),this.uuid=Nu(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(CE(e)?zE:OE)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const o=new Pt().getNormalMatrix(e);n.applyNormalMatrix(o),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return ls.makeRotationFromQuaternion(e),this.applyMatrix4(ls),this}rotateX(e){return ls.makeRotationX(e),this.applyMatrix4(ls),this}rotateY(e){return ls.makeRotationY(e),this.applyMatrix4(ls),this}rotateZ(e){return ls.makeRotationZ(e),this.applyMatrix4(ls),this}translate(e,t,n){return ls.makeTranslation(e,t,n),this.applyMatrix4(ls),this}scale(e,t,n){return ls.makeScale(e,t,n),this.applyMatrix4(ls),this}lookAt(e){return ag.lookAt(e),ag.updateMatrix(),this.applyMatrix4(ag.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Sl).negate(),this.translate(Sl.x,Sl.y,Sl.z),this}setFromPoints(e){const t=[];for(let n=0,s=e.length;n<s;n++){const o=e[n];t.push(o.x,o.y,o.z||0)}return this.setAttribute("position",new ji(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new qs);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new ne(-1/0,-1/0,-1/0),new ne(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,s=t.length;n<s;n++){const o=t[n];Xi.setFromBufferAttribute(o),this.morphTargetsRelative?(Jn.addVectors(this.boundingBox.min,Xi.min),this.boundingBox.expandByPoint(Jn),Jn.addVectors(this.boundingBox.max,Xi.max),this.boundingBox.expandByPoint(Jn)):(this.boundingBox.expandByPoint(Xi.min),this.boundingBox.expandByPoint(Xi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new l_);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new ne,1/0);return}if(e){const n=this.boundingSphere.center;if(Xi.setFromBufferAttribute(e),t)for(let o=0,c=t.length;o<c;o++){const u=t[o];du.setFromBufferAttribute(u),this.morphTargetsRelative?(Jn.addVectors(Xi.min,du.min),Xi.expandByPoint(Jn),Jn.addVectors(Xi.max,du.max),Xi.expandByPoint(Jn)):(Xi.expandByPoint(du.min),Xi.expandByPoint(du.max))}Xi.getCenter(n);let s=0;for(let o=0,c=e.count;o<c;o++)Jn.fromBufferAttribute(e,o),s=Math.max(s,n.distanceToSquared(Jn));if(t)for(let o=0,c=t.length;o<c;o++){const u=t[o],f=this.morphTargetsRelative;for(let d=0,p=u.count;d<p;d++)Jn.fromBufferAttribute(u,d),f&&(Sl.fromBufferAttribute(e,d),Jn.add(Sl)),s=Math.max(s,n.distanceToSquared(Jn))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,s=t.position.array,o=t.normal.array,c=t.uv.array,u=s.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ms(new Float32Array(4*u),4));const f=this.getAttribute("tangent").array,d=[],p=[];for(let T=0;T<u;T++)d[T]=new ne,p[T]=new ne;const m=new ne,g=new ne,v=new ne,A=new vt,y=new vt,S=new vt,_=new ne,b=new ne;function E(T,O,X){m.fromArray(s,T*3),g.fromArray(s,O*3),v.fromArray(s,X*3),A.fromArray(c,T*2),y.fromArray(c,O*2),S.fromArray(c,X*2),g.sub(m),v.sub(m),y.sub(A),S.sub(A);const $=1/(y.x*S.y-S.x*y.y);isFinite($)&&(_.copy(g).multiplyScalar(S.y).addScaledVector(v,-y.y).multiplyScalar($),b.copy(v).multiplyScalar(y.x).addScaledVector(g,-S.x).multiplyScalar($),d[T].add(_),d[O].add(_),d[X].add(_),p[T].add(b),p[O].add(b),p[X].add(b))}let R=this.groups;R.length===0&&(R=[{start:0,count:n.length}]);for(let T=0,O=R.length;T<O;++T){const X=R[T],$=X.start,z=X.count;for(let k=$,I=$+z;k<I;k+=3)E(n[k+0],n[k+1],n[k+2])}const D=new ne,L=new ne,w=new ne,B=new ne;function C(T){w.fromArray(o,T*3),B.copy(w);const O=d[T];D.copy(O),D.sub(w.multiplyScalar(w.dot(O))).normalize(),L.crossVectors(B,O);const $=L.dot(p[T])<0?-1:1;f[T*4]=D.x,f[T*4+1]=D.y,f[T*4+2]=D.z,f[T*4+3]=$}for(let T=0,O=R.length;T<O;++T){const X=R[T],$=X.start,z=X.count;for(let k=$,I=$+z;k<I;k+=3)C(n[k+0]),C(n[k+1]),C(n[k+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new ms(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let g=0,v=n.count;g<v;g++)n.setXYZ(g,0,0,0);const s=new ne,o=new ne,c=new ne,u=new ne,f=new ne,d=new ne,p=new ne,m=new ne;if(e)for(let g=0,v=e.count;g<v;g+=3){const A=e.getX(g+0),y=e.getX(g+1),S=e.getX(g+2);s.fromBufferAttribute(t,A),o.fromBufferAttribute(t,y),c.fromBufferAttribute(t,S),p.subVectors(c,o),m.subVectors(s,o),p.cross(m),u.fromBufferAttribute(n,A),f.fromBufferAttribute(n,y),d.fromBufferAttribute(n,S),u.add(p),f.add(p),d.add(p),n.setXYZ(A,u.x,u.y,u.z),n.setXYZ(y,f.x,f.y,f.z),n.setXYZ(S,d.x,d.y,d.z)}else for(let g=0,v=t.count;g<v;g+=3)s.fromBufferAttribute(t,g+0),o.fromBufferAttribute(t,g+1),c.fromBufferAttribute(t,g+2),p.subVectors(c,o),m.subVectors(s,o),p.cross(m),n.setXYZ(g+0,p.x,p.y,p.z),n.setXYZ(g+1,p.x,p.y,p.z),n.setXYZ(g+2,p.x,p.y,p.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Jn.fromBufferAttribute(e,t),Jn.normalize(),e.setXYZ(t,Jn.x,Jn.y,Jn.z)}toNonIndexed(){function e(u,f){const d=u.array,p=u.itemSize,m=u.normalized,g=new d.constructor(f.length*p);let v=0,A=0;for(let y=0,S=f.length;y<S;y++){u.isInterleavedBufferAttribute?v=f[y]*u.data.stride+u.offset:v=f[y]*p;for(let _=0;_<p;_++)g[A++]=d[v++]}return new ms(g,p,m)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new HE,n=this.index.array,s=this.attributes;for(const u in s){const f=s[u],d=e(f,n);t.setAttribute(u,d)}const o=this.morphAttributes;for(const u in o){const f=[],d=o[u];for(let p=0,m=d.length;p<m;p++){const g=d[p],v=e(g,n);f.push(v)}t.morphAttributes[u]=f}t.morphTargetsRelative=this.morphTargetsRelative;const c=this.groups;for(let u=0,f=c.length;u<f;u++){const d=c[u];t.addGroup(d.start,d.count,d.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const f=this.parameters;for(const d in f)f[d]!==void 0&&(e[d]=f[d]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const f in n){const d=n[f];e.data.attributes[f]=d.toJSON(e.data)}const s={};let o=!1;for(const f in this.morphAttributes){const d=this.morphAttributes[f],p=[];for(let m=0,g=d.length;m<g;m++){const v=d[m];p.push(v.toJSON(e.data))}p.length>0&&(s[f]=p,o=!0)}o&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const c=this.groups;c.length>0&&(e.data.groups=JSON.parse(JSON.stringify(c)));const u=this.boundingSphere;return u!==null&&(e.data.boundingSphere={center:u.center.toArray(),radius:u.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const s=e.attributes;for(const d in s){const p=s[d];this.setAttribute(d,p.clone(t))}const o=e.morphAttributes;for(const d in o){const p=[],m=o[d];for(let g=0,v=m.length;g<v;g++)p.push(m[g].clone(t));this.morphAttributes[d]=p}this.morphTargetsRelative=e.morphTargetsRelative;const c=e.groups;for(let d=0,p=c.length;d<p;d++){const m=c[d];this.addGroup(m.start,m.count,m.materialIndex)}const u=e.boundingBox;u!==null&&(this.boundingBox=u.clone());const f=e.boundingSphere;return f!==null&&(this.boundingSphere=f.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}};const my=new Bt,eo=new UE,ld=new l_,gy=new ne,xl=new ne,Al=new ne,yl=new ne,og=new ne,cd=new ne,ud=new vt,fd=new vt,dd=new vt,_y=new ne,vy=new ne,Sy=new ne,hd=new ne,pd=new ne;let On=class extends yi{constructor(e=new Js,t=new bo){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,c=s.length;o<c;o++){const u=s[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[u]=o}}}}getVertexPosition(e,t){const n=this.geometry,s=n.attributes.position,o=n.morphAttributes.position,c=n.morphTargetsRelative;t.fromBufferAttribute(s,e);const u=this.morphTargetInfluences;if(o&&u){cd.set(0,0,0);for(let f=0,d=o.length;f<d;f++){const p=u[f],m=o[f];p!==0&&(og.fromBufferAttribute(m,e),c?cd.addScaledVector(og,p):cd.addScaledVector(og.sub(t),p))}t.add(cd)}return t}raycast(e,t){const n=this.geometry,s=this.material,o=this.matrixWorld;s!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),ld.copy(n.boundingSphere),ld.applyMatrix4(o),eo.copy(e.ray).recast(e.near),!(ld.containsPoint(eo.origin)===!1&&(eo.intersectSphere(ld,gy)===null||eo.origin.distanceToSquared(gy)>(e.far-e.near)**2))&&(my.copy(o).invert(),eo.copy(e.ray).applyMatrix4(my),!(n.boundingBox!==null&&eo.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,eo)))}_computeIntersections(e,t,n){let s;const o=this.geometry,c=this.material,u=o.index,f=o.attributes.position,d=o.attributes.uv,p=o.attributes.uv1,m=o.attributes.normal,g=o.groups,v=o.drawRange;if(u!==null)if(Array.isArray(c))for(let A=0,y=g.length;A<y;A++){const S=g[A],_=c[S.materialIndex],b=Math.max(S.start,v.start),E=Math.min(u.count,Math.min(S.start+S.count,v.start+v.count));for(let R=b,D=E;R<D;R+=3){const L=u.getX(R),w=u.getX(R+1),B=u.getX(R+2);s=md(this,_,e,n,d,p,m,L,w,B),s&&(s.faceIndex=Math.floor(R/3),s.face.materialIndex=S.materialIndex,t.push(s))}}else{const A=Math.max(0,v.start),y=Math.min(u.count,v.start+v.count);for(let S=A,_=y;S<_;S+=3){const b=u.getX(S),E=u.getX(S+1),R=u.getX(S+2);s=md(this,c,e,n,d,p,m,b,E,R),s&&(s.faceIndex=Math.floor(S/3),t.push(s))}}else if(f!==void 0)if(Array.isArray(c))for(let A=0,y=g.length;A<y;A++){const S=g[A],_=c[S.materialIndex],b=Math.max(S.start,v.start),E=Math.min(f.count,Math.min(S.start+S.count,v.start+v.count));for(let R=b,D=E;R<D;R+=3){const L=R,w=R+1,B=R+2;s=md(this,_,e,n,d,p,m,L,w,B),s&&(s.faceIndex=Math.floor(R/3),s.face.materialIndex=S.materialIndex,t.push(s))}}else{const A=Math.max(0,v.start),y=Math.min(f.count,v.start+v.count);for(let S=A,_=y;S<_;S+=3){const b=S,E=S+1,R=S+2;s=md(this,c,e,n,d,p,m,b,E,R),s&&(s.faceIndex=Math.floor(S/3),t.push(s))}}}};function xR(r,e,t,n,s,o,c,u){let f;if(e.side===Ii?f=n.intersectTriangle(c,o,s,!0,u):f=n.intersectTriangle(s,o,c,e.side===js,u),f===null)return null;pd.copy(u),pd.applyMatrix4(r.matrixWorld);const d=t.ray.origin.distanceTo(pd);return d<t.near||d>t.far?null:{distance:d,point:pd.clone(),object:r}}function md(r,e,t,n,s,o,c,u,f,d){r.getVertexPosition(u,xl),r.getVertexPosition(f,Al),r.getVertexPosition(d,yl);const p=xR(r,e,t,n,xl,Al,yl,hd);if(p){s&&(ud.fromBufferAttribute(s,u),fd.fromBufferAttribute(s,f),dd.fromBufferAttribute(s,d),p.uv=rd.getInterpolation(hd,xl,Al,yl,ud,fd,dd,new vt)),o&&(ud.fromBufferAttribute(o,u),fd.fromBufferAttribute(o,f),dd.fromBufferAttribute(o,d),p.uv1=rd.getInterpolation(hd,xl,Al,yl,ud,fd,dd,new vt),p.uv2=p.uv1),c&&(_y.fromBufferAttribute(c,u),vy.fromBufferAttribute(c,f),Sy.fromBufferAttribute(c,d),p.normal=rd.getInterpolation(hd,xl,Al,yl,_y,vy,Sy,new ne),p.normal.dot(n.direction)>0&&p.normal.multiplyScalar(-1));const m={a:u,b:f,c:d,normal:new ne,materialIndex:0};rd.getNormal(xl,Al,yl,m.normal),p.face=m}return p}let Th=class GE extends Js{constructor(e=1,t=1,n=1,s=1,o=1,c=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:s,heightSegments:o,depthSegments:c};const u=this;s=Math.floor(s),o=Math.floor(o),c=Math.floor(c);const f=[],d=[],p=[],m=[];let g=0,v=0;A("z","y","x",-1,-1,n,t,e,c,o,0),A("z","y","x",1,-1,n,t,-e,c,o,1),A("x","z","y",1,1,e,n,t,s,c,2),A("x","z","y",1,-1,e,n,-t,s,c,3),A("x","y","z",1,-1,e,t,n,s,o,4),A("x","y","z",-1,-1,e,t,-n,s,o,5),this.setIndex(f),this.setAttribute("position",new ji(d,3)),this.setAttribute("normal",new ji(p,3)),this.setAttribute("uv",new ji(m,2));function A(y,S,_,b,E,R,D,L,w,B,C){const T=R/w,O=D/B,X=R/2,$=D/2,z=L/2,k=w+1,I=B+1;let Y=0,q=0;const J=new ne;for(let F=0;F<I;F++){const ee=F*O-$;for(let ce=0;ce<k;ce++){const ie=ce*T-X;J[y]=ie*b,J[S]=ee*E,J[_]=z,d.push(J.x,J.y,J.z),J[y]=0,J[S]=0,J[_]=L>0?1:-1,p.push(J.x,J.y,J.z),m.push(ce/w),m.push(1-F/B),Y+=1}}for(let F=0;F<B;F++)for(let ee=0;ee<w;ee++){const ce=g+ee+k*F,ie=g+ee+k*(F+1),j=g+(ee+1)+k*(F+1),ue=g+(ee+1)+k*F;f.push(ce,ie,ue),f.push(ie,j,ue),q+=6}u.addGroup(v,q,C),v+=q,g+=Y}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new GE(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}};function ic(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const s=r[t][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=s.clone():Array.isArray(s)?e[t][n]=s.slice():e[t][n]=s}}return e}function vi(r){const e={};for(let t=0;t<r.length;t++){const n=ic(r[t]);for(const s in n)e[s]=n[s]}return e}function AR(r){const e=[];for(let t=0;t<r.length;t++)e.push(r[t].clone());return e}function VE(r){return r.getRenderTarget()===null?r.outputColorSpace:dn.workingColorSpace}const yR={clone:ic,merge:vi};var MR=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,ER=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;let gs=class extends Eh{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=MR,this.fragmentShader=ER,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1,clipCullDistance:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=ic(e.uniforms),this.uniformsGroups=AR(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const c=this.uniforms[s].value;c&&c.isTexture?t.uniforms[s]={type:"t",value:c.toJSON(e).uuid}:c&&c.isColor?t.uniforms[s]={type:"c",value:c.getHex()}:c&&c.isVector2?t.uniforms[s]={type:"v2",value:c.toArray()}:c&&c.isVector3?t.uniforms[s]={type:"v3",value:c.toArray()}:c&&c.isVector4?t.uniforms[s]={type:"v4",value:c.toArray()}:c&&c.isMatrix3?t.uniforms[s]={type:"m3",value:c.toArray()}:c&&c.isMatrix4?t.uniforms[s]={type:"m4",value:c.toArray()}:t.uniforms[s]={value:c}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const s in this.extensions)this.extensions[s]===!0&&(n[s]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}},kE=class extends yi{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Bt,this.projectionMatrix=new Bt,this.projectionMatrixInverse=new Bt,this.coordinateSystem=Br}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}},ds=class extends kE{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=a0*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Kd*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return a0*2*Math.atan(Math.tan(Kd*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,s,o,c){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Kd*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,o=-.5*s;const c=this.view;if(this.view!==null&&this.view.enabled){const f=c.fullWidth,d=c.fullHeight;o+=c.offsetX*s/f,t-=c.offsetY*n/d,s*=c.width/f,n*=c.height/d}const u=this.filmOffset;u!==0&&(o+=e*u/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}};const Ml=-90,El=1;let TR=class extends yi{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new ds(Ml,El,e,t);s.layers=this.layers,this.add(s);const o=new ds(Ml,El,e,t);o.layers=this.layers,this.add(o);const c=new ds(Ml,El,e,t);c.layers=this.layers,this.add(c);const u=new ds(Ml,El,e,t);u.layers=this.layers,this.add(u);const f=new ds(Ml,El,e,t);f.layers=this.layers,this.add(f);const d=new ds(Ml,El,e,t);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,s,o,c,u,f]=t;for(const d of t)this.remove(d);if(e===Br)n.up.set(0,1,0),n.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),o.up.set(0,0,-1),o.lookAt(0,1,0),c.up.set(0,0,1),c.lookAt(0,-1,0),u.up.set(0,1,0),u.lookAt(0,0,1),f.up.set(0,1,0),f.lookAt(0,0,-1);else if(e===fh)n.up.set(0,-1,0),n.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),o.up.set(0,0,1),o.lookAt(0,1,0),c.up.set(0,0,-1),c.lookAt(0,-1,0),u.up.set(0,-1,0),u.lookAt(0,0,1),f.up.set(0,-1,0),f.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const d of t)this.add(d),d.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[o,c,u,f,d,p]=this.children,m=e.getRenderTarget(),g=e.getActiveCubeFace(),v=e.getActiveMipmapLevel(),A=e.xr.enabled;e.xr.enabled=!1;const y=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,s),e.render(t,o),e.setRenderTarget(n,1,s),e.render(t,c),e.setRenderTarget(n,2,s),e.render(t,u),e.setRenderTarget(n,3,s),e.render(t,f),e.setRenderTarget(n,4,s),e.render(t,d),n.texture.generateMipmaps=y,e.setRenderTarget(n,5,s),e.render(t,p),e.setRenderTarget(m,g,v),e.xr.enabled=A,n.texture.needsPMREMUpdate=!0}},WE=class extends Zs{constructor(e,t,n,s,o,c,u,f,d,p){e=e!==void 0?e:[],t=t!==void 0?t:Jl,super(e,t,n,s,o,c,u,f,d,p),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}},bR=class extends Pa{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];t.encoding!==void 0&&(xu("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=t.encoding===Eo?ci:ps),this.texture=new WE(s,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:fs}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new Th(5,5,5),o=new gs({name:"CubemapFromEquirect",uniforms:ic(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Ii,blending:ba});o.uniforms.tEquirect.value=t;const c=new On(s,o),u=t.minFilter;return t.minFilter===Ru&&(t.minFilter=fs),new TR(1,10,this).update(e,c),t.minFilter=u,c.geometry.dispose(),c.material.dispose(),this}clear(e,t,n,s){const o=e.getRenderTarget();for(let c=0;c<6;c++)e.setRenderTarget(this,c),e.clear(t,n,s);e.setRenderTarget(o)}};const lg=new ne,CR=new ne,RR=new Pt;let Ea=class{constructor(e=new ne(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=lg.subVectors(n,t).cross(CR.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(lg),s=this.normal.dot(n);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const o=-(e.start.dot(this.normal)+this.constant)/s;return o<0||o>1?null:t.copy(e.start).addScaledVector(n,o)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||RR.getNormalMatrix(e),s=this.coplanarPoint(lg).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}};const to=new l_,gd=new ne;let XE=class{constructor(e=new Ea,t=new Ea,n=new Ea,s=new Ea,o=new Ea,c=new Ea){this.planes=[e,t,n,s,o,c]}set(e,t,n,s,o,c){const u=this.planes;return u[0].copy(e),u[1].copy(t),u[2].copy(n),u[3].copy(s),u[4].copy(o),u[5].copy(c),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Br){const n=this.planes,s=e.elements,o=s[0],c=s[1],u=s[2],f=s[3],d=s[4],p=s[5],m=s[6],g=s[7],v=s[8],A=s[9],y=s[10],S=s[11],_=s[12],b=s[13],E=s[14],R=s[15];if(n[0].setComponents(f-o,g-d,S-v,R-_).normalize(),n[1].setComponents(f+o,g+d,S+v,R+_).normalize(),n[2].setComponents(f+c,g+p,S+A,R+b).normalize(),n[3].setComponents(f-c,g-p,S-A,R-b).normalize(),n[4].setComponents(f-u,g-m,S-y,R-E).normalize(),t===Br)n[5].setComponents(f+u,g+m,S+y,R+E).normalize();else if(t===fh)n[5].setComponents(u,m,y,E).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),to.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),to.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(to)}intersectsSprite(e){return to.center.set(0,0,0),to.radius=.7071067811865476,to.applyMatrix4(e.matrixWorld),this.intersectsSphere(to)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let o=0;o<6;o++)if(t[o].distanceToPoint(n)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const s=t[n];if(gd.x=s.normal.x>0?e.max.x:e.min.x,gd.y=s.normal.y>0?e.max.y:e.min.y,gd.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(gd)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};function qE(){let r=null,e=!1,t=null,n=null;function s(o,c){t(o,c),n=r.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(s),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(o){t=o},setContext:function(o){r=o}}}function wR(r,e){const t=e.isWebGL2,n=new WeakMap;function s(d,p){const m=d.array,g=d.usage,v=m.byteLength,A=r.createBuffer();r.bindBuffer(p,A),r.bufferData(p,m,g),d.onUploadCallback();let y;if(m instanceof Float32Array)y=r.FLOAT;else if(m instanceof Uint16Array)if(d.isFloat16BufferAttribute)if(t)y=r.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else y=r.UNSIGNED_SHORT;else if(m instanceof Int16Array)y=r.SHORT;else if(m instanceof Uint32Array)y=r.UNSIGNED_INT;else if(m instanceof Int32Array)y=r.INT;else if(m instanceof Int8Array)y=r.BYTE;else if(m instanceof Uint8Array)y=r.UNSIGNED_BYTE;else if(m instanceof Uint8ClampedArray)y=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+m);return{buffer:A,type:y,bytesPerElement:m.BYTES_PER_ELEMENT,version:d.version,size:v}}function o(d,p,m){const g=p.array,v=p._updateRange,A=p.updateRanges;if(r.bindBuffer(m,d),v.count===-1&&A.length===0&&r.bufferSubData(m,0,g),A.length!==0){for(let y=0,S=A.length;y<S;y++){const _=A[y];t?r.bufferSubData(m,_.start*g.BYTES_PER_ELEMENT,g,_.start,_.count):r.bufferSubData(m,_.start*g.BYTES_PER_ELEMENT,g.subarray(_.start,_.start+_.count))}p.clearUpdateRanges()}v.count!==-1&&(t?r.bufferSubData(m,v.offset*g.BYTES_PER_ELEMENT,g,v.offset,v.count):r.bufferSubData(m,v.offset*g.BYTES_PER_ELEMENT,g.subarray(v.offset,v.offset+v.count)),v.count=-1),p.onUploadCallback()}function c(d){return d.isInterleavedBufferAttribute&&(d=d.data),n.get(d)}function u(d){d.isInterleavedBufferAttribute&&(d=d.data);const p=n.get(d);p&&(r.deleteBuffer(p.buffer),n.delete(d))}function f(d,p){if(d.isGLBufferAttribute){const g=n.get(d);(!g||g.version<d.version)&&n.set(d,{buffer:d.buffer,type:d.type,bytesPerElement:d.elementSize,version:d.version});return}d.isInterleavedBufferAttribute&&(d=d.data);const m=n.get(d);if(m===void 0)n.set(d,s(d,p));else if(m.version<d.version){if(m.size!==d.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");o(m.buffer,d,p),m.version=d.version}}return{get:c,remove:u,update:f}}let c0=class YE extends Js{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const o=e/2,c=t/2,u=Math.floor(n),f=Math.floor(s),d=u+1,p=f+1,m=e/u,g=t/f,v=[],A=[],y=[],S=[];for(let _=0;_<p;_++){const b=_*g-c;for(let E=0;E<d;E++){const R=E*m-o;A.push(R,-b,0),y.push(0,0,1),S.push(E/u),S.push(1-_/f)}}for(let _=0;_<f;_++)for(let b=0;b<u;b++){const E=b+d*_,R=b+d*(_+1),D=b+1+d*(_+1),L=b+1+d*_;v.push(E,R,L),v.push(R,D,L)}this.setIndex(v),this.setAttribute("position",new ji(A,3)),this.setAttribute("normal",new ji(y,3)),this.setAttribute("uv",new ji(S,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new YE(e.width,e.height,e.widthSegments,e.heightSegments)}};var DR=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,LR=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,PR=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,UR=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,IR=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,BR=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,FR=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,NR=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,OR=`#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,zR=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`,HR=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,GR=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,VR=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,kR=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,WR=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,XR=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,qR=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,YR=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,$R=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,QR=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,KR=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,jR=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,ZR=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,JR=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,ew=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,tw=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,nw=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,iw=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,sw=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,rw=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,aw="gl_FragColor = linearToOutputTexel( gl_FragColor );",ow=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`,lw=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,cw=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,uw=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,fw=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,dw=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,hw=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,pw=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,mw=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,gw=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,_w=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,vw=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Sw=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,xw=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Aw=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,yw=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Mw=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,Ew=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Tw=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,bw=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Cw=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Rw=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,ww=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Dw=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Lw=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Pw=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Uw=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Iw=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Bw=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Fw=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Nw=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Ow=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,zw=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Hw=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Gw=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Vw=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,kw=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,Ww=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,Xw=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,qw=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,Yw=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,$w=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Qw=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Kw=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,jw=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Zw=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,Jw=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,e2=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,t2=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,n2=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,i2=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,s2=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,r2=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,a2=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,o2=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,l2=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,c2=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,u2=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,f2=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,d2=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,h2=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,p2=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,m2=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,g2=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,_2=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,v2=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,S2=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,x2=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,A2=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,y2=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color *= toneMappingExposure;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	return color;
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,M2=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,E2=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,T2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,b2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,C2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,R2=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const w2=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,D2=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,L2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,P2=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,U2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,I2=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,B2=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,F2=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,N2=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,O2=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,z2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,H2=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,G2=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,V2=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,k2=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,W2=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,X2=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,q2=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Y2=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,$2=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Q2=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,K2=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,j2=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Z2=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,J2=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,eD=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,tD=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,nD=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,iD=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,sD=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rD=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,aD=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,oD=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,lD=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Ft={alphahash_fragment:DR,alphahash_pars_fragment:LR,alphamap_fragment:PR,alphamap_pars_fragment:UR,alphatest_fragment:IR,alphatest_pars_fragment:BR,aomap_fragment:FR,aomap_pars_fragment:NR,batching_pars_vertex:OR,batching_vertex:zR,begin_vertex:HR,beginnormal_vertex:GR,bsdfs:VR,iridescence_fragment:kR,bumpmap_pars_fragment:WR,clipping_planes_fragment:XR,clipping_planes_pars_fragment:qR,clipping_planes_pars_vertex:YR,clipping_planes_vertex:$R,color_fragment:QR,color_pars_fragment:KR,color_pars_vertex:jR,color_vertex:ZR,common:JR,cube_uv_reflection_fragment:ew,defaultnormal_vertex:tw,displacementmap_pars_vertex:nw,displacementmap_vertex:iw,emissivemap_fragment:sw,emissivemap_pars_fragment:rw,colorspace_fragment:aw,colorspace_pars_fragment:ow,envmap_fragment:lw,envmap_common_pars_fragment:cw,envmap_pars_fragment:uw,envmap_pars_vertex:fw,envmap_physical_pars_fragment:Mw,envmap_vertex:dw,fog_vertex:hw,fog_pars_vertex:pw,fog_fragment:mw,fog_pars_fragment:gw,gradientmap_pars_fragment:_w,lightmap_fragment:vw,lightmap_pars_fragment:Sw,lights_lambert_fragment:xw,lights_lambert_pars_fragment:Aw,lights_pars_begin:yw,lights_toon_fragment:Ew,lights_toon_pars_fragment:Tw,lights_phong_fragment:bw,lights_phong_pars_fragment:Cw,lights_physical_fragment:Rw,lights_physical_pars_fragment:ww,lights_fragment_begin:Dw,lights_fragment_maps:Lw,lights_fragment_end:Pw,logdepthbuf_fragment:Uw,logdepthbuf_pars_fragment:Iw,logdepthbuf_pars_vertex:Bw,logdepthbuf_vertex:Fw,map_fragment:Nw,map_pars_fragment:Ow,map_particle_fragment:zw,map_particle_pars_fragment:Hw,metalnessmap_fragment:Gw,metalnessmap_pars_fragment:Vw,morphcolor_vertex:kw,morphnormal_vertex:Ww,morphtarget_pars_vertex:Xw,morphtarget_vertex:qw,normal_fragment_begin:Yw,normal_fragment_maps:$w,normal_pars_fragment:Qw,normal_pars_vertex:Kw,normal_vertex:jw,normalmap_pars_fragment:Zw,clearcoat_normal_fragment_begin:Jw,clearcoat_normal_fragment_maps:e2,clearcoat_pars_fragment:t2,iridescence_pars_fragment:n2,opaque_fragment:i2,packing:s2,premultiplied_alpha_fragment:r2,project_vertex:a2,dithering_fragment:o2,dithering_pars_fragment:l2,roughnessmap_fragment:c2,roughnessmap_pars_fragment:u2,shadowmap_pars_fragment:f2,shadowmap_pars_vertex:d2,shadowmap_vertex:h2,shadowmask_pars_fragment:p2,skinbase_vertex:m2,skinning_pars_vertex:g2,skinning_vertex:_2,skinnormal_vertex:v2,specularmap_fragment:S2,specularmap_pars_fragment:x2,tonemapping_fragment:A2,tonemapping_pars_fragment:y2,transmission_fragment:M2,transmission_pars_fragment:E2,uv_pars_fragment:T2,uv_pars_vertex:b2,uv_vertex:C2,worldpos_vertex:R2,background_vert:w2,background_frag:D2,backgroundCube_vert:L2,backgroundCube_frag:P2,cube_vert:U2,cube_frag:I2,depth_vert:B2,depth_frag:F2,distanceRGBA_vert:N2,distanceRGBA_frag:O2,equirect_vert:z2,equirect_frag:H2,linedashed_vert:G2,linedashed_frag:V2,meshbasic_vert:k2,meshbasic_frag:W2,meshlambert_vert:X2,meshlambert_frag:q2,meshmatcap_vert:Y2,meshmatcap_frag:$2,meshnormal_vert:Q2,meshnormal_frag:K2,meshphong_vert:j2,meshphong_frag:Z2,meshphysical_vert:J2,meshphysical_frag:eD,meshtoon_vert:tD,meshtoon_frag:nD,points_vert:iD,points_frag:sD,shadow_vert:rD,shadow_frag:aD,sprite_vert:oD,sprite_frag:lD},ut={common:{diffuse:{value:new jt(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Pt},alphaMap:{value:null},alphaMapTransform:{value:new Pt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Pt}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Pt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Pt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Pt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Pt},normalScale:{value:new vt(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Pt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Pt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Pt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Pt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new jt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new jt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Pt},alphaTest:{value:0},uvTransform:{value:new Pt}},sprite:{diffuse:{value:new jt(16777215)},opacity:{value:1},center:{value:new vt(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Pt},alphaMap:{value:null},alphaMapTransform:{value:new Pt},alphaTest:{value:0}}},ks={basic:{uniforms:vi([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.fog]),vertexShader:Ft.meshbasic_vert,fragmentShader:Ft.meshbasic_frag},lambert:{uniforms:vi([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,ut.lights,{emissive:{value:new jt(0)}}]),vertexShader:Ft.meshlambert_vert,fragmentShader:Ft.meshlambert_frag},phong:{uniforms:vi([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,ut.lights,{emissive:{value:new jt(0)},specular:{value:new jt(1118481)},shininess:{value:30}}]),vertexShader:Ft.meshphong_vert,fragmentShader:Ft.meshphong_frag},standard:{uniforms:vi([ut.common,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.roughnessmap,ut.metalnessmap,ut.fog,ut.lights,{emissive:{value:new jt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ft.meshphysical_vert,fragmentShader:Ft.meshphysical_frag},toon:{uniforms:vi([ut.common,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.gradientmap,ut.fog,ut.lights,{emissive:{value:new jt(0)}}]),vertexShader:Ft.meshtoon_vert,fragmentShader:Ft.meshtoon_frag},matcap:{uniforms:vi([ut.common,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,{matcap:{value:null}}]),vertexShader:Ft.meshmatcap_vert,fragmentShader:Ft.meshmatcap_frag},points:{uniforms:vi([ut.points,ut.fog]),vertexShader:Ft.points_vert,fragmentShader:Ft.points_frag},dashed:{uniforms:vi([ut.common,ut.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ft.linedashed_vert,fragmentShader:Ft.linedashed_frag},depth:{uniforms:vi([ut.common,ut.displacementmap]),vertexShader:Ft.depth_vert,fragmentShader:Ft.depth_frag},normal:{uniforms:vi([ut.common,ut.bumpmap,ut.normalmap,ut.displacementmap,{opacity:{value:1}}]),vertexShader:Ft.meshnormal_vert,fragmentShader:Ft.meshnormal_frag},sprite:{uniforms:vi([ut.sprite,ut.fog]),vertexShader:Ft.sprite_vert,fragmentShader:Ft.sprite_frag},background:{uniforms:{uvTransform:{value:new Pt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ft.background_vert,fragmentShader:Ft.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Ft.backgroundCube_vert,fragmentShader:Ft.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ft.cube_vert,fragmentShader:Ft.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ft.equirect_vert,fragmentShader:Ft.equirect_frag},distanceRGBA:{uniforms:vi([ut.common,ut.displacementmap,{referencePosition:{value:new ne},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ft.distanceRGBA_vert,fragmentShader:Ft.distanceRGBA_frag},shadow:{uniforms:vi([ut.lights,ut.fog,{color:{value:new jt(0)},opacity:{value:1}}]),vertexShader:Ft.shadow_vert,fragmentShader:Ft.shadow_frag}};ks.physical={uniforms:vi([ks.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Pt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Pt},clearcoatNormalScale:{value:new vt(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Pt},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Pt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Pt},sheen:{value:0},sheenColor:{value:new jt(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Pt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Pt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Pt},transmissionSamplerSize:{value:new vt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Pt},attenuationDistance:{value:0},attenuationColor:{value:new jt(0)},specularColor:{value:new jt(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Pt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Pt},anisotropyVector:{value:new vt},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Pt}}]),vertexShader:Ft.meshphysical_vert,fragmentShader:Ft.meshphysical_frag};const _d={r:0,b:0,g:0};function cD(r,e,t,n,s,o,c){const u=new jt(0);let f=o===!0?0:1,d,p,m=null,g=0,v=null;function A(S,_){let b=!1,E=_.isScene===!0?_.background:null;E&&E.isTexture&&(E=(_.backgroundBlurriness>0?t:e).get(E)),E===null?y(u,f):E&&E.isColor&&(y(E,1),b=!0);const R=r.xr.getEnvironmentBlendMode();R==="additive"?n.buffers.color.setClear(0,0,0,1,c):R==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,c),(r.autoClear||b)&&r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil),E&&(E.isCubeTexture||E.mapping===yh)?(p===void 0&&(p=new On(new Th(1,1,1),new gs({name:"BackgroundCubeMaterial",uniforms:ic(ks.backgroundCube.uniforms),vertexShader:ks.backgroundCube.vertexShader,fragmentShader:ks.backgroundCube.fragmentShader,side:Ii,depthTest:!1,depthWrite:!1,fog:!1})),p.geometry.deleteAttribute("normal"),p.geometry.deleteAttribute("uv"),p.onBeforeRender=function(D,L,w){this.matrixWorld.copyPosition(w.matrixWorld)},Object.defineProperty(p.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(p)),p.material.uniforms.envMap.value=E,p.material.uniforms.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,p.material.uniforms.backgroundBlurriness.value=_.backgroundBlurriness,p.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,p.material.toneMapped=dn.getTransfer(E.colorSpace)!==vn,(m!==E||g!==E.version||v!==r.toneMapping)&&(p.material.needsUpdate=!0,m=E,g=E.version,v=r.toneMapping),p.layers.enableAll(),S.unshift(p,p.geometry,p.material,0,0,null)):E&&E.isTexture&&(d===void 0&&(d=new On(new c0(2,2),new gs({name:"BackgroundMaterial",uniforms:ic(ks.background.uniforms),vertexShader:ks.background.vertexShader,fragmentShader:ks.background.fragmentShader,side:js,depthTest:!1,depthWrite:!1,fog:!1})),d.geometry.deleteAttribute("normal"),Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(d)),d.material.uniforms.t2D.value=E,d.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,d.material.toneMapped=dn.getTransfer(E.colorSpace)!==vn,E.matrixAutoUpdate===!0&&E.updateMatrix(),d.material.uniforms.uvTransform.value.copy(E.matrix),(m!==E||g!==E.version||v!==r.toneMapping)&&(d.material.needsUpdate=!0,m=E,g=E.version,v=r.toneMapping),d.layers.enableAll(),S.unshift(d,d.geometry,d.material,0,0,null))}function y(S,_){S.getRGB(_d,VE(r)),n.buffers.color.setClear(_d.r,_d.g,_d.b,_,c)}return{getClearColor:function(){return u},setClearColor:function(S,_=1){u.set(S),f=_,y(u,f)},getClearAlpha:function(){return f},setClearAlpha:function(S){f=S,y(u,f)},render:A}}function uD(r,e,t,n){const s=r.getParameter(r.MAX_VERTEX_ATTRIBS),o=n.isWebGL2?null:e.get("OES_vertex_array_object"),c=n.isWebGL2||o!==null,u={},f=S(null);let d=f,p=!1;function m(z,k,I,Y,q){let J=!1;if(c){const F=y(Y,I,k);d!==F&&(d=F,v(d.object)),J=_(z,Y,I,q),J&&b(z,Y,I,q)}else{const F=k.wireframe===!0;(d.geometry!==Y.id||d.program!==I.id||d.wireframe!==F)&&(d.geometry=Y.id,d.program=I.id,d.wireframe=F,J=!0)}q!==null&&t.update(q,r.ELEMENT_ARRAY_BUFFER),(J||p)&&(p=!1,B(z,k,I,Y),q!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(q).buffer))}function g(){return n.isWebGL2?r.createVertexArray():o.createVertexArrayOES()}function v(z){return n.isWebGL2?r.bindVertexArray(z):o.bindVertexArrayOES(z)}function A(z){return n.isWebGL2?r.deleteVertexArray(z):o.deleteVertexArrayOES(z)}function y(z,k,I){const Y=I.wireframe===!0;let q=u[z.id];q===void 0&&(q={},u[z.id]=q);let J=q[k.id];J===void 0&&(J={},q[k.id]=J);let F=J[Y];return F===void 0&&(F=S(g()),J[Y]=F),F}function S(z){const k=[],I=[],Y=[];for(let q=0;q<s;q++)k[q]=0,I[q]=0,Y[q]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:k,enabledAttributes:I,attributeDivisors:Y,object:z,attributes:{},index:null}}function _(z,k,I,Y){const q=d.attributes,J=k.attributes;let F=0;const ee=I.getAttributes();for(const ce in ee)if(ee[ce].location>=0){const j=q[ce];let ue=J[ce];if(ue===void 0&&(ce==="instanceMatrix"&&z.instanceMatrix&&(ue=z.instanceMatrix),ce==="instanceColor"&&z.instanceColor&&(ue=z.instanceColor)),j===void 0||j.attribute!==ue||ue&&j.data!==ue.data)return!0;F++}return d.attributesNum!==F||d.index!==Y}function b(z,k,I,Y){const q={},J=k.attributes;let F=0;const ee=I.getAttributes();for(const ce in ee)if(ee[ce].location>=0){let j=J[ce];j===void 0&&(ce==="instanceMatrix"&&z.instanceMatrix&&(j=z.instanceMatrix),ce==="instanceColor"&&z.instanceColor&&(j=z.instanceColor));const ue={};ue.attribute=j,j&&j.data&&(ue.data=j.data),q[ce]=ue,F++}d.attributes=q,d.attributesNum=F,d.index=Y}function E(){const z=d.newAttributes;for(let k=0,I=z.length;k<I;k++)z[k]=0}function R(z){D(z,0)}function D(z,k){const I=d.newAttributes,Y=d.enabledAttributes,q=d.attributeDivisors;I[z]=1,Y[z]===0&&(r.enableVertexAttribArray(z),Y[z]=1),q[z]!==k&&((n.isWebGL2?r:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](z,k),q[z]=k)}function L(){const z=d.newAttributes,k=d.enabledAttributes;for(let I=0,Y=k.length;I<Y;I++)k[I]!==z[I]&&(r.disableVertexAttribArray(I),k[I]=0)}function w(z,k,I,Y,q,J,F){F===!0?r.vertexAttribIPointer(z,k,I,q,J):r.vertexAttribPointer(z,k,I,Y,q,J)}function B(z,k,I,Y){if(n.isWebGL2===!1&&(z.isInstancedMesh||Y.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;E();const q=Y.attributes,J=I.getAttributes(),F=k.defaultAttributeValues;for(const ee in J){const ce=J[ee];if(ce.location>=0){let ie=q[ee];if(ie===void 0&&(ee==="instanceMatrix"&&z.instanceMatrix&&(ie=z.instanceMatrix),ee==="instanceColor"&&z.instanceColor&&(ie=z.instanceColor)),ie!==void 0){const j=ie.normalized,ue=ie.itemSize,ge=t.get(ie);if(ge===void 0)continue;const Ae=ge.buffer,Be=ge.type,Ze=ge.bytesPerElement,Xe=n.isWebGL2===!0&&(Be===r.INT||Be===r.UNSIGNED_INT||ie.gpuType===_E);if(ie.isInterleavedBufferAttribute){const ft=ie.data,_e=ft.stride,ct=ie.offset;if(ft.isInstancedInterleavedBuffer){for(let Z=0;Z<ce.locationSize;Z++)D(ce.location+Z,ft.meshPerAttribute);z.isInstancedMesh!==!0&&Y._maxInstanceCount===void 0&&(Y._maxInstanceCount=ft.meshPerAttribute*ft.count)}else for(let Z=0;Z<ce.locationSize;Z++)R(ce.location+Z);r.bindBuffer(r.ARRAY_BUFFER,Ae);for(let Z=0;Z<ce.locationSize;Z++)w(ce.location+Z,ue/ce.locationSize,Be,j,_e*Ze,(ct+ue/ce.locationSize*Z)*Ze,Xe)}else{if(ie.isInstancedBufferAttribute){for(let ft=0;ft<ce.locationSize;ft++)D(ce.location+ft,ie.meshPerAttribute);z.isInstancedMesh!==!0&&Y._maxInstanceCount===void 0&&(Y._maxInstanceCount=ie.meshPerAttribute*ie.count)}else for(let ft=0;ft<ce.locationSize;ft++)R(ce.location+ft);r.bindBuffer(r.ARRAY_BUFFER,Ae);for(let ft=0;ft<ce.locationSize;ft++)w(ce.location+ft,ue/ce.locationSize,Be,j,ue*Ze,ue/ce.locationSize*ft*Ze,Xe)}}else if(F!==void 0){const j=F[ee];if(j!==void 0)switch(j.length){case 2:r.vertexAttrib2fv(ce.location,j);break;case 3:r.vertexAttrib3fv(ce.location,j);break;case 4:r.vertexAttrib4fv(ce.location,j);break;default:r.vertexAttrib1fv(ce.location,j)}}}}L()}function C(){X();for(const z in u){const k=u[z];for(const I in k){const Y=k[I];for(const q in Y)A(Y[q].object),delete Y[q];delete k[I]}delete u[z]}}function T(z){if(u[z.id]===void 0)return;const k=u[z.id];for(const I in k){const Y=k[I];for(const q in Y)A(Y[q].object),delete Y[q];delete k[I]}delete u[z.id]}function O(z){for(const k in u){const I=u[k];if(I[z.id]===void 0)continue;const Y=I[z.id];for(const q in Y)A(Y[q].object),delete Y[q];delete I[z.id]}}function X(){$(),p=!0,d!==f&&(d=f,v(d.object))}function $(){f.geometry=null,f.program=null,f.wireframe=!1}return{setup:m,reset:X,resetDefaultState:$,dispose:C,releaseStatesOfGeometry:T,releaseStatesOfProgram:O,initAttributes:E,enableAttribute:R,disableUnusedAttributes:L}}function fD(r,e,t,n){const s=n.isWebGL2;let o;function c(p){o=p}function u(p,m){r.drawArrays(o,p,m),t.update(m,o,1)}function f(p,m,g){if(g===0)return;let v,A;if(s)v=r,A="drawArraysInstanced";else if(v=e.get("ANGLE_instanced_arrays"),A="drawArraysInstancedANGLE",v===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}v[A](o,p,m,g),t.update(m,o,g)}function d(p,m,g){if(g===0)return;const v=e.get("WEBGL_multi_draw");if(v===null)for(let A=0;A<g;A++)this.render(p[A],m[A]);else{v.multiDrawArraysWEBGL(o,p,0,m,0,g);let A=0;for(let y=0;y<g;y++)A+=m[y];t.update(A,o,1)}}this.setMode=c,this.render=u,this.renderInstances=f,this.renderMultiDraw=d}function dD(r,e,t){let n;function s(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const w=e.get("EXT_texture_filter_anisotropic");n=r.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function o(w){if(w==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const c=typeof WebGL2RenderingContext<"u"&&r.constructor.name==="WebGL2RenderingContext";let u=t.precision!==void 0?t.precision:"highp";const f=o(u);f!==u&&(console.warn("THREE.WebGLRenderer:",u,"not supported, using",f,"instead."),u=f);const d=c||e.has("WEBGL_draw_buffers"),p=t.logarithmicDepthBuffer===!0,m=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),g=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),v=r.getParameter(r.MAX_TEXTURE_SIZE),A=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),y=r.getParameter(r.MAX_VERTEX_ATTRIBS),S=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),_=r.getParameter(r.MAX_VARYING_VECTORS),b=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),E=g>0,R=c||e.has("OES_texture_float"),D=E&&R,L=c?r.getParameter(r.MAX_SAMPLES):0;return{isWebGL2:c,drawBuffers:d,getMaxAnisotropy:s,getMaxPrecision:o,precision:u,logarithmicDepthBuffer:p,maxTextures:m,maxVertexTextures:g,maxTextureSize:v,maxCubemapSize:A,maxAttributes:y,maxVertexUniforms:S,maxVaryings:_,maxFragmentUniforms:b,vertexTextures:E,floatFragmentTextures:R,floatVertexTextures:D,maxSamples:L}}function hD(r){const e=this;let t=null,n=0,s=!1,o=!1;const c=new Ea,u=new Pt,f={value:null,needsUpdate:!1};this.uniform=f,this.numPlanes=0,this.numIntersection=0,this.init=function(m,g){const v=m.length!==0||g||n!==0||s;return s=g,n=m.length,v},this.beginShadows=function(){o=!0,p(null)},this.endShadows=function(){o=!1},this.setGlobalState=function(m,g){t=p(m,g,0)},this.setState=function(m,g,v){const A=m.clippingPlanes,y=m.clipIntersection,S=m.clipShadows,_=r.get(m);if(!s||A===null||A.length===0||o&&!S)o?p(null):d();else{const b=o?0:n,E=b*4;let R=_.clippingState||null;f.value=R,R=p(A,g,E,v);for(let D=0;D!==E;++D)R[D]=t[D];_.clippingState=R,this.numIntersection=y?this.numPlanes:0,this.numPlanes+=b}};function d(){f.value!==t&&(f.value=t,f.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function p(m,g,v,A){const y=m!==null?m.length:0;let S=null;if(y!==0){if(S=f.value,A!==!0||S===null){const _=v+y*4,b=g.matrixWorldInverse;u.getNormalMatrix(b),(S===null||S.length<_)&&(S=new Float32Array(_));for(let E=0,R=v;E!==y;++E,R+=4)c.copy(m[E]).applyMatrix4(b,u),c.normal.toArray(S,R),S[R+3]=c.constant}f.value=S,f.needsUpdate=!0}return e.numPlanes=y,e.numIntersection=0,S}}function pD(r){let e=new WeakMap;function t(c,u){return u===t0?c.mapping=Jl:u===n0&&(c.mapping=ec),c}function n(c){if(c&&c.isTexture){const u=c.mapping;if(u===t0||u===n0)if(e.has(c)){const f=e.get(c).texture;return t(f,c.mapping)}else{const f=c.image;if(f&&f.height>0){const d=new bR(f.height/2);return d.fromEquirectangularTexture(r,c),e.set(c,d),c.addEventListener("dispose",s),t(d.texture,c.mapping)}else return null}}return c}function s(c){const u=c.target;u.removeEventListener("dispose",s);const f=e.get(u);f!==void 0&&(e.delete(u),f.dispose())}function o(){e=new WeakMap}return{get:n,dispose:o}}let c_=class extends kE{constructor(e=-1,t=1,n=1,s=-1,o=.1,c=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=o,this.far=c,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,o,c){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let o=n-e,c=n+e,u=s+t,f=s-t;if(this.view!==null&&this.view.enabled){const d=(this.right-this.left)/this.view.fullWidth/this.zoom,p=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=d*this.view.offsetX,c=o+d*this.view.width,u-=p*this.view.offsetY,f=u-p*this.view.height}this.projectionMatrix.makeOrthographic(o,c,u,f,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}};const kl=4,xy=[.125,.215,.35,.446,.526,.582],mo=20,cg=new c_,Ay=new jt;let ug=null,fg=0,dg=0;const co=(1+Math.sqrt(5))/2,Tl=1/co,yy=[new ne(1,1,1),new ne(-1,1,1),new ne(1,1,-1),new ne(-1,1,-1),new ne(0,co,Tl),new ne(0,co,-Tl),new ne(Tl,0,co),new ne(-Tl,0,co),new ne(co,Tl,0),new ne(-co,Tl,0)];let My=class{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100){ug=this._renderer.getRenderTarget(),fg=this._renderer.getActiveCubeFace(),dg=this._renderer.getActiveMipmapLevel(),this._setSize(256);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(e,n,s,o),t>0&&this._blur(o,0,0,t),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=by(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Ty(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(ug,fg,dg),e.scissorTest=!1,vd(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Jl||e.mapping===ec?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),ug=this._renderer.getRenderTarget(),fg=this._renderer.getActiveCubeFace(),dg=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:fs,minFilter:fs,generateMipmaps:!1,type:tc,format:Ai,colorSpace:Gr,depthBuffer:!1},s=Ey(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Ey(e,t,n);const{_lodMax:o}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=mD(o)),this._blurMaterial=gD(o,e,t)}return s}_compileMaterial(e){const t=new On(this._lodPlanes[0],e);this._renderer.compile(t,cg)}_sceneToCubeUV(e,t,n,s){const u=new ds(90,1,t,n),f=[1,-1,1,1,1,1],d=[1,1,1,-1,-1,-1],p=this._renderer,m=p.autoClear,g=p.toneMapping;p.getClearColor(Ay),p.toneMapping=Ra,p.autoClear=!1;const v=new bo({name:"PMREM.Background",side:Ii,depthWrite:!1,depthTest:!1}),A=new On(new Th,v);let y=!1;const S=e.background;S?S.isColor&&(v.color.copy(S),e.background=null,y=!0):(v.color.copy(Ay),y=!0);for(let _=0;_<6;_++){const b=_%3;b===0?(u.up.set(0,f[_],0),u.lookAt(d[_],0,0)):b===1?(u.up.set(0,0,f[_]),u.lookAt(0,d[_],0)):(u.up.set(0,f[_],0),u.lookAt(0,0,d[_]));const E=this._cubeSize;vd(s,b*E,_>2?E:0,E,E),p.setRenderTarget(s),y&&p.render(A,u),p.render(e,u)}A.geometry.dispose(),A.material.dispose(),p.toneMapping=g,p.autoClear=m,e.background=S}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===Jl||e.mapping===ec;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=by()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Ty());const o=s?this._cubemapMaterial:this._equirectMaterial,c=new On(this._lodPlanes[0],o),u=o.uniforms;u.envMap.value=e;const f=this._cubeSize;vd(t,0,0,3*f,2*f),n.setRenderTarget(t),n.render(c,cg)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let s=1;s<this._lodPlanes.length;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),c=yy[(s-1)%yy.length];this._blur(e,s-1,s,o,c)}t.autoClear=n}_blur(e,t,n,s,o){const c=this._pingPongRenderTarget;this._halfBlur(e,c,t,n,s,"latitudinal",o),this._halfBlur(c,e,n,n,s,"longitudinal",o)}_halfBlur(e,t,n,s,o,c,u){const f=this._renderer,d=this._blurMaterial;c!=="latitudinal"&&c!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const p=3,m=new On(this._lodPlanes[s],d),g=d.uniforms,v=this._sizeLods[n]-1,A=isFinite(o)?Math.PI/(2*v):2*Math.PI/(2*mo-1),y=o/A,S=isFinite(o)?1+Math.floor(p*y):mo;S>mo&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${S} samples when the maximum is set to ${mo}`);const _=[];let b=0;for(let w=0;w<mo;++w){const B=w/y,C=Math.exp(-B*B/2);_.push(C),w===0?b+=C:w<S&&(b+=2*C)}for(let w=0;w<_.length;w++)_[w]=_[w]/b;g.envMap.value=e.texture,g.samples.value=S,g.weights.value=_,g.latitudinal.value=c==="latitudinal",u&&(g.poleAxis.value=u);const{_lodMax:E}=this;g.dTheta.value=A,g.mipInt.value=E-n;const R=this._sizeLods[s],D=3*R*(s>E-kl?s-E+kl:0),L=4*(this._cubeSize-R);vd(t,D,L,3*R,2*R),f.setRenderTarget(t),f.render(m,cg)}};function mD(r){const e=[],t=[],n=[];let s=r;const o=r-kl+1+xy.length;for(let c=0;c<o;c++){const u=Math.pow(2,s);t.push(u);let f=1/u;c>r-kl?f=xy[c-r+kl-1]:c===0&&(f=0),n.push(f);const d=1/(u-2),p=-d,m=1+d,g=[p,p,m,p,m,m,p,p,m,m,p,m],v=6,A=6,y=3,S=2,_=1,b=new Float32Array(y*A*v),E=new Float32Array(S*A*v),R=new Float32Array(_*A*v);for(let L=0;L<v;L++){const w=L%3*2/3-1,B=L>2?0:-1,C=[w,B,0,w+2/3,B,0,w+2/3,B+1,0,w,B,0,w+2/3,B+1,0,w,B+1,0];b.set(C,y*A*L),E.set(g,S*A*L);const T=[L,L,L,L,L,L];R.set(T,_*A*L)}const D=new Js;D.setAttribute("position",new ms(b,y)),D.setAttribute("uv",new ms(E,S)),D.setAttribute("faceIndex",new ms(R,_)),e.push(D),s>kl&&s--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function Ey(r,e,t){const n=new Pa(r,e,t);return n.texture.mapping=yh,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function vd(r,e,t,n,s){r.viewport.set(e,t,n,s),r.scissor.set(e,t,n,s)}function gD(r,e,t){const n=new Float32Array(mo),s=new ne(0,1,0);return new gs({name:"SphericalGaussianBlur",defines:{n:mo,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:u_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:ba,depthTest:!1,depthWrite:!1})}function Ty(){return new gs({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:u_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:ba,depthTest:!1,depthWrite:!1})}function by(){return new gs({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:u_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:ba,depthTest:!1,depthWrite:!1})}function u_(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function _D(r){let e=new WeakMap,t=null;function n(u){if(u&&u.isTexture){const f=u.mapping,d=f===t0||f===n0,p=f===Jl||f===ec;if(d||p)if(u.isRenderTargetTexture&&u.needsPMREMUpdate===!0){u.needsPMREMUpdate=!1;let m=e.get(u);return t===null&&(t=new My(r)),m=d?t.fromEquirectangular(u,m):t.fromCubemap(u,m),e.set(u,m),m.texture}else{if(e.has(u))return e.get(u).texture;{const m=u.image;if(d&&m&&m.height>0||p&&m&&s(m)){t===null&&(t=new My(r));const g=d?t.fromEquirectangular(u):t.fromCubemap(u);return e.set(u,g),u.addEventListener("dispose",o),g.texture}else return null}}}return u}function s(u){let f=0;const d=6;for(let p=0;p<d;p++)u[p]!==void 0&&f++;return f===d}function o(u){const f=u.target;f.removeEventListener("dispose",o);const d=e.get(f);d!==void 0&&(e.delete(f),d.dispose())}function c(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:c}}function vD(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let s;switch(n){case"WEBGL_depth_texture":s=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=r.getExtension(n)}return e[n]=s,s}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?(t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance")):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const s=t(n);return s===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function SD(r,e,t,n){const s={},o=new WeakMap;function c(m){const g=m.target;g.index!==null&&e.remove(g.index);for(const A in g.attributes)e.remove(g.attributes[A]);for(const A in g.morphAttributes){const y=g.morphAttributes[A];for(let S=0,_=y.length;S<_;S++)e.remove(y[S])}g.removeEventListener("dispose",c),delete s[g.id];const v=o.get(g);v&&(e.remove(v),o.delete(g)),n.releaseStatesOfGeometry(g),g.isInstancedBufferGeometry===!0&&delete g._maxInstanceCount,t.memory.geometries--}function u(m,g){return s[g.id]===!0||(g.addEventListener("dispose",c),s[g.id]=!0,t.memory.geometries++),g}function f(m){const g=m.attributes;for(const A in g)e.update(g[A],r.ARRAY_BUFFER);const v=m.morphAttributes;for(const A in v){const y=v[A];for(let S=0,_=y.length;S<_;S++)e.update(y[S],r.ARRAY_BUFFER)}}function d(m){const g=[],v=m.index,A=m.attributes.position;let y=0;if(v!==null){const b=v.array;y=v.version;for(let E=0,R=b.length;E<R;E+=3){const D=b[E+0],L=b[E+1],w=b[E+2];g.push(D,L,L,w,w,D)}}else if(A!==void 0){const b=A.array;y=A.version;for(let E=0,R=b.length/3-1;E<R;E+=3){const D=E+0,L=E+1,w=E+2;g.push(D,L,L,w,w,D)}}else return;const S=new(CE(g)?zE:OE)(g,1);S.version=y;const _=o.get(m);_&&e.remove(_),o.set(m,S)}function p(m){const g=o.get(m);if(g){const v=m.index;v!==null&&g.version<v.version&&d(m)}else d(m);return o.get(m)}return{get:u,update:f,getWireframeAttribute:p}}function xD(r,e,t,n){const s=n.isWebGL2;let o;function c(v){o=v}let u,f;function d(v){u=v.type,f=v.bytesPerElement}function p(v,A){r.drawElements(o,A,u,v*f),t.update(A,o,1)}function m(v,A,y){if(y===0)return;let S,_;if(s)S=r,_="drawElementsInstanced";else if(S=e.get("ANGLE_instanced_arrays"),_="drawElementsInstancedANGLE",S===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}S[_](o,A,u,v*f,y),t.update(A,o,y)}function g(v,A,y){if(y===0)return;const S=e.get("WEBGL_multi_draw");if(S===null)for(let _=0;_<y;_++)this.render(v[_]/f,A[_]);else{S.multiDrawElementsWEBGL(o,A,0,u,v,0,y);let _=0;for(let b=0;b<y;b++)_+=A[b];t.update(_,o,1)}}this.setMode=c,this.setIndex=d,this.render=p,this.renderInstances=m,this.renderMultiDraw=g}function AD(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(o,c,u){switch(t.calls++,c){case r.TRIANGLES:t.triangles+=u*(o/3);break;case r.LINES:t.lines+=u*(o/2);break;case r.LINE_STRIP:t.lines+=u*(o-1);break;case r.LINE_LOOP:t.lines+=u*o;break;case r.POINTS:t.points+=u*o;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",c);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:n}}function yD(r,e){return r[0]-e[0]}function MD(r,e){return Math.abs(e[1])-Math.abs(r[1])}function ED(r,e,t){const n={},s=new Float32Array(8),o=new WeakMap,c=new ti,u=[];for(let d=0;d<8;d++)u[d]=[d,0];function f(d,p,m){const g=d.morphTargetInfluences;if(e.isWebGL2===!0){const A=p.morphAttributes.position||p.morphAttributes.normal||p.morphAttributes.color,y=A!==void 0?A.length:0;let S=o.get(p);if(S===void 0||S.count!==y){let k=function(){$.dispose(),o.delete(p),p.removeEventListener("dispose",k)};var v=k;S!==void 0&&S.texture.dispose();const E=p.morphAttributes.position!==void 0,R=p.morphAttributes.normal!==void 0,D=p.morphAttributes.color!==void 0,L=p.morphAttributes.position||[],w=p.morphAttributes.normal||[],B=p.morphAttributes.color||[];let C=0;E===!0&&(C=1),R===!0&&(C=2),D===!0&&(C=3);let T=p.attributes.position.count*C,O=1;T>e.maxTextureSize&&(O=Math.ceil(T/e.maxTextureSize),T=e.maxTextureSize);const X=new Float32Array(T*O*4*y),$=new LE(X,T,O,y);$.type=Xs,$.needsUpdate=!0;const z=C*4;for(let I=0;I<y;I++){const Y=L[I],q=w[I],J=B[I],F=T*O*4*I;for(let ee=0;ee<Y.count;ee++){const ce=ee*z;E===!0&&(c.fromBufferAttribute(Y,ee),X[F+ce+0]=c.x,X[F+ce+1]=c.y,X[F+ce+2]=c.z,X[F+ce+3]=0),R===!0&&(c.fromBufferAttribute(q,ee),X[F+ce+4]=c.x,X[F+ce+5]=c.y,X[F+ce+6]=c.z,X[F+ce+7]=0),D===!0&&(c.fromBufferAttribute(J,ee),X[F+ce+8]=c.x,X[F+ce+9]=c.y,X[F+ce+10]=c.z,X[F+ce+11]=J.itemSize===4?c.w:1)}}S={count:y,texture:$,size:new vt(T,O)},o.set(p,S),p.addEventListener("dispose",k)}let _=0;for(let E=0;E<g.length;E++)_+=g[E];const b=p.morphTargetsRelative?1:1-_;m.getUniforms().setValue(r,"morphTargetBaseInfluence",b),m.getUniforms().setValue(r,"morphTargetInfluences",g),m.getUniforms().setValue(r,"morphTargetsTexture",S.texture,t),m.getUniforms().setValue(r,"morphTargetsTextureSize",S.size)}else{const A=g===void 0?0:g.length;let y=n[p.id];if(y===void 0||y.length!==A){y=[];for(let R=0;R<A;R++)y[R]=[R,0];n[p.id]=y}for(let R=0;R<A;R++){const D=y[R];D[0]=R,D[1]=g[R]}y.sort(MD);for(let R=0;R<8;R++)R<A&&y[R][1]?(u[R][0]=y[R][0],u[R][1]=y[R][1]):(u[R][0]=Number.MAX_SAFE_INTEGER,u[R][1]=0);u.sort(yD);const S=p.morphAttributes.position,_=p.morphAttributes.normal;let b=0;for(let R=0;R<8;R++){const D=u[R],L=D[0],w=D[1];L!==Number.MAX_SAFE_INTEGER&&w?(S&&p.getAttribute("morphTarget"+R)!==S[L]&&p.setAttribute("morphTarget"+R,S[L]),_&&p.getAttribute("morphNormal"+R)!==_[L]&&p.setAttribute("morphNormal"+R,_[L]),s[R]=w,b+=w):(S&&p.hasAttribute("morphTarget"+R)===!0&&p.deleteAttribute("morphTarget"+R),_&&p.hasAttribute("morphNormal"+R)===!0&&p.deleteAttribute("morphNormal"+R),s[R]=0)}const E=p.morphTargetsRelative?1:1-b;m.getUniforms().setValue(r,"morphTargetBaseInfluence",E),m.getUniforms().setValue(r,"morphTargetInfluences",s)}}return{update:f}}function TD(r,e,t,n){let s=new WeakMap;function o(f){const d=n.render.frame,p=f.geometry,m=e.get(f,p);if(s.get(m)!==d&&(e.update(m),s.set(m,d)),f.isInstancedMesh&&(f.hasEventListener("dispose",u)===!1&&f.addEventListener("dispose",u),s.get(f)!==d&&(t.update(f.instanceMatrix,r.ARRAY_BUFFER),f.instanceColor!==null&&t.update(f.instanceColor,r.ARRAY_BUFFER),s.set(f,d))),f.isSkinnedMesh){const g=f.skeleton;s.get(g)!==d&&(g.update(),s.set(g,d))}return m}function c(){s=new WeakMap}function u(f){const d=f.target;d.removeEventListener("dispose",u),t.remove(d.instanceMatrix),d.instanceColor!==null&&t.remove(d.instanceColor)}return{update:o,dispose:c}}let f_=class extends Zs{constructor(e,t,n,s,o,c,u,f,d,p){if(p=p!==void 0?p:wa,p!==wa&&p!==nc)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&p===wa&&(n=Qi),n===void 0&&p===nc&&(n=Mo),super(null,s,o,c,u,f,p,n,d),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=u!==void 0?u:li,this.minFilter=f!==void 0?f:li,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}};const $E=new Zs,QE=new f_(1,1);QE.compareFunction=ME;const KE=new LE,jE=new aR,ZE=new WE,Cy=[],Ry=[],wy=new Float32Array(16),Dy=new Float32Array(9),Ly=new Float32Array(4);function uc(r,e,t){const n=r[0];if(n<=0||n>0)return r;const s=e*t;let o=Cy[s];if(o===void 0&&(o=new Float32Array(s),Cy[s]=o),e!==0){n.toArray(o,0);for(let c=1,u=0;c!==e;++c)u+=t,r[c].toArray(o,u)}return o}function Xn(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function qn(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function bh(r,e){let t=Ry[e];t===void 0&&(t=new Int32Array(e),Ry[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function bD(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function CD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2fv(this.addr,e),qn(t,e)}}function RD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Xn(t,e))return;r.uniform3fv(this.addr,e),qn(t,e)}}function wD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4fv(this.addr,e),qn(t,e)}}function DD(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;Ly.set(n),r.uniformMatrix2fv(this.addr,!1,Ly),qn(t,n)}}function LD(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;Dy.set(n),r.uniformMatrix3fv(this.addr,!1,Dy),qn(t,n)}}function PD(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;wy.set(n),r.uniformMatrix4fv(this.addr,!1,wy),qn(t,n)}}function UD(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function ID(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2iv(this.addr,e),qn(t,e)}}function BD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Xn(t,e))return;r.uniform3iv(this.addr,e),qn(t,e)}}function FD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4iv(this.addr,e),qn(t,e)}}function ND(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function OD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2uiv(this.addr,e),qn(t,e)}}function zD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Xn(t,e))return;r.uniform3uiv(this.addr,e),qn(t,e)}}function HD(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4uiv(this.addr,e),qn(t,e)}}function GD(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s);const o=this.type===r.SAMPLER_2D_SHADOW?QE:$E;t.setTexture2D(e||o,s)}function VD(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTexture3D(e||jE,s)}function kD(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTextureCube(e||ZE,s)}function WD(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTexture2DArray(e||KE,s)}function XD(r){switch(r){case 5126:return bD;case 35664:return CD;case 35665:return RD;case 35666:return wD;case 35674:return DD;case 35675:return LD;case 35676:return PD;case 5124:case 35670:return UD;case 35667:case 35671:return ID;case 35668:case 35672:return BD;case 35669:case 35673:return FD;case 5125:return ND;case 36294:return OD;case 36295:return zD;case 36296:return HD;case 35678:case 36198:case 36298:case 36306:case 35682:return GD;case 35679:case 36299:case 36307:return VD;case 35680:case 36300:case 36308:case 36293:return kD;case 36289:case 36303:case 36311:case 36292:return WD}}function qD(r,e){r.uniform1fv(this.addr,e)}function YD(r,e){const t=uc(e,this.size,2);r.uniform2fv(this.addr,t)}function $D(r,e){const t=uc(e,this.size,3);r.uniform3fv(this.addr,t)}function QD(r,e){const t=uc(e,this.size,4);r.uniform4fv(this.addr,t)}function KD(r,e){const t=uc(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function jD(r,e){const t=uc(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function ZD(r,e){const t=uc(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function JD(r,e){r.uniform1iv(this.addr,e)}function eL(r,e){r.uniform2iv(this.addr,e)}function tL(r,e){r.uniform3iv(this.addr,e)}function nL(r,e){r.uniform4iv(this.addr,e)}function iL(r,e){r.uniform1uiv(this.addr,e)}function sL(r,e){r.uniform2uiv(this.addr,e)}function rL(r,e){r.uniform3uiv(this.addr,e)}function aL(r,e){r.uniform4uiv(this.addr,e)}function oL(r,e,t){const n=this.cache,s=e.length,o=bh(t,s);Xn(n,o)||(r.uniform1iv(this.addr,o),qn(n,o));for(let c=0;c!==s;++c)t.setTexture2D(e[c]||$E,o[c])}function lL(r,e,t){const n=this.cache,s=e.length,o=bh(t,s);Xn(n,o)||(r.uniform1iv(this.addr,o),qn(n,o));for(let c=0;c!==s;++c)t.setTexture3D(e[c]||jE,o[c])}function cL(r,e,t){const n=this.cache,s=e.length,o=bh(t,s);Xn(n,o)||(r.uniform1iv(this.addr,o),qn(n,o));for(let c=0;c!==s;++c)t.setTextureCube(e[c]||ZE,o[c])}function uL(r,e,t){const n=this.cache,s=e.length,o=bh(t,s);Xn(n,o)||(r.uniform1iv(this.addr,o),qn(n,o));for(let c=0;c!==s;++c)t.setTexture2DArray(e[c]||KE,o[c])}function fL(r){switch(r){case 5126:return qD;case 35664:return YD;case 35665:return $D;case 35666:return QD;case 35674:return KD;case 35675:return jD;case 35676:return ZD;case 5124:case 35670:return JD;case 35667:case 35671:return eL;case 35668:case 35672:return tL;case 35669:case 35673:return nL;case 5125:return iL;case 36294:return sL;case 36295:return rL;case 36296:return aL;case 35678:case 36198:case 36298:case 36306:case 35682:return oL;case 35679:case 36299:case 36307:return lL;case 35680:case 36300:case 36308:case 36293:return cL;case 36289:case 36303:case 36311:case 36292:return uL}}let dL=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=XD(t.type)}},hL=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=fL(t.type)}},pL=class{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const s=this.seq;for(let o=0,c=s.length;o!==c;++o){const u=s[o];u.setValue(e,t[u.id],n)}}};const hg=/(\w+)(\])?(\[|\.)?/g;function Py(r,e){r.seq.push(e),r.map[e.id]=e}function mL(r,e,t){const n=r.name,s=n.length;for(hg.lastIndex=0;;){const o=hg.exec(n),c=hg.lastIndex;let u=o[1];const f=o[2]==="]",d=o[3];if(f&&(u=u|0),d===void 0||d==="["&&c+2===s){Py(t,d===void 0?new dL(u,r,e):new hL(u,r,e));break}else{let m=t.map[u];m===void 0&&(m=new pL(u),Py(t,m)),t=m}}}let Jd=class{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const o=e.getActiveUniform(t,s),c=e.getUniformLocation(t,o.name);mL(o,c,this)}}setValue(e,t,n,s){const o=this.map[t];o!==void 0&&o.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];s!==void 0&&this.setValue(e,n,s)}static upload(e,t,n,s){for(let o=0,c=t.length;o!==c;++o){const u=t[o],f=n[u.id];f.needsUpdate!==!1&&u.setValue(e,f.value,s)}}static seqWithValue(e,t){const n=[];for(let s=0,o=e.length;s!==o;++s){const c=e[s];c.id in t&&n.push(c)}return n}};function Uy(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}const gL=37297;let _L=0;function vL(r,e){const t=r.split(`
`),n=[],s=Math.max(e-6,0),o=Math.min(e+6,t.length);for(let c=s;c<o;c++){const u=c+1;n.push(`${u===e?">":" "} ${u}: ${t[c]}`)}return n.join(`
`)}function SL(r){const e=dn.getPrimaries(dn.workingColorSpace),t=dn.getPrimaries(r);let n;switch(e===t?n="":e===uh&&t===ch?n="LinearDisplayP3ToLinearSRGB":e===ch&&t===uh&&(n="LinearSRGBToLinearDisplayP3"),r){case Gr:case Mh:return[n,"LinearTransferOETF"];case ci:case o_:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",r),[n,"LinearTransferOETF"]}}function Iy(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),s=r.getShaderInfoLog(e).trim();if(n&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const c=parseInt(o[1]);return t.toUpperCase()+`

`+s+`

`+vL(r.getShaderSource(e),c)}else return s}function xL(r,e){const t=SL(e);return`vec4 ${r}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`}function AL(r,e){let t;switch(e){case C1:t="Linear";break;case R1:t="Reinhard";break;case w1:t="OptimizedCineon";break;case D1:t="ACESFilmic";break;case P1:t="AgX";break;case L1:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function yL(r){return[r.extensionDerivatives||r.envMapCubeUVHeight||r.bumpMap||r.normalMapTangentSpace||r.clearcoatNormalMap||r.flatShading||r.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(r.extensionFragDepth||r.logarithmicDepthBuffer)&&r.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",r.extensionDrawBuffers&&r.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(r.extensionShaderTextureLOD||r.envMap||r.transmission)&&r.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Wl).join(`
`)}function ML(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":""].filter(Wl).join(`
`)}function EL(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function TL(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const o=r.getActiveAttrib(e,s),c=o.name;let u=1;o.type===r.FLOAT_MAT2&&(u=2),o.type===r.FLOAT_MAT3&&(u=3),o.type===r.FLOAT_MAT4&&(u=4),t[c]={type:o.type,location:r.getAttribLocation(e,c),locationSize:u}}return t}function Wl(r){return r!==""}function By(r,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Fy(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const bL=/^[ \t]*#include +<([\w\d./]+)>/gm;function u0(r){return r.replace(bL,RL)}const CL=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function RL(r,e){let t=Ft[e];if(t===void 0){const n=CL.get(e);if(n!==void 0)t=Ft[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return u0(t)}const wL=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Ny(r){return r.replace(wL,DL)}function DL(r,e,t,n){let s="";for(let o=parseInt(e);o<parseInt(t);o++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+o+" ]").replace(/UNROLLED_LOOP_INDEX/g,o);return s}function Oy(r){let e="precision "+r.precision+` float;
precision `+r.precision+" int;";return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function LL(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===hE?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===n1?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===wr&&(e="SHADOWMAP_TYPE_VSM"),e}function PL(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Jl:case ec:e="ENVMAP_TYPE_CUBE";break;case yh:e="ENVMAP_TYPE_CUBE_UV";break}return e}function UL(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case ec:e="ENVMAP_MODE_REFRACTION";break}return e}function IL(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case mE:e="ENVMAP_BLENDING_MULTIPLY";break;case T1:e="ENVMAP_BLENDING_MIX";break;case b1:e="ENVMAP_BLENDING_ADD";break}return e}function BL(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function FL(r,e,t,n){const s=r.getContext(),o=t.defines;let c=t.vertexShader,u=t.fragmentShader;const f=LL(t),d=PL(t),p=UL(t),m=IL(t),g=BL(t),v=t.isWebGL2?"":yL(t),A=ML(t),y=EL(o),S=s.createProgram();let _,b,E=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(_=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y].filter(Wl).join(`
`),_.length>0&&(_+=`
`),b=[v,"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y].filter(Wl).join(`
`),b.length>0&&(b+=`
`)):(_=[Oy(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+p:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Wl).join(`
`),b=[v,Oy(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.envMap?"#define "+p:"",t.envMap?"#define "+m:"",g?"#define CUBEUV_TEXEL_WIDTH "+g.texelWidth:"",g?"#define CUBEUV_TEXEL_HEIGHT "+g.texelHeight:"",g?"#define CUBEUV_MAX_MIP "+g.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Ra?"#define TONE_MAPPING":"",t.toneMapping!==Ra?Ft.tonemapping_pars_fragment:"",t.toneMapping!==Ra?AL("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Ft.colorspace_pars_fragment,xL("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Wl).join(`
`)),c=u0(c),c=By(c,t),c=Fy(c,t),u=u0(u),u=By(u,t),u=Fy(u,t),c=Ny(c),u=Ny(u),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(E=`#version 300 es
`,_=[A,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+_,b=["precision mediump sampler2DArray;","#define varying in",t.glslVersion===ny?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===ny?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+b);const R=E+_+c,D=E+b+u,L=Uy(s,s.VERTEX_SHADER,R),w=Uy(s,s.FRAGMENT_SHADER,D);s.attachShader(S,L),s.attachShader(S,w),t.index0AttributeName!==void 0?s.bindAttribLocation(S,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(S,0,"position"),s.linkProgram(S);function B(X){if(r.debug.checkShaderErrors){const $=s.getProgramInfoLog(S).trim(),z=s.getShaderInfoLog(L).trim(),k=s.getShaderInfoLog(w).trim();let I=!0,Y=!0;if(s.getProgramParameter(S,s.LINK_STATUS)===!1)if(I=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(s,S,L,w);else{const q=Iy(s,L,"vertex"),J=Iy(s,w,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(S,s.VALIDATE_STATUS)+`

Program Info Log: `+$+`
`+q+`
`+J)}else $!==""?console.warn("THREE.WebGLProgram: Program Info Log:",$):(z===""||k==="")&&(Y=!1);Y&&(X.diagnostics={runnable:I,programLog:$,vertexShader:{log:z,prefix:_},fragmentShader:{log:k,prefix:b}})}s.deleteShader(L),s.deleteShader(w),C=new Jd(s,S),T=TL(s,S)}let C;this.getUniforms=function(){return C===void 0&&B(this),C};let T;this.getAttributes=function(){return T===void 0&&B(this),T};let O=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return O===!1&&(O=s.getProgramParameter(S,gL)),O},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(S),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=_L++,this.cacheKey=e,this.usedTimes=1,this.program=S,this.vertexShader=L,this.fragmentShader=w,this}let NL=0,OL=class{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,s=this._getShaderStage(t),o=this._getShaderStage(n),c=this._getShaderCacheForMaterial(e);return c.has(s)===!1&&(c.add(s),s.usedTimes++),c.has(o)===!1&&(c.add(o),o.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new zL(e),t.set(e,n)),n}},zL=class{constructor(e){this.id=NL++,this.code=e,this.usedTimes=0}};function HL(r,e,t,n,s,o,c){const u=new FE,f=new OL,d=[],p=s.isWebGL2,m=s.logarithmicDepthBuffer,g=s.vertexTextures;let v=s.precision;const A={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function y(C){return C===0?"uv":`uv${C}`}function S(C,T,O,X,$){const z=X.fog,k=$.geometry,I=C.isMeshStandardMaterial?X.environment:null,Y=(C.isMeshStandardMaterial?t:e).get(C.envMap||I),q=Y&&Y.mapping===yh?Y.image.height:null,J=A[C.type];C.precision!==null&&(v=s.getMaxPrecision(C.precision),v!==C.precision&&console.warn("THREE.WebGLProgram.getParameters:",C.precision,"not supported, using",v,"instead."));const F=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,ee=F!==void 0?F.length:0;let ce=0;k.morphAttributes.position!==void 0&&(ce=1),k.morphAttributes.normal!==void 0&&(ce=2),k.morphAttributes.color!==void 0&&(ce=3);let ie,j,ue,ge;if(J){const en=ks[J];ie=en.vertexShader,j=en.fragmentShader}else ie=C.vertexShader,j=C.fragmentShader,f.update(C),ue=f.getVertexShaderID(C),ge=f.getFragmentShaderID(C);const Ae=r.getRenderTarget(),Be=$.isInstancedMesh===!0,Ze=$.isBatchedMesh===!0,Xe=!!C.map,ft=!!C.matcap,_e=!!Y,ct=!!C.aoMap,Z=!!C.lightMap,it=!!C.bumpMap,Ke=!!C.normalMap,at=!!C.displacementMap,$e=!!C.emissiveMap,Q=!!C.metalnessMap,G=!!C.roughnessMap,N=C.anisotropy>0,U=C.clearcoat>0,se=C.iridescence>0,fe=C.sheen>0,Ee=C.transmission>0,pe=N&&!!C.anisotropyMap,Oe=U&&!!C.clearcoatMap,ze=U&&!!C.clearcoatNormalMap,je=U&&!!C.clearcoatRoughnessMap,Pe=se&&!!C.iridescenceMap,Ve=se&&!!C.iridescenceThicknessMap,te=fe&&!!C.sheenColorMap,Ce=fe&&!!C.sheenRoughnessMap,ke=!!C.specularMap,be=!!C.specularColorMap,tt=!!C.specularIntensityMap,st=Ee&&!!C.transmissionMap,St=Ee&&!!C.thicknessMap,oe=!!C.gradientMap,Te=!!C.alphaMap,W=C.alphaTest>0,he=!!C.alphaHash,De=!!C.extensions,Ge=!!k.attributes.uv1,Je=!!k.attributes.uv2,At=!!k.attributes.uv3;let Rt=Ra;return C.toneMapped&&(Ae===null||Ae.isXRRenderTarget===!0)&&(Rt=r.toneMapping),{isWebGL2:p,shaderID:J,shaderType:C.type,shaderName:C.name,vertexShader:ie,fragmentShader:j,defines:C.defines,customVertexShaderID:ue,customFragmentShaderID:ge,isRawShaderMaterial:C.isRawShaderMaterial===!0,glslVersion:C.glslVersion,precision:v,batching:Ze,instancing:Be,instancingColor:Be&&$.instanceColor!==null,supportsVertexTextures:g,outputColorSpace:Ae===null?r.outputColorSpace:Ae.isXRRenderTarget===!0?Ae.texture.colorSpace:Gr,map:Xe,matcap:ft,envMap:_e,envMapMode:_e&&Y.mapping,envMapCubeUVHeight:q,aoMap:ct,lightMap:Z,bumpMap:it,normalMap:Ke,displacementMap:g&&at,emissiveMap:$e,normalMapObjectSpace:Ke&&C.normalMapType===X1,normalMapTangentSpace:Ke&&C.normalMapType===W1,metalnessMap:Q,roughnessMap:G,anisotropy:N,anisotropyMap:pe,clearcoat:U,clearcoatMap:Oe,clearcoatNormalMap:ze,clearcoatRoughnessMap:je,iridescence:se,iridescenceMap:Pe,iridescenceThicknessMap:Ve,sheen:fe,sheenColorMap:te,sheenRoughnessMap:Ce,specularMap:ke,specularColorMap:be,specularIntensityMap:tt,transmission:Ee,transmissionMap:st,thicknessMap:St,gradientMap:oe,opaque:C.transparent===!1&&C.blending===Ca,alphaMap:Te,alphaTest:W,alphaHash:he,combine:C.combine,mapUv:Xe&&y(C.map.channel),aoMapUv:ct&&y(C.aoMap.channel),lightMapUv:Z&&y(C.lightMap.channel),bumpMapUv:it&&y(C.bumpMap.channel),normalMapUv:Ke&&y(C.normalMap.channel),displacementMapUv:at&&y(C.displacementMap.channel),emissiveMapUv:$e&&y(C.emissiveMap.channel),metalnessMapUv:Q&&y(C.metalnessMap.channel),roughnessMapUv:G&&y(C.roughnessMap.channel),anisotropyMapUv:pe&&y(C.anisotropyMap.channel),clearcoatMapUv:Oe&&y(C.clearcoatMap.channel),clearcoatNormalMapUv:ze&&y(C.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:je&&y(C.clearcoatRoughnessMap.channel),iridescenceMapUv:Pe&&y(C.iridescenceMap.channel),iridescenceThicknessMapUv:Ve&&y(C.iridescenceThicknessMap.channel),sheenColorMapUv:te&&y(C.sheenColorMap.channel),sheenRoughnessMapUv:Ce&&y(C.sheenRoughnessMap.channel),specularMapUv:ke&&y(C.specularMap.channel),specularColorMapUv:be&&y(C.specularColorMap.channel),specularIntensityMapUv:tt&&y(C.specularIntensityMap.channel),transmissionMapUv:st&&y(C.transmissionMap.channel),thicknessMapUv:St&&y(C.thicknessMap.channel),alphaMapUv:Te&&y(C.alphaMap.channel),vertexTangents:!!k.attributes.tangent&&(Ke||N),vertexColors:C.vertexColors,vertexAlphas:C.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,vertexUv1s:Ge,vertexUv2s:Je,vertexUv3s:At,pointsUvs:$.isPoints===!0&&!!k.attributes.uv&&(Xe||Te),fog:!!z,useFog:C.fog===!0,fogExp2:z&&z.isFogExp2,flatShading:C.flatShading===!0,sizeAttenuation:C.sizeAttenuation===!0,logarithmicDepthBuffer:m,skinning:$.isSkinnedMesh===!0,morphTargets:k.morphAttributes.position!==void 0,morphNormals:k.morphAttributes.normal!==void 0,morphColors:k.morphAttributes.color!==void 0,morphTargetsCount:ee,morphTextureStride:ce,numDirLights:T.directional.length,numPointLights:T.point.length,numSpotLights:T.spot.length,numSpotLightMaps:T.spotLightMap.length,numRectAreaLights:T.rectArea.length,numHemiLights:T.hemi.length,numDirLightShadows:T.directionalShadowMap.length,numPointLightShadows:T.pointShadowMap.length,numSpotLightShadows:T.spotShadowMap.length,numSpotLightShadowsWithMaps:T.numSpotLightShadowsWithMaps,numLightProbes:T.numLightProbes,numClippingPlanes:c.numPlanes,numClipIntersection:c.numIntersection,dithering:C.dithering,shadowMapEnabled:r.shadowMap.enabled&&O.length>0,shadowMapType:r.shadowMap.type,toneMapping:Rt,useLegacyLights:r._useLegacyLights,decodeVideoTexture:Xe&&C.map.isVideoTexture===!0&&dn.getTransfer(C.map.colorSpace)===vn,premultipliedAlpha:C.premultipliedAlpha,doubleSided:C.side===hs,flipSided:C.side===Ii,useDepthPacking:C.depthPacking>=0,depthPacking:C.depthPacking||0,index0AttributeName:C.index0AttributeName,extensionDerivatives:De&&C.extensions.derivatives===!0,extensionFragDepth:De&&C.extensions.fragDepth===!0,extensionDrawBuffers:De&&C.extensions.drawBuffers===!0,extensionShaderTextureLOD:De&&C.extensions.shaderTextureLOD===!0,extensionClipCullDistance:De&&C.extensions.clipCullDistance&&n.has("WEBGL_clip_cull_distance"),rendererExtensionFragDepth:p||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:p||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:p||n.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:C.customProgramCacheKey()}}function _(C){const T=[];if(C.shaderID?T.push(C.shaderID):(T.push(C.customVertexShaderID),T.push(C.customFragmentShaderID)),C.defines!==void 0)for(const O in C.defines)T.push(O),T.push(C.defines[O]);return C.isRawShaderMaterial===!1&&(b(T,C),E(T,C),T.push(r.outputColorSpace)),T.push(C.customProgramCacheKey),T.join()}function b(C,T){C.push(T.precision),C.push(T.outputColorSpace),C.push(T.envMapMode),C.push(T.envMapCubeUVHeight),C.push(T.mapUv),C.push(T.alphaMapUv),C.push(T.lightMapUv),C.push(T.aoMapUv),C.push(T.bumpMapUv),C.push(T.normalMapUv),C.push(T.displacementMapUv),C.push(T.emissiveMapUv),C.push(T.metalnessMapUv),C.push(T.roughnessMapUv),C.push(T.anisotropyMapUv),C.push(T.clearcoatMapUv),C.push(T.clearcoatNormalMapUv),C.push(T.clearcoatRoughnessMapUv),C.push(T.iridescenceMapUv),C.push(T.iridescenceThicknessMapUv),C.push(T.sheenColorMapUv),C.push(T.sheenRoughnessMapUv),C.push(T.specularMapUv),C.push(T.specularColorMapUv),C.push(T.specularIntensityMapUv),C.push(T.transmissionMapUv),C.push(T.thicknessMapUv),C.push(T.combine),C.push(T.fogExp2),C.push(T.sizeAttenuation),C.push(T.morphTargetsCount),C.push(T.morphAttributeCount),C.push(T.numDirLights),C.push(T.numPointLights),C.push(T.numSpotLights),C.push(T.numSpotLightMaps),C.push(T.numHemiLights),C.push(T.numRectAreaLights),C.push(T.numDirLightShadows),C.push(T.numPointLightShadows),C.push(T.numSpotLightShadows),C.push(T.numSpotLightShadowsWithMaps),C.push(T.numLightProbes),C.push(T.shadowMapType),C.push(T.toneMapping),C.push(T.numClippingPlanes),C.push(T.numClipIntersection),C.push(T.depthPacking)}function E(C,T){u.disableAll(),T.isWebGL2&&u.enable(0),T.supportsVertexTextures&&u.enable(1),T.instancing&&u.enable(2),T.instancingColor&&u.enable(3),T.matcap&&u.enable(4),T.envMap&&u.enable(5),T.normalMapObjectSpace&&u.enable(6),T.normalMapTangentSpace&&u.enable(7),T.clearcoat&&u.enable(8),T.iridescence&&u.enable(9),T.alphaTest&&u.enable(10),T.vertexColors&&u.enable(11),T.vertexAlphas&&u.enable(12),T.vertexUv1s&&u.enable(13),T.vertexUv2s&&u.enable(14),T.vertexUv3s&&u.enable(15),T.vertexTangents&&u.enable(16),T.anisotropy&&u.enable(17),T.alphaHash&&u.enable(18),T.batching&&u.enable(19),C.push(u.mask),u.disableAll(),T.fog&&u.enable(0),T.useFog&&u.enable(1),T.flatShading&&u.enable(2),T.logarithmicDepthBuffer&&u.enable(3),T.skinning&&u.enable(4),T.morphTargets&&u.enable(5),T.morphNormals&&u.enable(6),T.morphColors&&u.enable(7),T.premultipliedAlpha&&u.enable(8),T.shadowMapEnabled&&u.enable(9),T.useLegacyLights&&u.enable(10),T.doubleSided&&u.enable(11),T.flipSided&&u.enable(12),T.useDepthPacking&&u.enable(13),T.dithering&&u.enable(14),T.transmission&&u.enable(15),T.sheen&&u.enable(16),T.opaque&&u.enable(17),T.pointsUvs&&u.enable(18),T.decodeVideoTexture&&u.enable(19),C.push(u.mask)}function R(C){const T=A[C.type];let O;if(T){const X=ks[T];O=yR.clone(X.uniforms)}else O=C.uniforms;return O}function D(C,T){let O;for(let X=0,$=d.length;X<$;X++){const z=d[X];if(z.cacheKey===T){O=z,++O.usedTimes;break}}return O===void 0&&(O=new FL(r,T,C,o),d.push(O)),O}function L(C){if(--C.usedTimes===0){const T=d.indexOf(C);d[T]=d[d.length-1],d.pop(),C.destroy()}}function w(C){f.remove(C)}function B(){f.dispose()}return{getParameters:S,getProgramCacheKey:_,getUniforms:R,acquireProgram:D,releaseProgram:L,releaseShaderCache:w,programs:d,dispose:B}}function GL(){let r=new WeakMap;function e(o){let c=r.get(o);return c===void 0&&(c={},r.set(o,c)),c}function t(o){r.delete(o)}function n(o,c,u){r.get(o)[c]=u}function s(){r=new WeakMap}return{get:e,remove:t,update:n,dispose:s}}function VL(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function zy(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function Hy(){const r=[];let e=0;const t=[],n=[],s=[];function o(){e=0,t.length=0,n.length=0,s.length=0}function c(m,g,v,A,y,S){let _=r[e];return _===void 0?(_={id:m.id,object:m,geometry:g,material:v,groupOrder:A,renderOrder:m.renderOrder,z:y,group:S},r[e]=_):(_.id=m.id,_.object=m,_.geometry=g,_.material=v,_.groupOrder=A,_.renderOrder=m.renderOrder,_.z=y,_.group=S),e++,_}function u(m,g,v,A,y,S){const _=c(m,g,v,A,y,S);v.transmission>0?n.push(_):v.transparent===!0?s.push(_):t.push(_)}function f(m,g,v,A,y,S){const _=c(m,g,v,A,y,S);v.transmission>0?n.unshift(_):v.transparent===!0?s.unshift(_):t.unshift(_)}function d(m,g){t.length>1&&t.sort(m||VL),n.length>1&&n.sort(g||zy),s.length>1&&s.sort(g||zy)}function p(){for(let m=e,g=r.length;m<g;m++){const v=r[m];if(v.id===null)break;v.id=null,v.object=null,v.geometry=null,v.material=null,v.group=null}}return{opaque:t,transmissive:n,transparent:s,init:o,push:u,unshift:f,finish:p,sort:d}}function kL(){let r=new WeakMap;function e(n,s){const o=r.get(n);let c;return o===void 0?(c=new Hy,r.set(n,[c])):s>=o.length?(c=new Hy,o.push(c)):c=o[s],c}function t(){r=new WeakMap}return{get:e,dispose:t}}function WL(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new ne,color:new jt};break;case"SpotLight":t={position:new ne,direction:new ne,color:new jt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new ne,color:new jt,distance:0,decay:0};break;case"HemisphereLight":t={direction:new ne,skyColor:new jt,groundColor:new jt};break;case"RectAreaLight":t={color:new jt,position:new ne,halfWidth:new ne,halfHeight:new ne};break}return r[e.id]=t,t}}}function XL(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new vt,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let qL=0;function YL(r,e){return(e.castShadow?2:0)-(r.castShadow?2:0)+(e.map?1:0)-(r.map?1:0)}function $L(r,e){const t=new WL,n=XL(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let p=0;p<9;p++)s.probe.push(new ne);const o=new ne,c=new Bt,u=new Bt;function f(p,m){let g=0,v=0,A=0;for(let X=0;X<9;X++)s.probe[X].set(0,0,0);let y=0,S=0,_=0,b=0,E=0,R=0,D=0,L=0,w=0,B=0,C=0;p.sort(YL);const T=m===!0?Math.PI:1;for(let X=0,$=p.length;X<$;X++){const z=p[X],k=z.color,I=z.intensity,Y=z.distance,q=z.shadow&&z.shadow.map?z.shadow.map.texture:null;if(z.isAmbientLight)g+=k.r*I*T,v+=k.g*I*T,A+=k.b*I*T;else if(z.isLightProbe){for(let J=0;J<9;J++)s.probe[J].addScaledVector(z.sh.coefficients[J],I);C++}else if(z.isDirectionalLight){const J=t.get(z);if(J.color.copy(z.color).multiplyScalar(z.intensity*T),z.castShadow){const F=z.shadow,ee=n.get(z);ee.shadowBias=F.bias,ee.shadowNormalBias=F.normalBias,ee.shadowRadius=F.radius,ee.shadowMapSize=F.mapSize,s.directionalShadow[y]=ee,s.directionalShadowMap[y]=q,s.directionalShadowMatrix[y]=z.shadow.matrix,R++}s.directional[y]=J,y++}else if(z.isSpotLight){const J=t.get(z);J.position.setFromMatrixPosition(z.matrixWorld),J.color.copy(k).multiplyScalar(I*T),J.distance=Y,J.coneCos=Math.cos(z.angle),J.penumbraCos=Math.cos(z.angle*(1-z.penumbra)),J.decay=z.decay,s.spot[_]=J;const F=z.shadow;if(z.map&&(s.spotLightMap[w]=z.map,w++,F.updateMatrices(z),z.castShadow&&B++),s.spotLightMatrix[_]=F.matrix,z.castShadow){const ee=n.get(z);ee.shadowBias=F.bias,ee.shadowNormalBias=F.normalBias,ee.shadowRadius=F.radius,ee.shadowMapSize=F.mapSize,s.spotShadow[_]=ee,s.spotShadowMap[_]=q,L++}_++}else if(z.isRectAreaLight){const J=t.get(z);J.color.copy(k).multiplyScalar(I),J.halfWidth.set(z.width*.5,0,0),J.halfHeight.set(0,z.height*.5,0),s.rectArea[b]=J,b++}else if(z.isPointLight){const J=t.get(z);if(J.color.copy(z.color).multiplyScalar(z.intensity*T),J.distance=z.distance,J.decay=z.decay,z.castShadow){const F=z.shadow,ee=n.get(z);ee.shadowBias=F.bias,ee.shadowNormalBias=F.normalBias,ee.shadowRadius=F.radius,ee.shadowMapSize=F.mapSize,ee.shadowCameraNear=F.camera.near,ee.shadowCameraFar=F.camera.far,s.pointShadow[S]=ee,s.pointShadowMap[S]=q,s.pointShadowMatrix[S]=z.shadow.matrix,D++}s.point[S]=J,S++}else if(z.isHemisphereLight){const J=t.get(z);J.skyColor.copy(z.color).multiplyScalar(I*T),J.groundColor.copy(z.groundColor).multiplyScalar(I*T),s.hemi[E]=J,E++}}b>0&&(e.isWebGL2?r.has("OES_texture_float_linear")===!0?(s.rectAreaLTC1=ut.LTC_FLOAT_1,s.rectAreaLTC2=ut.LTC_FLOAT_2):(s.rectAreaLTC1=ut.LTC_HALF_1,s.rectAreaLTC2=ut.LTC_HALF_2):r.has("OES_texture_float_linear")===!0?(s.rectAreaLTC1=ut.LTC_FLOAT_1,s.rectAreaLTC2=ut.LTC_FLOAT_2):r.has("OES_texture_half_float_linear")===!0?(s.rectAreaLTC1=ut.LTC_HALF_1,s.rectAreaLTC2=ut.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),s.ambient[0]=g,s.ambient[1]=v,s.ambient[2]=A;const O=s.hash;(O.directionalLength!==y||O.pointLength!==S||O.spotLength!==_||O.rectAreaLength!==b||O.hemiLength!==E||O.numDirectionalShadows!==R||O.numPointShadows!==D||O.numSpotShadows!==L||O.numSpotMaps!==w||O.numLightProbes!==C)&&(s.directional.length=y,s.spot.length=_,s.rectArea.length=b,s.point.length=S,s.hemi.length=E,s.directionalShadow.length=R,s.directionalShadowMap.length=R,s.pointShadow.length=D,s.pointShadowMap.length=D,s.spotShadow.length=L,s.spotShadowMap.length=L,s.directionalShadowMatrix.length=R,s.pointShadowMatrix.length=D,s.spotLightMatrix.length=L+w-B,s.spotLightMap.length=w,s.numSpotLightShadowsWithMaps=B,s.numLightProbes=C,O.directionalLength=y,O.pointLength=S,O.spotLength=_,O.rectAreaLength=b,O.hemiLength=E,O.numDirectionalShadows=R,O.numPointShadows=D,O.numSpotShadows=L,O.numSpotMaps=w,O.numLightProbes=C,s.version=qL++)}function d(p,m){let g=0,v=0,A=0,y=0,S=0;const _=m.matrixWorldInverse;for(let b=0,E=p.length;b<E;b++){const R=p[b];if(R.isDirectionalLight){const D=s.directional[g];D.direction.setFromMatrixPosition(R.matrixWorld),o.setFromMatrixPosition(R.target.matrixWorld),D.direction.sub(o),D.direction.transformDirection(_),g++}else if(R.isSpotLight){const D=s.spot[A];D.position.setFromMatrixPosition(R.matrixWorld),D.position.applyMatrix4(_),D.direction.setFromMatrixPosition(R.matrixWorld),o.setFromMatrixPosition(R.target.matrixWorld),D.direction.sub(o),D.direction.transformDirection(_),A++}else if(R.isRectAreaLight){const D=s.rectArea[y];D.position.setFromMatrixPosition(R.matrixWorld),D.position.applyMatrix4(_),u.identity(),c.copy(R.matrixWorld),c.premultiply(_),u.extractRotation(c),D.halfWidth.set(R.width*.5,0,0),D.halfHeight.set(0,R.height*.5,0),D.halfWidth.applyMatrix4(u),D.halfHeight.applyMatrix4(u),y++}else if(R.isPointLight){const D=s.point[v];D.position.setFromMatrixPosition(R.matrixWorld),D.position.applyMatrix4(_),v++}else if(R.isHemisphereLight){const D=s.hemi[S];D.direction.setFromMatrixPosition(R.matrixWorld),D.direction.transformDirection(_),S++}}}return{setup:f,setupView:d,state:s}}function Gy(r,e){const t=new $L(r,e),n=[],s=[];function o(){n.length=0,s.length=0}function c(m){n.push(m)}function u(m){s.push(m)}function f(m){t.setup(n,m)}function d(m){t.setupView(n,m)}return{init:o,state:{lightsArray:n,shadowsArray:s,lights:t},setupLights:f,setupLightsView:d,pushLight:c,pushShadow:u}}function QL(r,e){let t=new WeakMap;function n(o,c=0){const u=t.get(o);let f;return u===void 0?(f=new Gy(r,e),t.set(o,[f])):c>=u.length?(f=new Gy(r,e),u.push(f)):f=u[c],f}function s(){t=new WeakMap}return{get:n,dispose:s}}let KL=class extends Eh{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=V1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}},jL=class extends Eh{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}};const ZL=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,JL=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function eP(r,e,t){let n=new XE;const s=new vt,o=new vt,c=new ti,u=new KL({depthPacking:k1}),f=new jL,d={},p=t.maxTextureSize,m={[js]:Ii,[Ii]:js,[hs]:hs},g=new gs({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new vt},radius:{value:4}},vertexShader:ZL,fragmentShader:JL}),v=g.clone();v.defines.HORIZONTAL_PASS=1;const A=new Js;A.setAttribute("position",new ms(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const y=new On(A,g),S=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=hE;let _=this.type;this.render=function(L,w,B){if(S.enabled===!1||S.autoUpdate===!1&&S.needsUpdate===!1||L.length===0)return;const C=r.getRenderTarget(),T=r.getActiveCubeFace(),O=r.getActiveMipmapLevel(),X=r.state;X.setBlending(ba),X.buffers.color.setClear(1,1,1,1),X.buffers.depth.setTest(!0),X.setScissorTest(!1);const $=_!==wr&&this.type===wr,z=_===wr&&this.type!==wr;for(let k=0,I=L.length;k<I;k++){const Y=L[k],q=Y.shadow;if(q===void 0){console.warn("THREE.WebGLShadowMap:",Y,"has no shadow.");continue}if(q.autoUpdate===!1&&q.needsUpdate===!1)continue;s.copy(q.mapSize);const J=q.getFrameExtents();if(s.multiply(J),o.copy(q.mapSize),(s.x>p||s.y>p)&&(s.x>p&&(o.x=Math.floor(p/J.x),s.x=o.x*J.x,q.mapSize.x=o.x),s.y>p&&(o.y=Math.floor(p/J.y),s.y=o.y*J.y,q.mapSize.y=o.y)),q.map===null||$===!0||z===!0){const ee=this.type!==wr?{minFilter:li,magFilter:li}:{};q.map!==null&&q.map.dispose(),q.map=new Pa(s.x,s.y,ee),q.map.texture.name=Y.name+".shadowMap",q.camera.updateProjectionMatrix()}r.setRenderTarget(q.map),r.clear();const F=q.getViewportCount();for(let ee=0;ee<F;ee++){const ce=q.getViewport(ee);c.set(o.x*ce.x,o.y*ce.y,o.x*ce.z,o.y*ce.w),X.viewport(c),q.updateMatrices(Y,ee),n=q.getFrustum(),R(w,B,q.camera,Y,this.type)}q.isPointLightShadow!==!0&&this.type===wr&&b(q,B),q.needsUpdate=!1}_=this.type,S.needsUpdate=!1,r.setRenderTarget(C,T,O)};function b(L,w){const B=e.update(y);g.defines.VSM_SAMPLES!==L.blurSamples&&(g.defines.VSM_SAMPLES=L.blurSamples,v.defines.VSM_SAMPLES=L.blurSamples,g.needsUpdate=!0,v.needsUpdate=!0),L.mapPass===null&&(L.mapPass=new Pa(s.x,s.y)),g.uniforms.shadow_pass.value=L.map.texture,g.uniforms.resolution.value=L.mapSize,g.uniforms.radius.value=L.radius,r.setRenderTarget(L.mapPass),r.clear(),r.renderBufferDirect(w,null,B,g,y,null),v.uniforms.shadow_pass.value=L.mapPass.texture,v.uniforms.resolution.value=L.mapSize,v.uniforms.radius.value=L.radius,r.setRenderTarget(L.map),r.clear(),r.renderBufferDirect(w,null,B,v,y,null)}function E(L,w,B,C){let T=null;const O=B.isPointLight===!0?L.customDistanceMaterial:L.customDepthMaterial;if(O!==void 0)T=O;else if(T=B.isPointLight===!0?f:u,r.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const X=T.uuid,$=w.uuid;let z=d[X];z===void 0&&(z={},d[X]=z);let k=z[$];k===void 0&&(k=T.clone(),z[$]=k,w.addEventListener("dispose",D)),T=k}if(T.visible=w.visible,T.wireframe=w.wireframe,C===wr?T.side=w.shadowSide!==null?w.shadowSide:w.side:T.side=w.shadowSide!==null?w.shadowSide:m[w.side],T.alphaMap=w.alphaMap,T.alphaTest=w.alphaTest,T.map=w.map,T.clipShadows=w.clipShadows,T.clippingPlanes=w.clippingPlanes,T.clipIntersection=w.clipIntersection,T.displacementMap=w.displacementMap,T.displacementScale=w.displacementScale,T.displacementBias=w.displacementBias,T.wireframeLinewidth=w.wireframeLinewidth,T.linewidth=w.linewidth,B.isPointLight===!0&&T.isMeshDistanceMaterial===!0){const X=r.properties.get(T);X.light=B}return T}function R(L,w,B,C,T){if(L.visible===!1)return;if(L.layers.test(w.layers)&&(L.isMesh||L.isLine||L.isPoints)&&(L.castShadow||L.receiveShadow&&T===wr)&&(!L.frustumCulled||n.intersectsObject(L))){L.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse,L.matrixWorld);const $=e.update(L),z=L.material;if(Array.isArray(z)){const k=$.groups;for(let I=0,Y=k.length;I<Y;I++){const q=k[I],J=z[q.materialIndex];if(J&&J.visible){const F=E(L,J,C,T);L.onBeforeShadow(r,L,w,B,$,F,q),r.renderBufferDirect(B,null,$,F,L,q),L.onAfterShadow(r,L,w,B,$,F,q)}}}else if(z.visible){const k=E(L,z,C,T);L.onBeforeShadow(r,L,w,B,$,k,null),r.renderBufferDirect(B,null,$,k,L,null),L.onAfterShadow(r,L,w,B,$,k,null)}}const X=L.children;for(let $=0,z=X.length;$<z;$++)R(X[$],w,B,C,T)}function D(L){L.target.removeEventListener("dispose",D);for(const B in d){const C=d[B],T=L.target.uuid;T in C&&(C[T].dispose(),delete C[T])}}}function tP(r,e,t){const n=t.isWebGL2;function s(){let W=!1;const he=new ti;let De=null;const Ge=new ti(0,0,0,0);return{setMask:function(Je){De!==Je&&!W&&(r.colorMask(Je,Je,Je,Je),De=Je)},setLocked:function(Je){W=Je},setClear:function(Je,At,Rt,Mt,en){en===!0&&(Je*=Mt,At*=Mt,Rt*=Mt),he.set(Je,At,Rt,Mt),Ge.equals(he)===!1&&(r.clearColor(Je,At,Rt,Mt),Ge.copy(he))},reset:function(){W=!1,De=null,Ge.set(-1,0,0,0)}}}function o(){let W=!1,he=null,De=null,Ge=null;return{setTest:function(Je){Je?Ze(r.DEPTH_TEST):Xe(r.DEPTH_TEST)},setMask:function(Je){he!==Je&&!W&&(r.depthMask(Je),he=Je)},setFunc:function(Je){if(De!==Je){switch(Je){case v1:r.depthFunc(r.NEVER);break;case S1:r.depthFunc(r.ALWAYS);break;case x1:r.depthFunc(r.LESS);break;case oh:r.depthFunc(r.LEQUAL);break;case A1:r.depthFunc(r.EQUAL);break;case y1:r.depthFunc(r.GEQUAL);break;case M1:r.depthFunc(r.GREATER);break;case E1:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}De=Je}},setLocked:function(Je){W=Je},setClear:function(Je){Ge!==Je&&(r.clearDepth(Je),Ge=Je)},reset:function(){W=!1,he=null,De=null,Ge=null}}}function c(){let W=!1,he=null,De=null,Ge=null,Je=null,At=null,Rt=null,Mt=null,en=null;return{setTest:function(Dt){W||(Dt?Ze(r.STENCIL_TEST):Xe(r.STENCIL_TEST))},setMask:function(Dt){he!==Dt&&!W&&(r.stencilMask(Dt),he=Dt)},setFunc:function(Dt,qt,an){(De!==Dt||Ge!==qt||Je!==an)&&(r.stencilFunc(Dt,qt,an),De=Dt,Ge=qt,Je=an)},setOp:function(Dt,qt,an){(At!==Dt||Rt!==qt||Mt!==an)&&(r.stencilOp(Dt,qt,an),At=Dt,Rt=qt,Mt=an)},setLocked:function(Dt){W=Dt},setClear:function(Dt){en!==Dt&&(r.clearStencil(Dt),en=Dt)},reset:function(){W=!1,he=null,De=null,Ge=null,Je=null,At=null,Rt=null,Mt=null,en=null}}}const u=new s,f=new o,d=new c,p=new WeakMap,m=new WeakMap;let g={},v={},A=new WeakMap,y=[],S=null,_=!1,b=null,E=null,R=null,D=null,L=null,w=null,B=null,C=new jt(0,0,0),T=0,O=!1,X=null,$=null,z=null,k=null,I=null;const Y=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let q=!1,J=0;const F=r.getParameter(r.VERSION);F.indexOf("WebGL")!==-1?(J=parseFloat(/^WebGL (\d)/.exec(F)[1]),q=J>=1):F.indexOf("OpenGL ES")!==-1&&(J=parseFloat(/^OpenGL ES (\d)/.exec(F)[1]),q=J>=2);let ee=null,ce={};const ie=r.getParameter(r.SCISSOR_BOX),j=r.getParameter(r.VIEWPORT),ue=new ti().fromArray(ie),ge=new ti().fromArray(j);function Ae(W,he,De,Ge){const Je=new Uint8Array(4),At=r.createTexture();r.bindTexture(W,At),r.texParameteri(W,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(W,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let Rt=0;Rt<De;Rt++)n&&(W===r.TEXTURE_3D||W===r.TEXTURE_2D_ARRAY)?r.texImage3D(he,0,r.RGBA,1,1,Ge,0,r.RGBA,r.UNSIGNED_BYTE,Je):r.texImage2D(he+Rt,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,Je);return At}const Be={};Be[r.TEXTURE_2D]=Ae(r.TEXTURE_2D,r.TEXTURE_2D,1),Be[r.TEXTURE_CUBE_MAP]=Ae(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),n&&(Be[r.TEXTURE_2D_ARRAY]=Ae(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),Be[r.TEXTURE_3D]=Ae(r.TEXTURE_3D,r.TEXTURE_3D,1,1)),u.setClear(0,0,0,1),f.setClear(1),d.setClear(0),Ze(r.DEPTH_TEST),f.setFunc(oh),$e(!1),Q(yA),Ze(r.CULL_FACE),Ke(ba);function Ze(W){g[W]!==!0&&(r.enable(W),g[W]=!0)}function Xe(W){g[W]!==!1&&(r.disable(W),g[W]=!1)}function ft(W,he){return v[W]!==he?(r.bindFramebuffer(W,he),v[W]=he,n&&(W===r.DRAW_FRAMEBUFFER&&(v[r.FRAMEBUFFER]=he),W===r.FRAMEBUFFER&&(v[r.DRAW_FRAMEBUFFER]=he)),!0):!1}function _e(W,he){let De=y,Ge=!1;if(W)if(De=A.get(he),De===void 0&&(De=[],A.set(he,De)),W.isWebGLMultipleRenderTargets){const Je=W.texture;if(De.length!==Je.length||De[0]!==r.COLOR_ATTACHMENT0){for(let At=0,Rt=Je.length;At<Rt;At++)De[At]=r.COLOR_ATTACHMENT0+At;De.length=Je.length,Ge=!0}}else De[0]!==r.COLOR_ATTACHMENT0&&(De[0]=r.COLOR_ATTACHMENT0,Ge=!0);else De[0]!==r.BACK&&(De[0]=r.BACK,Ge=!0);Ge&&(t.isWebGL2?r.drawBuffers(De):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(De))}function ct(W){return S!==W?(r.useProgram(W),S=W,!0):!1}const Z={[po]:r.FUNC_ADD,[i1]:r.FUNC_SUBTRACT,[s1]:r.FUNC_REVERSE_SUBTRACT};if(n)Z[bA]=r.MIN,Z[CA]=r.MAX;else{const W=e.get("EXT_blend_minmax");W!==null&&(Z[bA]=W.MIN_EXT,Z[CA]=W.MAX_EXT)}const it={[r1]:r.ZERO,[a1]:r.ONE,[o1]:r.SRC_COLOR,[bu]:r.SRC_ALPHA,[h1]:r.SRC_ALPHA_SATURATE,[f1]:r.DST_COLOR,[c1]:r.DST_ALPHA,[l1]:r.ONE_MINUS_SRC_COLOR,[Cu]:r.ONE_MINUS_SRC_ALPHA,[d1]:r.ONE_MINUS_DST_COLOR,[u1]:r.ONE_MINUS_DST_ALPHA,[p1]:r.CONSTANT_COLOR,[m1]:r.ONE_MINUS_CONSTANT_COLOR,[g1]:r.CONSTANT_ALPHA,[_1]:r.ONE_MINUS_CONSTANT_ALPHA};function Ke(W,he,De,Ge,Je,At,Rt,Mt,en,Dt){if(W===ba){_===!0&&(Xe(r.BLEND),_=!1);return}if(_===!1&&(Ze(r.BLEND),_=!0),W!==pE){if(W!==b||Dt!==O){if((E!==po||L!==po)&&(r.blendEquation(r.FUNC_ADD),E=po,L=po),Dt)switch(W){case Ca:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case MA:r.blendFunc(r.ONE,r.ONE);break;case EA:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case TA:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",W);break}else switch(W){case Ca:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case MA:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case EA:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case TA:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",W);break}R=null,D=null,w=null,B=null,C.set(0,0,0),T=0,b=W,O=Dt}return}Je=Je||he,At=At||De,Rt=Rt||Ge,(he!==E||Je!==L)&&(r.blendEquationSeparate(Z[he],Z[Je]),E=he,L=Je),(De!==R||Ge!==D||At!==w||Rt!==B)&&(r.blendFuncSeparate(it[De],it[Ge],it[At],it[Rt]),R=De,D=Ge,w=At,B=Rt),(Mt.equals(C)===!1||en!==T)&&(r.blendColor(Mt.r,Mt.g,Mt.b,en),C.copy(Mt),T=en),b=W,O=!1}function at(W,he){W.side===hs?Xe(r.CULL_FACE):Ze(r.CULL_FACE);let De=W.side===Ii;he&&(De=!De),$e(De),W.blending===Ca&&W.transparent===!1?Ke(ba):Ke(W.blending,W.blendEquation,W.blendSrc,W.blendDst,W.blendEquationAlpha,W.blendSrcAlpha,W.blendDstAlpha,W.blendColor,W.blendAlpha,W.premultipliedAlpha),f.setFunc(W.depthFunc),f.setTest(W.depthTest),f.setMask(W.depthWrite),u.setMask(W.colorWrite);const Ge=W.stencilWrite;d.setTest(Ge),Ge&&(d.setMask(W.stencilWriteMask),d.setFunc(W.stencilFunc,W.stencilRef,W.stencilFuncMask),d.setOp(W.stencilFail,W.stencilZFail,W.stencilZPass)),N(W.polygonOffset,W.polygonOffsetFactor,W.polygonOffsetUnits),W.alphaToCoverage===!0?Ze(r.SAMPLE_ALPHA_TO_COVERAGE):Xe(r.SAMPLE_ALPHA_TO_COVERAGE)}function $e(W){X!==W&&(W?r.frontFace(r.CW):r.frontFace(r.CCW),X=W)}function Q(W){W!==e1?(Ze(r.CULL_FACE),W!==$&&(W===yA?r.cullFace(r.BACK):W===t1?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Xe(r.CULL_FACE),$=W}function G(W){W!==z&&(q&&r.lineWidth(W),z=W)}function N(W,he,De){W?(Ze(r.POLYGON_OFFSET_FILL),(k!==he||I!==De)&&(r.polygonOffset(he,De),k=he,I=De)):Xe(r.POLYGON_OFFSET_FILL)}function U(W){W?Ze(r.SCISSOR_TEST):Xe(r.SCISSOR_TEST)}function se(W){W===void 0&&(W=r.TEXTURE0+Y-1),ee!==W&&(r.activeTexture(W),ee=W)}function fe(W,he,De){De===void 0&&(ee===null?De=r.TEXTURE0+Y-1:De=ee);let Ge=ce[De];Ge===void 0&&(Ge={type:void 0,texture:void 0},ce[De]=Ge),(Ge.type!==W||Ge.texture!==he)&&(ee!==De&&(r.activeTexture(De),ee=De),r.bindTexture(W,he||Be[W]),Ge.type=W,Ge.texture=he)}function Ee(){const W=ce[ee];W!==void 0&&W.type!==void 0&&(r.bindTexture(W.type,null),W.type=void 0,W.texture=void 0)}function pe(){try{r.compressedTexImage2D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Oe(){try{r.compressedTexImage3D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function ze(){try{r.texSubImage2D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function je(){try{r.texSubImage3D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Pe(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Ve(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function te(){try{r.texStorage2D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Ce(){try{r.texStorage3D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function ke(){try{r.texImage2D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function be(){try{r.texImage3D.apply(r,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function tt(W){ue.equals(W)===!1&&(r.scissor(W.x,W.y,W.z,W.w),ue.copy(W))}function st(W){ge.equals(W)===!1&&(r.viewport(W.x,W.y,W.z,W.w),ge.copy(W))}function St(W,he){let De=m.get(he);De===void 0&&(De=new WeakMap,m.set(he,De));let Ge=De.get(W);Ge===void 0&&(Ge=r.getUniformBlockIndex(he,W.name),De.set(W,Ge))}function oe(W,he){const Ge=m.get(he).get(W);p.get(he)!==Ge&&(r.uniformBlockBinding(he,Ge,W.__bindingPointIndex),p.set(he,Ge))}function Te(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),n===!0&&(r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null)),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),g={},ee=null,ce={},v={},A=new WeakMap,y=[],S=null,_=!1,b=null,E=null,R=null,D=null,L=null,w=null,B=null,C=new jt(0,0,0),T=0,O=!1,X=null,$=null,z=null,k=null,I=null,ue.set(0,0,r.canvas.width,r.canvas.height),ge.set(0,0,r.canvas.width,r.canvas.height),u.reset(),f.reset(),d.reset()}return{buffers:{color:u,depth:f,stencil:d},enable:Ze,disable:Xe,bindFramebuffer:ft,drawBuffers:_e,useProgram:ct,setBlending:Ke,setMaterial:at,setFlipSided:$e,setCullFace:Q,setLineWidth:G,setPolygonOffset:N,setScissorTest:U,activeTexture:se,bindTexture:fe,unbindTexture:Ee,compressedTexImage2D:pe,compressedTexImage3D:Oe,texImage2D:ke,texImage3D:be,updateUBOMapping:St,uniformBlockBinding:oe,texStorage2D:te,texStorage3D:Ce,texSubImage2D:ze,texSubImage3D:je,compressedTexSubImage2D:Pe,compressedTexSubImage3D:Ve,scissor:tt,viewport:st,reset:Te}}function nP(r,e,t,n,s,o,c){const u=s.isWebGL2,f=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,d=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),p=new WeakMap;let m;const g=new WeakMap;let v=!1;try{v=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function A(Q,G){return v?new OffscreenCanvas(Q,G):dh("canvas")}function y(Q,G,N,U){let se=1;if((Q.width>U||Q.height>U)&&(se=U/Math.max(Q.width,Q.height)),se<1||G===!0)if(typeof HTMLImageElement<"u"&&Q instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&Q instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&Q instanceof ImageBitmap){const fe=G?o0:Math.floor,Ee=fe(se*Q.width),pe=fe(se*Q.height);m===void 0&&(m=A(Ee,pe));const Oe=N?A(Ee,pe):m;return Oe.width=Ee,Oe.height=pe,Oe.getContext("2d").drawImage(Q,0,0,Ee,pe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Q.width+"x"+Q.height+") to ("+Ee+"x"+pe+")."),Oe}else return"data"in Q&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Q.width+"x"+Q.height+")."),Q;return Q}function S(Q){return iy(Q.width)&&iy(Q.height)}function _(Q){return u?!1:Q.wrapS!==Ls||Q.wrapT!==Ls||Q.minFilter!==li&&Q.minFilter!==fs}function b(Q,G){return Q.generateMipmaps&&G&&Q.minFilter!==li&&Q.minFilter!==fs}function E(Q){r.generateMipmap(Q)}function R(Q,G,N,U,se=!1){if(u===!1)return G;if(Q!==null){if(r[Q]!==void 0)return r[Q];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+Q+"'")}let fe=G;if(G===r.RED&&(N===r.FLOAT&&(fe=r.R32F),N===r.HALF_FLOAT&&(fe=r.R16F),N===r.UNSIGNED_BYTE&&(fe=r.R8)),G===r.RED_INTEGER&&(N===r.UNSIGNED_BYTE&&(fe=r.R8UI),N===r.UNSIGNED_SHORT&&(fe=r.R16UI),N===r.UNSIGNED_INT&&(fe=r.R32UI),N===r.BYTE&&(fe=r.R8I),N===r.SHORT&&(fe=r.R16I),N===r.INT&&(fe=r.R32I)),G===r.RG&&(N===r.FLOAT&&(fe=r.RG32F),N===r.HALF_FLOAT&&(fe=r.RG16F),N===r.UNSIGNED_BYTE&&(fe=r.RG8)),G===r.RGBA){const Ee=se?lh:dn.getTransfer(U);N===r.FLOAT&&(fe=r.RGBA32F),N===r.HALF_FLOAT&&(fe=r.RGBA16F),N===r.UNSIGNED_BYTE&&(fe=Ee===vn?r.SRGB8_ALPHA8:r.RGBA8),N===r.UNSIGNED_SHORT_4_4_4_4&&(fe=r.RGBA4),N===r.UNSIGNED_SHORT_5_5_5_1&&(fe=r.RGB5_A1)}return(fe===r.R16F||fe===r.R32F||fe===r.RG16F||fe===r.RG32F||fe===r.RGBA16F||fe===r.RGBA32F)&&e.get("EXT_color_buffer_float"),fe}function D(Q,G,N){return b(Q,N)===!0||Q.isFramebufferTexture&&Q.minFilter!==li&&Q.minFilter!==fs?Math.log2(Math.max(G.width,G.height))+1:Q.mipmaps!==void 0&&Q.mipmaps.length>0?Q.mipmaps.length:Q.isCompressedTexture&&Array.isArray(Q.image)?G.mipmaps.length:1}function L(Q){return Q===li||Q===RA||Q===zm?r.NEAREST:r.LINEAR}function w(Q){const G=Q.target;G.removeEventListener("dispose",w),C(G),G.isVideoTexture&&p.delete(G)}function B(Q){const G=Q.target;G.removeEventListener("dispose",B),O(G)}function C(Q){const G=n.get(Q);if(G.__webglInit===void 0)return;const N=Q.source,U=g.get(N);if(U){const se=U[G.__cacheKey];se.usedTimes--,se.usedTimes===0&&T(Q),Object.keys(U).length===0&&g.delete(N)}n.remove(Q)}function T(Q){const G=n.get(Q);r.deleteTexture(G.__webglTexture);const N=Q.source,U=g.get(N);delete U[G.__cacheKey],c.memory.textures--}function O(Q){const G=Q.texture,N=n.get(Q),U=n.get(G);if(U.__webglTexture!==void 0&&(r.deleteTexture(U.__webglTexture),c.memory.textures--),Q.depthTexture&&Q.depthTexture.dispose(),Q.isWebGLCubeRenderTarget)for(let se=0;se<6;se++){if(Array.isArray(N.__webglFramebuffer[se]))for(let fe=0;fe<N.__webglFramebuffer[se].length;fe++)r.deleteFramebuffer(N.__webglFramebuffer[se][fe]);else r.deleteFramebuffer(N.__webglFramebuffer[se]);N.__webglDepthbuffer&&r.deleteRenderbuffer(N.__webglDepthbuffer[se])}else{if(Array.isArray(N.__webglFramebuffer))for(let se=0;se<N.__webglFramebuffer.length;se++)r.deleteFramebuffer(N.__webglFramebuffer[se]);else r.deleteFramebuffer(N.__webglFramebuffer);if(N.__webglDepthbuffer&&r.deleteRenderbuffer(N.__webglDepthbuffer),N.__webglMultisampledFramebuffer&&r.deleteFramebuffer(N.__webglMultisampledFramebuffer),N.__webglColorRenderbuffer)for(let se=0;se<N.__webglColorRenderbuffer.length;se++)N.__webglColorRenderbuffer[se]&&r.deleteRenderbuffer(N.__webglColorRenderbuffer[se]);N.__webglDepthRenderbuffer&&r.deleteRenderbuffer(N.__webglDepthRenderbuffer)}if(Q.isWebGLMultipleRenderTargets)for(let se=0,fe=G.length;se<fe;se++){const Ee=n.get(G[se]);Ee.__webglTexture&&(r.deleteTexture(Ee.__webglTexture),c.memory.textures--),n.remove(G[se])}n.remove(G),n.remove(Q)}let X=0;function $(){X=0}function z(){const Q=X;return Q>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+Q+" texture units while this GPU supports only "+s.maxTextures),X+=1,Q}function k(Q){const G=[];return G.push(Q.wrapS),G.push(Q.wrapT),G.push(Q.wrapR||0),G.push(Q.magFilter),G.push(Q.minFilter),G.push(Q.anisotropy),G.push(Q.internalFormat),G.push(Q.format),G.push(Q.type),G.push(Q.generateMipmaps),G.push(Q.premultiplyAlpha),G.push(Q.flipY),G.push(Q.unpackAlignment),G.push(Q.colorSpace),G.join()}function I(Q,G){const N=n.get(Q);if(Q.isVideoTexture&&at(Q),Q.isRenderTargetTexture===!1&&Q.version>0&&N.__version!==Q.version){const U=Q.image;if(U===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(U.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{ue(N,Q,G);return}}t.bindTexture(r.TEXTURE_2D,N.__webglTexture,r.TEXTURE0+G)}function Y(Q,G){const N=n.get(Q);if(Q.version>0&&N.__version!==Q.version){ue(N,Q,G);return}t.bindTexture(r.TEXTURE_2D_ARRAY,N.__webglTexture,r.TEXTURE0+G)}function q(Q,G){const N=n.get(Q);if(Q.version>0&&N.__version!==Q.version){ue(N,Q,G);return}t.bindTexture(r.TEXTURE_3D,N.__webglTexture,r.TEXTURE0+G)}function J(Q,G){const N=n.get(Q);if(Q.version>0&&N.__version!==Q.version){ge(N,Q,G);return}t.bindTexture(r.TEXTURE_CUBE_MAP,N.__webglTexture,r.TEXTURE0+G)}const F={[i0]:r.REPEAT,[Ls]:r.CLAMP_TO_EDGE,[s0]:r.MIRRORED_REPEAT},ee={[li]:r.NEAREST,[RA]:r.NEAREST_MIPMAP_NEAREST,[zm]:r.NEAREST_MIPMAP_LINEAR,[fs]:r.LINEAR,[U1]:r.LINEAR_MIPMAP_NEAREST,[Ru]:r.LINEAR_MIPMAP_LINEAR},ce={[q1]:r.NEVER,[Z1]:r.ALWAYS,[Y1]:r.LESS,[ME]:r.LEQUAL,[$1]:r.EQUAL,[j1]:r.GEQUAL,[Q1]:r.GREATER,[K1]:r.NOTEQUAL};function ie(Q,G,N){if(N?(r.texParameteri(Q,r.TEXTURE_WRAP_S,F[G.wrapS]),r.texParameteri(Q,r.TEXTURE_WRAP_T,F[G.wrapT]),(Q===r.TEXTURE_3D||Q===r.TEXTURE_2D_ARRAY)&&r.texParameteri(Q,r.TEXTURE_WRAP_R,F[G.wrapR]),r.texParameteri(Q,r.TEXTURE_MAG_FILTER,ee[G.magFilter]),r.texParameteri(Q,r.TEXTURE_MIN_FILTER,ee[G.minFilter])):(r.texParameteri(Q,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(Q,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),(Q===r.TEXTURE_3D||Q===r.TEXTURE_2D_ARRAY)&&r.texParameteri(Q,r.TEXTURE_WRAP_R,r.CLAMP_TO_EDGE),(G.wrapS!==Ls||G.wrapT!==Ls)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),r.texParameteri(Q,r.TEXTURE_MAG_FILTER,L(G.magFilter)),r.texParameteri(Q,r.TEXTURE_MIN_FILTER,L(G.minFilter)),G.minFilter!==li&&G.minFilter!==fs&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),G.compareFunction&&(r.texParameteri(Q,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(Q,r.TEXTURE_COMPARE_FUNC,ce[G.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){const U=e.get("EXT_texture_filter_anisotropic");if(G.magFilter===li||G.minFilter!==zm&&G.minFilter!==Ru||G.type===Xs&&e.has("OES_texture_float_linear")===!1||u===!1&&G.type===tc&&e.has("OES_texture_half_float_linear")===!1)return;(G.anisotropy>1||n.get(G).__currentAnisotropy)&&(r.texParameterf(Q,U.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(G.anisotropy,s.getMaxAnisotropy())),n.get(G).__currentAnisotropy=G.anisotropy)}}function j(Q,G){let N=!1;Q.__webglInit===void 0&&(Q.__webglInit=!0,G.addEventListener("dispose",w));const U=G.source;let se=g.get(U);se===void 0&&(se={},g.set(U,se));const fe=k(G);if(fe!==Q.__cacheKey){se[fe]===void 0&&(se[fe]={texture:r.createTexture(),usedTimes:0},c.memory.textures++,N=!0),se[fe].usedTimes++;const Ee=se[Q.__cacheKey];Ee!==void 0&&(se[Q.__cacheKey].usedTimes--,Ee.usedTimes===0&&T(G)),Q.__cacheKey=fe,Q.__webglTexture=se[fe].texture}return N}function ue(Q,G,N){let U=r.TEXTURE_2D;(G.isDataArrayTexture||G.isCompressedArrayTexture)&&(U=r.TEXTURE_2D_ARRAY),G.isData3DTexture&&(U=r.TEXTURE_3D);const se=j(Q,G),fe=G.source;t.bindTexture(U,Q.__webglTexture,r.TEXTURE0+N);const Ee=n.get(fe);if(fe.version!==Ee.__version||se===!0){t.activeTexture(r.TEXTURE0+N);const pe=dn.getPrimaries(dn.workingColorSpace),Oe=G.colorSpace===ps?null:dn.getPrimaries(G.colorSpace),ze=G.colorSpace===ps||pe===Oe?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,G.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,G.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,G.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,ze);const je=_(G)&&S(G.image)===!1;let Pe=y(G.image,je,!1,s.maxTextureSize);Pe=$e(G,Pe);const Ve=S(Pe)||u,te=o.convert(G.format,G.colorSpace);let Ce=o.convert(G.type),ke=R(G.internalFormat,te,Ce,G.colorSpace,G.isVideoTexture);ie(U,G,Ve);let be;const tt=G.mipmaps,st=u&&G.isVideoTexture!==!0&&ke!==AE,St=Ee.__version===void 0||se===!0,oe=D(G,Pe,Ve);if(G.isDepthTexture)ke=r.DEPTH_COMPONENT,u?G.type===Xs?ke=r.DEPTH_COMPONENT32F:G.type===Qi?ke=r.DEPTH_COMPONENT24:G.type===Mo?ke=r.DEPTH24_STENCIL8:ke=r.DEPTH_COMPONENT16:G.type===Xs&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),G.format===wa&&ke===r.DEPTH_COMPONENT&&G.type!==r_&&G.type!==Qi&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),G.type=Qi,Ce=o.convert(G.type)),G.format===nc&&ke===r.DEPTH_COMPONENT&&(ke=r.DEPTH_STENCIL,G.type!==Mo&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),G.type=Mo,Ce=o.convert(G.type))),St&&(st?t.texStorage2D(r.TEXTURE_2D,1,ke,Pe.width,Pe.height):t.texImage2D(r.TEXTURE_2D,0,ke,Pe.width,Pe.height,0,te,Ce,null));else if(G.isDataTexture)if(tt.length>0&&Ve){st&&St&&t.texStorage2D(r.TEXTURE_2D,oe,ke,tt[0].width,tt[0].height);for(let Te=0,W=tt.length;Te<W;Te++)be=tt[Te],st?t.texSubImage2D(r.TEXTURE_2D,Te,0,0,be.width,be.height,te,Ce,be.data):t.texImage2D(r.TEXTURE_2D,Te,ke,be.width,be.height,0,te,Ce,be.data);G.generateMipmaps=!1}else st?(St&&t.texStorage2D(r.TEXTURE_2D,oe,ke,Pe.width,Pe.height),t.texSubImage2D(r.TEXTURE_2D,0,0,0,Pe.width,Pe.height,te,Ce,Pe.data)):t.texImage2D(r.TEXTURE_2D,0,ke,Pe.width,Pe.height,0,te,Ce,Pe.data);else if(G.isCompressedTexture)if(G.isCompressedArrayTexture){st&&St&&t.texStorage3D(r.TEXTURE_2D_ARRAY,oe,ke,tt[0].width,tt[0].height,Pe.depth);for(let Te=0,W=tt.length;Te<W;Te++)be=tt[Te],G.format!==Ai?te!==null?st?t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Te,0,0,0,be.width,be.height,Pe.depth,te,be.data,0,0):t.compressedTexImage3D(r.TEXTURE_2D_ARRAY,Te,ke,be.width,be.height,Pe.depth,0,be.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):st?t.texSubImage3D(r.TEXTURE_2D_ARRAY,Te,0,0,0,be.width,be.height,Pe.depth,te,Ce,be.data):t.texImage3D(r.TEXTURE_2D_ARRAY,Te,ke,be.width,be.height,Pe.depth,0,te,Ce,be.data)}else{st&&St&&t.texStorage2D(r.TEXTURE_2D,oe,ke,tt[0].width,tt[0].height);for(let Te=0,W=tt.length;Te<W;Te++)be=tt[Te],G.format!==Ai?te!==null?st?t.compressedTexSubImage2D(r.TEXTURE_2D,Te,0,0,be.width,be.height,te,be.data):t.compressedTexImage2D(r.TEXTURE_2D,Te,ke,be.width,be.height,0,be.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):st?t.texSubImage2D(r.TEXTURE_2D,Te,0,0,be.width,be.height,te,Ce,be.data):t.texImage2D(r.TEXTURE_2D,Te,ke,be.width,be.height,0,te,Ce,be.data)}else if(G.isDataArrayTexture)st?(St&&t.texStorage3D(r.TEXTURE_2D_ARRAY,oe,ke,Pe.width,Pe.height,Pe.depth),t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,Pe.width,Pe.height,Pe.depth,te,Ce,Pe.data)):t.texImage3D(r.TEXTURE_2D_ARRAY,0,ke,Pe.width,Pe.height,Pe.depth,0,te,Ce,Pe.data);else if(G.isData3DTexture)st?(St&&t.texStorage3D(r.TEXTURE_3D,oe,ke,Pe.width,Pe.height,Pe.depth),t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,Pe.width,Pe.height,Pe.depth,te,Ce,Pe.data)):t.texImage3D(r.TEXTURE_3D,0,ke,Pe.width,Pe.height,Pe.depth,0,te,Ce,Pe.data);else if(G.isFramebufferTexture){if(St)if(st)t.texStorage2D(r.TEXTURE_2D,oe,ke,Pe.width,Pe.height);else{let Te=Pe.width,W=Pe.height;for(let he=0;he<oe;he++)t.texImage2D(r.TEXTURE_2D,he,ke,Te,W,0,te,Ce,null),Te>>=1,W>>=1}}else if(tt.length>0&&Ve){st&&St&&t.texStorage2D(r.TEXTURE_2D,oe,ke,tt[0].width,tt[0].height);for(let Te=0,W=tt.length;Te<W;Te++)be=tt[Te],st?t.texSubImage2D(r.TEXTURE_2D,Te,0,0,te,Ce,be):t.texImage2D(r.TEXTURE_2D,Te,ke,te,Ce,be);G.generateMipmaps=!1}else st?(St&&t.texStorage2D(r.TEXTURE_2D,oe,ke,Pe.width,Pe.height),t.texSubImage2D(r.TEXTURE_2D,0,0,0,te,Ce,Pe)):t.texImage2D(r.TEXTURE_2D,0,ke,te,Ce,Pe);b(G,Ve)&&E(U),Ee.__version=fe.version,G.onUpdate&&G.onUpdate(G)}Q.__version=G.version}function ge(Q,G,N){if(G.image.length!==6)return;const U=j(Q,G),se=G.source;t.bindTexture(r.TEXTURE_CUBE_MAP,Q.__webglTexture,r.TEXTURE0+N);const fe=n.get(se);if(se.version!==fe.__version||U===!0){t.activeTexture(r.TEXTURE0+N);const Ee=dn.getPrimaries(dn.workingColorSpace),pe=G.colorSpace===ps?null:dn.getPrimaries(G.colorSpace),Oe=G.colorSpace===ps||Ee===pe?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,G.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,G.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,G.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Oe);const ze=G.isCompressedTexture||G.image[0].isCompressedTexture,je=G.image[0]&&G.image[0].isDataTexture,Pe=[];for(let Te=0;Te<6;Te++)!ze&&!je?Pe[Te]=y(G.image[Te],!1,!0,s.maxCubemapSize):Pe[Te]=je?G.image[Te].image:G.image[Te],Pe[Te]=$e(G,Pe[Te]);const Ve=Pe[0],te=S(Ve)||u,Ce=o.convert(G.format,G.colorSpace),ke=o.convert(G.type),be=R(G.internalFormat,Ce,ke,G.colorSpace),tt=u&&G.isVideoTexture!==!0,st=fe.__version===void 0||U===!0;let St=D(G,Ve,te);ie(r.TEXTURE_CUBE_MAP,G,te);let oe;if(ze){tt&&st&&t.texStorage2D(r.TEXTURE_CUBE_MAP,St,be,Ve.width,Ve.height);for(let Te=0;Te<6;Te++){oe=Pe[Te].mipmaps;for(let W=0;W<oe.length;W++){const he=oe[W];G.format!==Ai?Ce!==null?tt?t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W,0,0,he.width,he.height,Ce,he.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W,be,he.width,he.height,0,he.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):tt?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W,0,0,he.width,he.height,Ce,ke,he.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W,be,he.width,he.height,0,Ce,ke,he.data)}}}else{oe=G.mipmaps,tt&&st&&(oe.length>0&&St++,t.texStorage2D(r.TEXTURE_CUBE_MAP,St,be,Pe[0].width,Pe[0].height));for(let Te=0;Te<6;Te++)if(je){tt?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,0,0,Pe[Te].width,Pe[Te].height,Ce,ke,Pe[Te].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,be,Pe[Te].width,Pe[Te].height,0,Ce,ke,Pe[Te].data);for(let W=0;W<oe.length;W++){const De=oe[W].image[Te].image;tt?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W+1,0,0,De.width,De.height,Ce,ke,De.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W+1,be,De.width,De.height,0,Ce,ke,De.data)}}else{tt?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,0,0,Ce,ke,Pe[Te]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,be,Ce,ke,Pe[Te]);for(let W=0;W<oe.length;W++){const he=oe[W];tt?t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W+1,0,0,Ce,ke,he.image[Te]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,W+1,be,Ce,ke,he.image[Te])}}}b(G,te)&&E(r.TEXTURE_CUBE_MAP),fe.__version=se.version,G.onUpdate&&G.onUpdate(G)}Q.__version=G.version}function Ae(Q,G,N,U,se,fe){const Ee=o.convert(N.format,N.colorSpace),pe=o.convert(N.type),Oe=R(N.internalFormat,Ee,pe,N.colorSpace);if(!n.get(G).__hasExternalTextures){const je=Math.max(1,G.width>>fe),Pe=Math.max(1,G.height>>fe);se===r.TEXTURE_3D||se===r.TEXTURE_2D_ARRAY?t.texImage3D(se,fe,Oe,je,Pe,G.depth,0,Ee,pe,null):t.texImage2D(se,fe,Oe,je,Pe,0,Ee,pe,null)}t.bindFramebuffer(r.FRAMEBUFFER,Q),Ke(G)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,U,se,n.get(N).__webglTexture,0,it(G)):(se===r.TEXTURE_2D||se>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&se<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,U,se,n.get(N).__webglTexture,fe),t.bindFramebuffer(r.FRAMEBUFFER,null)}function Be(Q,G,N){if(r.bindRenderbuffer(r.RENDERBUFFER,Q),G.depthBuffer&&!G.stencilBuffer){let U=u===!0?r.DEPTH_COMPONENT24:r.DEPTH_COMPONENT16;if(N||Ke(G)){const se=G.depthTexture;se&&se.isDepthTexture&&(se.type===Xs?U=r.DEPTH_COMPONENT32F:se.type===Qi&&(U=r.DEPTH_COMPONENT24));const fe=it(G);Ke(G)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,fe,U,G.width,G.height):r.renderbufferStorageMultisample(r.RENDERBUFFER,fe,U,G.width,G.height)}else r.renderbufferStorage(r.RENDERBUFFER,U,G.width,G.height);r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,Q)}else if(G.depthBuffer&&G.stencilBuffer){const U=it(G);N&&Ke(G)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,U,r.DEPTH24_STENCIL8,G.width,G.height):Ke(G)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,U,r.DEPTH24_STENCIL8,G.width,G.height):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,G.width,G.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,Q)}else{const U=G.isWebGLMultipleRenderTargets===!0?G.texture:[G.texture];for(let se=0;se<U.length;se++){const fe=U[se],Ee=o.convert(fe.format,fe.colorSpace),pe=o.convert(fe.type),Oe=R(fe.internalFormat,Ee,pe,fe.colorSpace),ze=it(G);N&&Ke(G)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,ze,Oe,G.width,G.height):Ke(G)?f.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,ze,Oe,G.width,G.height):r.renderbufferStorage(r.RENDERBUFFER,Oe,G.width,G.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Ze(Q,G){if(G&&G.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,Q),!(G.depthTexture&&G.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(G.depthTexture).__webglTexture||G.depthTexture.image.width!==G.width||G.depthTexture.image.height!==G.height)&&(G.depthTexture.image.width=G.width,G.depthTexture.image.height=G.height,G.depthTexture.needsUpdate=!0),I(G.depthTexture,0);const U=n.get(G.depthTexture).__webglTexture,se=it(G);if(G.depthTexture.format===wa)Ke(G)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,U,0,se):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,U,0);else if(G.depthTexture.format===nc)Ke(G)?f.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,U,0,se):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,U,0);else throw new Error("Unknown depthTexture format")}function Xe(Q){const G=n.get(Q),N=Q.isWebGLCubeRenderTarget===!0;if(Q.depthTexture&&!G.__autoAllocateDepthBuffer){if(N)throw new Error("target.depthTexture not supported in Cube render targets");Ze(G.__webglFramebuffer,Q)}else if(N){G.__webglDepthbuffer=[];for(let U=0;U<6;U++)t.bindFramebuffer(r.FRAMEBUFFER,G.__webglFramebuffer[U]),G.__webglDepthbuffer[U]=r.createRenderbuffer(),Be(G.__webglDepthbuffer[U],Q,!1)}else t.bindFramebuffer(r.FRAMEBUFFER,G.__webglFramebuffer),G.__webglDepthbuffer=r.createRenderbuffer(),Be(G.__webglDepthbuffer,Q,!1);t.bindFramebuffer(r.FRAMEBUFFER,null)}function ft(Q,G,N){const U=n.get(Q);G!==void 0&&Ae(U.__webglFramebuffer,Q,Q.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),N!==void 0&&Xe(Q)}function _e(Q){const G=Q.texture,N=n.get(Q),U=n.get(G);Q.addEventListener("dispose",B),Q.isWebGLMultipleRenderTargets!==!0&&(U.__webglTexture===void 0&&(U.__webglTexture=r.createTexture()),U.__version=G.version,c.memory.textures++);const se=Q.isWebGLCubeRenderTarget===!0,fe=Q.isWebGLMultipleRenderTargets===!0,Ee=S(Q)||u;if(se){N.__webglFramebuffer=[];for(let pe=0;pe<6;pe++)if(u&&G.mipmaps&&G.mipmaps.length>0){N.__webglFramebuffer[pe]=[];for(let Oe=0;Oe<G.mipmaps.length;Oe++)N.__webglFramebuffer[pe][Oe]=r.createFramebuffer()}else N.__webglFramebuffer[pe]=r.createFramebuffer()}else{if(u&&G.mipmaps&&G.mipmaps.length>0){N.__webglFramebuffer=[];for(let pe=0;pe<G.mipmaps.length;pe++)N.__webglFramebuffer[pe]=r.createFramebuffer()}else N.__webglFramebuffer=r.createFramebuffer();if(fe)if(s.drawBuffers){const pe=Q.texture;for(let Oe=0,ze=pe.length;Oe<ze;Oe++){const je=n.get(pe[Oe]);je.__webglTexture===void 0&&(je.__webglTexture=r.createTexture(),c.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(u&&Q.samples>0&&Ke(Q)===!1){const pe=fe?G:[G];N.__webglMultisampledFramebuffer=r.createFramebuffer(),N.__webglColorRenderbuffer=[],t.bindFramebuffer(r.FRAMEBUFFER,N.__webglMultisampledFramebuffer);for(let Oe=0;Oe<pe.length;Oe++){const ze=pe[Oe];N.__webglColorRenderbuffer[Oe]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,N.__webglColorRenderbuffer[Oe]);const je=o.convert(ze.format,ze.colorSpace),Pe=o.convert(ze.type),Ve=R(ze.internalFormat,je,Pe,ze.colorSpace,Q.isXRRenderTarget===!0),te=it(Q);r.renderbufferStorageMultisample(r.RENDERBUFFER,te,Ve,Q.width,Q.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Oe,r.RENDERBUFFER,N.__webglColorRenderbuffer[Oe])}r.bindRenderbuffer(r.RENDERBUFFER,null),Q.depthBuffer&&(N.__webglDepthRenderbuffer=r.createRenderbuffer(),Be(N.__webglDepthRenderbuffer,Q,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}}if(se){t.bindTexture(r.TEXTURE_CUBE_MAP,U.__webglTexture),ie(r.TEXTURE_CUBE_MAP,G,Ee);for(let pe=0;pe<6;pe++)if(u&&G.mipmaps&&G.mipmaps.length>0)for(let Oe=0;Oe<G.mipmaps.length;Oe++)Ae(N.__webglFramebuffer[pe][Oe],Q,G,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+pe,Oe);else Ae(N.__webglFramebuffer[pe],Q,G,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+pe,0);b(G,Ee)&&E(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(fe){const pe=Q.texture;for(let Oe=0,ze=pe.length;Oe<ze;Oe++){const je=pe[Oe],Pe=n.get(je);t.bindTexture(r.TEXTURE_2D,Pe.__webglTexture),ie(r.TEXTURE_2D,je,Ee),Ae(N.__webglFramebuffer,Q,je,r.COLOR_ATTACHMENT0+Oe,r.TEXTURE_2D,0),b(je,Ee)&&E(r.TEXTURE_2D)}t.unbindTexture()}else{let pe=r.TEXTURE_2D;if((Q.isWebGL3DRenderTarget||Q.isWebGLArrayRenderTarget)&&(u?pe=Q.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(pe,U.__webglTexture),ie(pe,G,Ee),u&&G.mipmaps&&G.mipmaps.length>0)for(let Oe=0;Oe<G.mipmaps.length;Oe++)Ae(N.__webglFramebuffer[Oe],Q,G,r.COLOR_ATTACHMENT0,pe,Oe);else Ae(N.__webglFramebuffer,Q,G,r.COLOR_ATTACHMENT0,pe,0);b(G,Ee)&&E(pe),t.unbindTexture()}Q.depthBuffer&&Xe(Q)}function ct(Q){const G=S(Q)||u,N=Q.isWebGLMultipleRenderTargets===!0?Q.texture:[Q.texture];for(let U=0,se=N.length;U<se;U++){const fe=N[U];if(b(fe,G)){const Ee=Q.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:r.TEXTURE_2D,pe=n.get(fe).__webglTexture;t.bindTexture(Ee,pe),E(Ee),t.unbindTexture()}}}function Z(Q){if(u&&Q.samples>0&&Ke(Q)===!1){const G=Q.isWebGLMultipleRenderTargets?Q.texture:[Q.texture],N=Q.width,U=Q.height;let se=r.COLOR_BUFFER_BIT;const fe=[],Ee=Q.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,pe=n.get(Q),Oe=Q.isWebGLMultipleRenderTargets===!0;if(Oe)for(let ze=0;ze<G.length;ze++)t.bindFramebuffer(r.FRAMEBUFFER,pe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+ze,r.RENDERBUFFER,null),t.bindFramebuffer(r.FRAMEBUFFER,pe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+ze,r.TEXTURE_2D,null,0);t.bindFramebuffer(r.READ_FRAMEBUFFER,pe.__webglMultisampledFramebuffer),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,pe.__webglFramebuffer);for(let ze=0;ze<G.length;ze++){fe.push(r.COLOR_ATTACHMENT0+ze),Q.depthBuffer&&fe.push(Ee);const je=pe.__ignoreDepthValues!==void 0?pe.__ignoreDepthValues:!1;if(je===!1&&(Q.depthBuffer&&(se|=r.DEPTH_BUFFER_BIT),Q.stencilBuffer&&(se|=r.STENCIL_BUFFER_BIT)),Oe&&r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,pe.__webglColorRenderbuffer[ze]),je===!0&&(r.invalidateFramebuffer(r.READ_FRAMEBUFFER,[Ee]),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[Ee])),Oe){const Pe=n.get(G[ze]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,Pe,0)}r.blitFramebuffer(0,0,N,U,0,0,N,U,se,r.NEAREST),d&&r.invalidateFramebuffer(r.READ_FRAMEBUFFER,fe)}if(t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),Oe)for(let ze=0;ze<G.length;ze++){t.bindFramebuffer(r.FRAMEBUFFER,pe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+ze,r.RENDERBUFFER,pe.__webglColorRenderbuffer[ze]);const je=n.get(G[ze]).__webglTexture;t.bindFramebuffer(r.FRAMEBUFFER,pe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+ze,r.TEXTURE_2D,je,0)}t.bindFramebuffer(r.DRAW_FRAMEBUFFER,pe.__webglMultisampledFramebuffer)}}function it(Q){return Math.min(s.maxSamples,Q.samples)}function Ke(Q){const G=n.get(Q);return u&&Q.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&G.__useRenderToTexture!==!1}function at(Q){const G=c.render.frame;p.get(Q)!==G&&(p.set(Q,G),Q.update())}function $e(Q,G){const N=Q.colorSpace,U=Q.format,se=Q.type;return Q.isCompressedTexture===!0||Q.isVideoTexture===!0||Q.format===r0||N!==Gr&&N!==ps&&(dn.getTransfer(N)===vn?u===!1?e.has("EXT_sRGB")===!0&&U===Ai?(Q.format=r0,Q.minFilter=fs,Q.generateMipmaps=!1):G=RE.sRGBToLinear(G):(U!==Ai||se!==Or)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",N)),G}this.allocateTextureUnit=z,this.resetTextureUnits=$,this.setTexture2D=I,this.setTexture2DArray=Y,this.setTexture3D=q,this.setTextureCube=J,this.rebindTextures=ft,this.setupRenderTarget=_e,this.updateRenderTargetMipmap=ct,this.updateMultisampleRenderTarget=Z,this.setupDepthRenderbuffer=Xe,this.setupFrameBufferTexture=Ae,this.useMultisampledRTT=Ke}function JE(r,e,t){const n=t.isWebGL2;function s(o,c=ps){let u;const f=dn.getTransfer(c);if(o===Or)return r.UNSIGNED_BYTE;if(o===vE)return r.UNSIGNED_SHORT_4_4_4_4;if(o===SE)return r.UNSIGNED_SHORT_5_5_5_1;if(o===I1)return r.BYTE;if(o===B1)return r.SHORT;if(o===r_)return r.UNSIGNED_SHORT;if(o===_E)return r.INT;if(o===Qi)return r.UNSIGNED_INT;if(o===Xs)return r.FLOAT;if(o===tc)return n?r.HALF_FLOAT:(u=e.get("OES_texture_half_float"),u!==null?u.HALF_FLOAT_OES:null);if(o===F1)return r.ALPHA;if(o===Ai)return r.RGBA;if(o===N1)return r.LUMINANCE;if(o===O1)return r.LUMINANCE_ALPHA;if(o===wa)return r.DEPTH_COMPONENT;if(o===nc)return r.DEPTH_STENCIL;if(o===r0)return u=e.get("EXT_sRGB"),u!==null?u.SRGB_ALPHA_EXT:null;if(o===z1)return r.RED;if(o===a_)return r.RED_INTEGER;if(o===H1)return r.RG;if(o===xE)return r.RG_INTEGER;if(o===Su)return r.RGBA_INTEGER;if(o===Hm||o===Gm||o===Vm||o===km)if(f===vn)if(u=e.get("WEBGL_compressed_texture_s3tc_srgb"),u!==null){if(o===Hm)return u.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(o===Gm)return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(o===Vm)return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(o===km)return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(u=e.get("WEBGL_compressed_texture_s3tc"),u!==null){if(o===Hm)return u.COMPRESSED_RGB_S3TC_DXT1_EXT;if(o===Gm)return u.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(o===Vm)return u.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(o===km)return u.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(o===wA||o===DA||o===LA||o===PA)if(u=e.get("WEBGL_compressed_texture_pvrtc"),u!==null){if(o===wA)return u.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(o===DA)return u.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(o===LA)return u.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(o===PA)return u.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(o===AE)return u=e.get("WEBGL_compressed_texture_etc1"),u!==null?u.COMPRESSED_RGB_ETC1_WEBGL:null;if(o===UA||o===IA)if(u=e.get("WEBGL_compressed_texture_etc"),u!==null){if(o===UA)return f===vn?u.COMPRESSED_SRGB8_ETC2:u.COMPRESSED_RGB8_ETC2;if(o===IA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:u.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(o===BA||o===FA||o===NA||o===OA||o===zA||o===HA||o===GA||o===VA||o===kA||o===WA||o===XA||o===qA||o===YA||o===$A)if(u=e.get("WEBGL_compressed_texture_astc"),u!==null){if(o===BA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:u.COMPRESSED_RGBA_ASTC_4x4_KHR;if(o===FA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:u.COMPRESSED_RGBA_ASTC_5x4_KHR;if(o===NA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:u.COMPRESSED_RGBA_ASTC_5x5_KHR;if(o===OA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:u.COMPRESSED_RGBA_ASTC_6x5_KHR;if(o===zA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:u.COMPRESSED_RGBA_ASTC_6x6_KHR;if(o===HA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:u.COMPRESSED_RGBA_ASTC_8x5_KHR;if(o===GA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:u.COMPRESSED_RGBA_ASTC_8x6_KHR;if(o===VA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:u.COMPRESSED_RGBA_ASTC_8x8_KHR;if(o===kA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:u.COMPRESSED_RGBA_ASTC_10x5_KHR;if(o===WA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:u.COMPRESSED_RGBA_ASTC_10x6_KHR;if(o===XA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:u.COMPRESSED_RGBA_ASTC_10x8_KHR;if(o===qA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:u.COMPRESSED_RGBA_ASTC_10x10_KHR;if(o===YA)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:u.COMPRESSED_RGBA_ASTC_12x10_KHR;if(o===$A)return f===vn?u.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:u.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(o===Wm||o===QA||o===KA)if(u=e.get("EXT_texture_compression_bptc"),u!==null){if(o===Wm)return f===vn?u.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:u.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(o===QA)return u.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(o===KA)return u.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(o===G1||o===jA||o===ZA||o===JA)if(u=e.get("EXT_texture_compression_rgtc"),u!==null){if(o===Wm)return u.COMPRESSED_RED_RGTC1_EXT;if(o===jA)return u.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(o===ZA)return u.COMPRESSED_RED_GREEN_RGTC2_EXT;if(o===JA)return u.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return o===Mo?n?r.UNSIGNED_INT_24_8:(u=e.get("WEBGL_depth_texture"),u!==null?u.UNSIGNED_INT_24_8_WEBGL:null):r[o]!==void 0?r[o]:null}return{convert:s}}let iP=class extends ds{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}},Sd=class extends yi{constructor(){super(),this.isGroup=!0,this.type="Group"}};const sP={type:"move"};let pg=class{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Sd,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Sd,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ne,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ne),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Sd,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ne,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ne),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let s=null,o=null,c=null;const u=this._targetRay,f=this._grip,d=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(d&&e.hand){c=!0;for(const y of e.hand.values()){const S=t.getJointPose(y,n),_=this._getHandJoint(d,y);S!==null&&(_.matrix.fromArray(S.transform.matrix),_.matrix.decompose(_.position,_.rotation,_.scale),_.matrixWorldNeedsUpdate=!0,_.jointRadius=S.radius),_.visible=S!==null}const p=d.joints["index-finger-tip"],m=d.joints["thumb-tip"],g=p.position.distanceTo(m.position),v=.02,A=.005;d.inputState.pinching&&g>v+A?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!d.inputState.pinching&&g<=v-A&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else f!==null&&e.gripSpace&&(o=t.getPose(e.gripSpace,n),o!==null&&(f.matrix.fromArray(o.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,o.linearVelocity?(f.hasLinearVelocity=!0,f.linearVelocity.copy(o.linearVelocity)):f.hasLinearVelocity=!1,o.angularVelocity?(f.hasAngularVelocity=!0,f.angularVelocity.copy(o.angularVelocity)):f.hasAngularVelocity=!1));u!==null&&(s=t.getPose(e.targetRaySpace,n),s===null&&o!==null&&(s=o),s!==null&&(u.matrix.fromArray(s.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,s.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(s.linearVelocity)):u.hasLinearVelocity=!1,s.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(s.angularVelocity)):u.hasAngularVelocity=!1,this.dispatchEvent(sP)))}return u!==null&&(u.visible=s!==null),f!==null&&(f.visible=o!==null),d!==null&&(d.visible=c!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Sd;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}},rP=class extends wo{constructor(e,t){super();const n=this;let s=null,o=1,c=null,u="local-floor",f=1,d=null,p=null,m=null,g=null,v=null,A=null;const y=t.getContextAttributes();let S=null,_=null;const b=[],E=[],R=new vt;let D=null;const L=new ds;L.layers.enable(1),L.viewport=new ti;const w=new ds;w.layers.enable(2),w.viewport=new ti;const B=[L,w],C=new iP;C.layers.enable(1),C.layers.enable(2);let T=null,O=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(ie){let j=b[ie];return j===void 0&&(j=new pg,b[ie]=j),j.getTargetRaySpace()},this.getControllerGrip=function(ie){let j=b[ie];return j===void 0&&(j=new pg,b[ie]=j),j.getGripSpace()},this.getHand=function(ie){let j=b[ie];return j===void 0&&(j=new pg,b[ie]=j),j.getHandSpace()};function X(ie){const j=E.indexOf(ie.inputSource);if(j===-1)return;const ue=b[j];ue!==void 0&&(ue.update(ie.inputSource,ie.frame,d||c),ue.dispatchEvent({type:ie.type,data:ie.inputSource}))}function $(){s.removeEventListener("select",X),s.removeEventListener("selectstart",X),s.removeEventListener("selectend",X),s.removeEventListener("squeeze",X),s.removeEventListener("squeezestart",X),s.removeEventListener("squeezeend",X),s.removeEventListener("end",$),s.removeEventListener("inputsourceschange",z);for(let ie=0;ie<b.length;ie++){const j=E[ie];j!==null&&(E[ie]=null,b[ie].disconnect(j))}T=null,O=null,e.setRenderTarget(S),v=null,g=null,m=null,s=null,_=null,ce.stop(),n.isPresenting=!1,e.setPixelRatio(D),e.setSize(R.width,R.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(ie){o=ie,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(ie){u=ie,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||c},this.setReferenceSpace=function(ie){d=ie},this.getBaseLayer=function(){return g!==null?g:v},this.getBinding=function(){return m},this.getFrame=function(){return A},this.getSession=function(){return s},this.setSession=async function(ie){if(s=ie,s!==null){if(S=e.getRenderTarget(),s.addEventListener("select",X),s.addEventListener("selectstart",X),s.addEventListener("selectend",X),s.addEventListener("squeeze",X),s.addEventListener("squeezestart",X),s.addEventListener("squeezeend",X),s.addEventListener("end",$),s.addEventListener("inputsourceschange",z),y.xrCompatible!==!0&&await t.makeXRCompatible(),D=e.getPixelRatio(),e.getSize(R),s.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const j={antialias:s.renderState.layers===void 0?y.antialias:!0,alpha:!0,depth:y.depth,stencil:y.stencil,framebufferScaleFactor:o};v=new XRWebGLLayer(s,t,j),s.updateRenderState({baseLayer:v}),e.setPixelRatio(1),e.setSize(v.framebufferWidth,v.framebufferHeight,!1),_=new Pa(v.framebufferWidth,v.framebufferHeight,{format:Ai,type:Or,colorSpace:e.outputColorSpace,stencilBuffer:y.stencil})}else{let j=null,ue=null,ge=null;y.depth&&(ge=y.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,j=y.stencil?nc:wa,ue=y.stencil?Mo:Qi);const Ae={colorFormat:t.RGBA8,depthFormat:ge,scaleFactor:o};m=new XRWebGLBinding(s,t),g=m.createProjectionLayer(Ae),s.updateRenderState({layers:[g]}),e.setPixelRatio(1),e.setSize(g.textureWidth,g.textureHeight,!1),_=new Pa(g.textureWidth,g.textureHeight,{format:Ai,type:Or,depthTexture:new f_(g.textureWidth,g.textureHeight,ue,void 0,void 0,void 0,void 0,void 0,void 0,j),stencilBuffer:y.stencil,colorSpace:e.outputColorSpace,samples:y.antialias?4:0});const Be=e.properties.get(_);Be.__ignoreDepthValues=g.ignoreDepthValues}_.isXRRenderTarget=!0,this.setFoveation(f),d=null,c=await s.requestReferenceSpace(u),ce.setContext(s),ce.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode};function z(ie){for(let j=0;j<ie.removed.length;j++){const ue=ie.removed[j],ge=E.indexOf(ue);ge>=0&&(E[ge]=null,b[ge].disconnect(ue))}for(let j=0;j<ie.added.length;j++){const ue=ie.added[j];let ge=E.indexOf(ue);if(ge===-1){for(let Be=0;Be<b.length;Be++)if(Be>=E.length){E.push(ue),ge=Be;break}else if(E[Be]===null){E[Be]=ue,ge=Be;break}if(ge===-1)break}const Ae=b[ge];Ae&&Ae.connect(ue)}}const k=new ne,I=new ne;function Y(ie,j,ue){k.setFromMatrixPosition(j.matrixWorld),I.setFromMatrixPosition(ue.matrixWorld);const ge=k.distanceTo(I),Ae=j.projectionMatrix.elements,Be=ue.projectionMatrix.elements,Ze=Ae[14]/(Ae[10]-1),Xe=Ae[14]/(Ae[10]+1),ft=(Ae[9]+1)/Ae[5],_e=(Ae[9]-1)/Ae[5],ct=(Ae[8]-1)/Ae[0],Z=(Be[8]+1)/Be[0],it=Ze*ct,Ke=Ze*Z,at=ge/(-ct+Z),$e=at*-ct;j.matrixWorld.decompose(ie.position,ie.quaternion,ie.scale),ie.translateX($e),ie.translateZ(at),ie.matrixWorld.compose(ie.position,ie.quaternion,ie.scale),ie.matrixWorldInverse.copy(ie.matrixWorld).invert();const Q=Ze+at,G=Xe+at,N=it-$e,U=Ke+(ge-$e),se=ft*Xe/G*Q,fe=_e*Xe/G*Q;ie.projectionMatrix.makePerspective(N,U,se,fe,Q,G),ie.projectionMatrixInverse.copy(ie.projectionMatrix).invert()}function q(ie,j){j===null?ie.matrixWorld.copy(ie.matrix):ie.matrixWorld.multiplyMatrices(j.matrixWorld,ie.matrix),ie.matrixWorldInverse.copy(ie.matrixWorld).invert()}this.updateCamera=function(ie){if(s===null)return;C.near=w.near=L.near=ie.near,C.far=w.far=L.far=ie.far,(T!==C.near||O!==C.far)&&(s.updateRenderState({depthNear:C.near,depthFar:C.far}),T=C.near,O=C.far);const j=ie.parent,ue=C.cameras;q(C,j);for(let ge=0;ge<ue.length;ge++)q(ue[ge],j);ue.length===2?Y(C,L,w):C.projectionMatrix.copy(L.projectionMatrix),J(ie,C,j)};function J(ie,j,ue){ue===null?ie.matrix.copy(j.matrixWorld):(ie.matrix.copy(ue.matrixWorld),ie.matrix.invert(),ie.matrix.multiply(j.matrixWorld)),ie.matrix.decompose(ie.position,ie.quaternion,ie.scale),ie.updateMatrixWorld(!0),ie.projectionMatrix.copy(j.projectionMatrix),ie.projectionMatrixInverse.copy(j.projectionMatrixInverse),ie.isPerspectiveCamera&&(ie.fov=a0*2*Math.atan(1/ie.projectionMatrix.elements[5]),ie.zoom=1)}this.getCamera=function(){return C},this.getFoveation=function(){if(!(g===null&&v===null))return f},this.setFoveation=function(ie){f=ie,g!==null&&(g.fixedFoveation=ie),v!==null&&v.fixedFoveation!==void 0&&(v.fixedFoveation=ie)};let F=null;function ee(ie,j){if(p=j.getViewerPose(d||c),A=j,p!==null){const ue=p.views;v!==null&&(e.setRenderTargetFramebuffer(_,v.framebuffer),e.setRenderTarget(_));let ge=!1;ue.length!==C.cameras.length&&(C.cameras.length=0,ge=!0);for(let Ae=0;Ae<ue.length;Ae++){const Be=ue[Ae];let Ze=null;if(v!==null)Ze=v.getViewport(Be);else{const ft=m.getViewSubImage(g,Be);Ze=ft.viewport,Ae===0&&(e.setRenderTargetTextures(_,ft.colorTexture,g.ignoreDepthValues?void 0:ft.depthStencilTexture),e.setRenderTarget(_))}let Xe=B[Ae];Xe===void 0&&(Xe=new ds,Xe.layers.enable(Ae),Xe.viewport=new ti,B[Ae]=Xe),Xe.matrix.fromArray(Be.transform.matrix),Xe.matrix.decompose(Xe.position,Xe.quaternion,Xe.scale),Xe.projectionMatrix.fromArray(Be.projectionMatrix),Xe.projectionMatrixInverse.copy(Xe.projectionMatrix).invert(),Xe.viewport.set(Ze.x,Ze.y,Ze.width,Ze.height),Ae===0&&(C.matrix.copy(Xe.matrix),C.matrix.decompose(C.position,C.quaternion,C.scale)),ge===!0&&C.cameras.push(Xe)}}for(let ue=0;ue<b.length;ue++){const ge=E[ue],Ae=b[ue];ge!==null&&Ae!==void 0&&Ae.update(ge,j,d||c)}F&&F(ie,j),j.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:j}),A=null}const ce=new qE;ce.setAnimationLoop(ee),this.setAnimationLoop=function(ie){F=ie},this.dispose=function(){}}};function aP(r,e){function t(S,_){S.matrixAutoUpdate===!0&&S.updateMatrix(),_.value.copy(S.matrix)}function n(S,_){_.color.getRGB(S.fogColor.value,VE(r)),_.isFog?(S.fogNear.value=_.near,S.fogFar.value=_.far):_.isFogExp2&&(S.fogDensity.value=_.density)}function s(S,_,b,E,R){_.isMeshBasicMaterial||_.isMeshLambertMaterial?o(S,_):_.isMeshToonMaterial?(o(S,_),m(S,_)):_.isMeshPhongMaterial?(o(S,_),p(S,_)):_.isMeshStandardMaterial?(o(S,_),g(S,_),_.isMeshPhysicalMaterial&&v(S,_,R)):_.isMeshMatcapMaterial?(o(S,_),A(S,_)):_.isMeshDepthMaterial?o(S,_):_.isMeshDistanceMaterial?(o(S,_),y(S,_)):_.isMeshNormalMaterial?o(S,_):_.isLineBasicMaterial?(c(S,_),_.isLineDashedMaterial&&u(S,_)):_.isPointsMaterial?f(S,_,b,E):_.isSpriteMaterial?d(S,_):_.isShadowMaterial?(S.color.value.copy(_.color),S.opacity.value=_.opacity):_.isShaderMaterial&&(_.uniformsNeedUpdate=!1)}function o(S,_){S.opacity.value=_.opacity,_.color&&S.diffuse.value.copy(_.color),_.emissive&&S.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.bumpMap&&(S.bumpMap.value=_.bumpMap,t(_.bumpMap,S.bumpMapTransform),S.bumpScale.value=_.bumpScale,_.side===Ii&&(S.bumpScale.value*=-1)),_.normalMap&&(S.normalMap.value=_.normalMap,t(_.normalMap,S.normalMapTransform),S.normalScale.value.copy(_.normalScale),_.side===Ii&&S.normalScale.value.negate()),_.displacementMap&&(S.displacementMap.value=_.displacementMap,t(_.displacementMap,S.displacementMapTransform),S.displacementScale.value=_.displacementScale,S.displacementBias.value=_.displacementBias),_.emissiveMap&&(S.emissiveMap.value=_.emissiveMap,t(_.emissiveMap,S.emissiveMapTransform)),_.specularMap&&(S.specularMap.value=_.specularMap,t(_.specularMap,S.specularMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest);const b=e.get(_).envMap;if(b&&(S.envMap.value=b,S.flipEnvMap.value=b.isCubeTexture&&b.isRenderTargetTexture===!1?-1:1,S.reflectivity.value=_.reflectivity,S.ior.value=_.ior,S.refractionRatio.value=_.refractionRatio),_.lightMap){S.lightMap.value=_.lightMap;const E=r._useLegacyLights===!0?Math.PI:1;S.lightMapIntensity.value=_.lightMapIntensity*E,t(_.lightMap,S.lightMapTransform)}_.aoMap&&(S.aoMap.value=_.aoMap,S.aoMapIntensity.value=_.aoMapIntensity,t(_.aoMap,S.aoMapTransform))}function c(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform))}function u(S,_){S.dashSize.value=_.dashSize,S.totalSize.value=_.dashSize+_.gapSize,S.scale.value=_.scale}function f(S,_,b,E){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.size.value=_.size*b,S.scale.value=E*.5,_.map&&(S.map.value=_.map,t(_.map,S.uvTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function d(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.rotation.value=_.rotation,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function p(S,_){S.specular.value.copy(_.specular),S.shininess.value=Math.max(_.shininess,1e-4)}function m(S,_){_.gradientMap&&(S.gradientMap.value=_.gradientMap)}function g(S,_){S.metalness.value=_.metalness,_.metalnessMap&&(S.metalnessMap.value=_.metalnessMap,t(_.metalnessMap,S.metalnessMapTransform)),S.roughness.value=_.roughness,_.roughnessMap&&(S.roughnessMap.value=_.roughnessMap,t(_.roughnessMap,S.roughnessMapTransform)),e.get(_).envMap&&(S.envMapIntensity.value=_.envMapIntensity)}function v(S,_,b){S.ior.value=_.ior,_.sheen>0&&(S.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen),S.sheenRoughness.value=_.sheenRoughness,_.sheenColorMap&&(S.sheenColorMap.value=_.sheenColorMap,t(_.sheenColorMap,S.sheenColorMapTransform)),_.sheenRoughnessMap&&(S.sheenRoughnessMap.value=_.sheenRoughnessMap,t(_.sheenRoughnessMap,S.sheenRoughnessMapTransform))),_.clearcoat>0&&(S.clearcoat.value=_.clearcoat,S.clearcoatRoughness.value=_.clearcoatRoughness,_.clearcoatMap&&(S.clearcoatMap.value=_.clearcoatMap,t(_.clearcoatMap,S.clearcoatMapTransform)),_.clearcoatRoughnessMap&&(S.clearcoatRoughnessMap.value=_.clearcoatRoughnessMap,t(_.clearcoatRoughnessMap,S.clearcoatRoughnessMapTransform)),_.clearcoatNormalMap&&(S.clearcoatNormalMap.value=_.clearcoatNormalMap,t(_.clearcoatNormalMap,S.clearcoatNormalMapTransform),S.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),_.side===Ii&&S.clearcoatNormalScale.value.negate())),_.iridescence>0&&(S.iridescence.value=_.iridescence,S.iridescenceIOR.value=_.iridescenceIOR,S.iridescenceThicknessMinimum.value=_.iridescenceThicknessRange[0],S.iridescenceThicknessMaximum.value=_.iridescenceThicknessRange[1],_.iridescenceMap&&(S.iridescenceMap.value=_.iridescenceMap,t(_.iridescenceMap,S.iridescenceMapTransform)),_.iridescenceThicknessMap&&(S.iridescenceThicknessMap.value=_.iridescenceThicknessMap,t(_.iridescenceThicknessMap,S.iridescenceThicknessMapTransform))),_.transmission>0&&(S.transmission.value=_.transmission,S.transmissionSamplerMap.value=b.texture,S.transmissionSamplerSize.value.set(b.width,b.height),_.transmissionMap&&(S.transmissionMap.value=_.transmissionMap,t(_.transmissionMap,S.transmissionMapTransform)),S.thickness.value=_.thickness,_.thicknessMap&&(S.thicknessMap.value=_.thicknessMap,t(_.thicknessMap,S.thicknessMapTransform)),S.attenuationDistance.value=_.attenuationDistance,S.attenuationColor.value.copy(_.attenuationColor)),_.anisotropy>0&&(S.anisotropyVector.value.set(_.anisotropy*Math.cos(_.anisotropyRotation),_.anisotropy*Math.sin(_.anisotropyRotation)),_.anisotropyMap&&(S.anisotropyMap.value=_.anisotropyMap,t(_.anisotropyMap,S.anisotropyMapTransform))),S.specularIntensity.value=_.specularIntensity,S.specularColor.value.copy(_.specularColor),_.specularColorMap&&(S.specularColorMap.value=_.specularColorMap,t(_.specularColorMap,S.specularColorMapTransform)),_.specularIntensityMap&&(S.specularIntensityMap.value=_.specularIntensityMap,t(_.specularIntensityMap,S.specularIntensityMapTransform))}function A(S,_){_.matcap&&(S.matcap.value=_.matcap)}function y(S,_){const b=e.get(_).light;S.referencePosition.value.setFromMatrixPosition(b.matrixWorld),S.nearDistance.value=b.shadow.camera.near,S.farDistance.value=b.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function oP(r,e,t,n){let s={},o={},c=[];const u=t.isWebGL2?r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS):0;function f(b,E){const R=E.program;n.uniformBlockBinding(b,R)}function d(b,E){let R=s[b.id];R===void 0&&(A(b),R=p(b),s[b.id]=R,b.addEventListener("dispose",S));const D=E.program;n.updateUBOMapping(b,D);const L=e.render.frame;o[b.id]!==L&&(g(b),o[b.id]=L)}function p(b){const E=m();b.__bindingPointIndex=E;const R=r.createBuffer(),D=b.__size,L=b.usage;return r.bindBuffer(r.UNIFORM_BUFFER,R),r.bufferData(r.UNIFORM_BUFFER,D,L),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,E,R),R}function m(){for(let b=0;b<u;b++)if(c.indexOf(b)===-1)return c.push(b),b;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function g(b){const E=s[b.id],R=b.uniforms,D=b.__cache;r.bindBuffer(r.UNIFORM_BUFFER,E);for(let L=0,w=R.length;L<w;L++){const B=Array.isArray(R[L])?R[L]:[R[L]];for(let C=0,T=B.length;C<T;C++){const O=B[C];if(v(O,L,C,D)===!0){const X=O.__offset,$=Array.isArray(O.value)?O.value:[O.value];let z=0;for(let k=0;k<$.length;k++){const I=$[k],Y=y(I);typeof I=="number"||typeof I=="boolean"?(O.__data[0]=I,r.bufferSubData(r.UNIFORM_BUFFER,X+z,O.__data)):I.isMatrix3?(O.__data[0]=I.elements[0],O.__data[1]=I.elements[1],O.__data[2]=I.elements[2],O.__data[3]=0,O.__data[4]=I.elements[3],O.__data[5]=I.elements[4],O.__data[6]=I.elements[5],O.__data[7]=0,O.__data[8]=I.elements[6],O.__data[9]=I.elements[7],O.__data[10]=I.elements[8],O.__data[11]=0):(I.toArray(O.__data,z),z+=Y.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,X,O.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function v(b,E,R,D){const L=b.value,w=E+"_"+R;if(D[w]===void 0)return typeof L=="number"||typeof L=="boolean"?D[w]=L:D[w]=L.clone(),!0;{const B=D[w];if(typeof L=="number"||typeof L=="boolean"){if(B!==L)return D[w]=L,!0}else if(B.equals(L)===!1)return B.copy(L),!0}return!1}function A(b){const E=b.uniforms;let R=0;const D=16;for(let w=0,B=E.length;w<B;w++){const C=Array.isArray(E[w])?E[w]:[E[w]];for(let T=0,O=C.length;T<O;T++){const X=C[T],$=Array.isArray(X.value)?X.value:[X.value];for(let z=0,k=$.length;z<k;z++){const I=$[z],Y=y(I),q=R%D;q!==0&&D-q<Y.boundary&&(R+=D-q),X.__data=new Float32Array(Y.storage/Float32Array.BYTES_PER_ELEMENT),X.__offset=R,R+=Y.storage}}}const L=R%D;return L>0&&(R+=D-L),b.__size=R,b.__cache={},this}function y(b){const E={boundary:0,storage:0};return typeof b=="number"||typeof b=="boolean"?(E.boundary=4,E.storage=4):b.isVector2?(E.boundary=8,E.storage=8):b.isVector3||b.isColor?(E.boundary=16,E.storage=12):b.isVector4?(E.boundary=16,E.storage=16):b.isMatrix3?(E.boundary=48,E.storage=48):b.isMatrix4?(E.boundary=64,E.storage=64):b.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",b),E}function S(b){const E=b.target;E.removeEventListener("dispose",S);const R=c.indexOf(E.__bindingPointIndex);c.splice(R,1),r.deleteBuffer(s[E.id]),delete s[E.id],delete o[E.id]}function _(){for(const b in s)r.deleteBuffer(s[b]);c=[],s={},o={}}return{bind:f,update:d,dispose:_}}let eT=class{constructor(e={}){const{canvas:t=tR(),context:n=null,depth:s=!0,stencil:o=!0,alpha:c=!1,antialias:u=!1,premultipliedAlpha:f=!0,preserveDrawingBuffer:d=!1,powerPreference:p="default",failIfMajorPerformanceCaveat:m=!1}=e;this.isWebGLRenderer=!0;let g;n!==null?g=n.getContextAttributes().alpha:g=c;const v=new Uint32Array(4),A=new Int32Array(4);let y=null,S=null;const _=[],b=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=ci,this._useLegacyLights=!1,this.toneMapping=Ra,this.toneMappingExposure=1;const E=this;let R=!1,D=0,L=0,w=null,B=-1,C=null;const T=new ti,O=new ti;let X=null;const $=new jt(0);let z=0,k=t.width,I=t.height,Y=1,q=null,J=null;const F=new ti(0,0,k,I),ee=new ti(0,0,k,I);let ce=!1;const ie=new XE;let j=!1,ue=!1,ge=null;const Ae=new Bt,Be=new vt,Ze=new ne,Xe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function ft(){return w===null?Y:1}let _e=n;function ct(K,Se){for(let Ue=0;Ue<K.length;Ue++){const Ie=K[Ue],we=t.getContext(Ie,Se);if(we!==null)return we}return null}try{const K={alpha:!0,depth:s,stencil:o,antialias:u,premultipliedAlpha:f,preserveDrawingBuffer:d,powerPreference:p,failIfMajorPerformanceCaveat:m};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${s_}`),t.addEventListener("webglcontextlost",Te,!1),t.addEventListener("webglcontextrestored",W,!1),t.addEventListener("webglcontextcreationerror",he,!1),_e===null){const Se=["webgl2","webgl","experimental-webgl"];if(E.isWebGL1Renderer===!0&&Se.shift(),_e=ct(Se,K),_e===null)throw ct(Se)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}typeof WebGLRenderingContext<"u"&&_e instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),_e.getShaderPrecisionFormat===void 0&&(_e.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(K){throw console.error("THREE.WebGLRenderer: "+K.message),K}let Z,it,Ke,at,$e,Q,G,N,U,se,fe,Ee,pe,Oe,ze,je,Pe,Ve,te,Ce,ke,be,tt,st;function St(){Z=new vD(_e),it=new dD(_e,Z,e),Z.init(it),be=new JE(_e,Z,it),Ke=new tP(_e,Z,it),at=new AD(_e),$e=new GL,Q=new nP(_e,Z,Ke,$e,it,be,at),G=new pD(E),N=new _D(E),U=new wR(_e,it),tt=new uD(_e,Z,U,it),se=new SD(_e,U,at,tt),fe=new TD(_e,se,U,at),te=new ED(_e,it,Q),je=new hD($e),Ee=new HL(E,G,N,Z,it,tt,je),pe=new aP(E,$e),Oe=new kL,ze=new QL(Z,it),Ve=new cD(E,G,N,Ke,fe,g,f),Pe=new eP(E,fe,it),st=new oP(_e,at,it,Ke),Ce=new fD(_e,Z,at,it),ke=new xD(_e,Z,at,it),at.programs=Ee.programs,E.capabilities=it,E.extensions=Z,E.properties=$e,E.renderLists=Oe,E.shadowMap=Pe,E.state=Ke,E.info=at}St();const oe=new rP(E,_e);this.xr=oe,this.getContext=function(){return _e},this.getContextAttributes=function(){return _e.getContextAttributes()},this.forceContextLoss=function(){const K=Z.get("WEBGL_lose_context");K&&K.loseContext()},this.forceContextRestore=function(){const K=Z.get("WEBGL_lose_context");K&&K.restoreContext()},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(K){K!==void 0&&(Y=K,this.setSize(k,I,!1))},this.getSize=function(K){return K.set(k,I)},this.setSize=function(K,Se,Ue=!0){if(oe.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}k=K,I=Se,t.width=Math.floor(K*Y),t.height=Math.floor(Se*Y),Ue===!0&&(t.style.width=K+"px",t.style.height=Se+"px"),this.setViewport(0,0,K,Se)},this.getDrawingBufferSize=function(K){return K.set(k*Y,I*Y).floor()},this.setDrawingBufferSize=function(K,Se,Ue){k=K,I=Se,Y=Ue,t.width=Math.floor(K*Ue),t.height=Math.floor(Se*Ue),this.setViewport(0,0,K,Se)},this.getCurrentViewport=function(K){return K.copy(T)},this.getViewport=function(K){return K.copy(F)},this.setViewport=function(K,Se,Ue,Ie){K.isVector4?F.set(K.x,K.y,K.z,K.w):F.set(K,Se,Ue,Ie),Ke.viewport(T.copy(F).multiplyScalar(Y).floor())},this.getScissor=function(K){return K.copy(ee)},this.setScissor=function(K,Se,Ue,Ie){K.isVector4?ee.set(K.x,K.y,K.z,K.w):ee.set(K,Se,Ue,Ie),Ke.scissor(O.copy(ee).multiplyScalar(Y).floor())},this.getScissorTest=function(){return ce},this.setScissorTest=function(K){Ke.setScissorTest(ce=K)},this.setOpaqueSort=function(K){q=K},this.setTransparentSort=function(K){J=K},this.getClearColor=function(K){return K.copy(Ve.getClearColor())},this.setClearColor=function(){Ve.setClearColor.apply(Ve,arguments)},this.getClearAlpha=function(){return Ve.getClearAlpha()},this.setClearAlpha=function(){Ve.setClearAlpha.apply(Ve,arguments)},this.clear=function(K=!0,Se=!0,Ue=!0){let Ie=0;if(K){let we=!1;if(w!==null){const H=w.texture.format;we=H===Su||H===xE||H===a_}if(we){const H=w.texture.type,ae=H===Or||H===Qi||H===r_||H===Mo||H===vE||H===SE,me=Ve.getClearColor(),ve=Ve.getClearAlpha(),le=me.r,Fe=me.g,qe=me.b;ae?(v[0]=le,v[1]=Fe,v[2]=qe,v[3]=ve,_e.clearBufferuiv(_e.COLOR,0,v)):(A[0]=le,A[1]=Fe,A[2]=qe,A[3]=ve,_e.clearBufferiv(_e.COLOR,0,A))}else Ie|=_e.COLOR_BUFFER_BIT}Se&&(Ie|=_e.DEPTH_BUFFER_BIT),Ue&&(Ie|=_e.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),_e.clear(Ie)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Te,!1),t.removeEventListener("webglcontextrestored",W,!1),t.removeEventListener("webglcontextcreationerror",he,!1),Oe.dispose(),ze.dispose(),$e.dispose(),G.dispose(),N.dispose(),fe.dispose(),tt.dispose(),st.dispose(),Ee.dispose(),oe.dispose(),oe.removeEventListener("sessionstart",en),oe.removeEventListener("sessionend",Dt),ge&&(ge.dispose(),ge=null),qt.stop()};function Te(K){K.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),R=!0}function W(){console.log("THREE.WebGLRenderer: Context Restored."),R=!1;const K=at.autoReset,Se=Pe.enabled,Ue=Pe.autoUpdate,Ie=Pe.needsUpdate,we=Pe.type;St(),at.autoReset=K,Pe.enabled=Se,Pe.autoUpdate=Ue,Pe.needsUpdate=Ie,Pe.type=we}function he(K){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",K.statusMessage)}function De(K){const Se=K.target;Se.removeEventListener("dispose",De),Ge(Se)}function Ge(K){Je(K),$e.remove(K)}function Je(K){const Se=$e.get(K).programs;Se!==void 0&&(Se.forEach(function(Ue){Ee.releaseProgram(Ue)}),K.isShaderMaterial&&Ee.releaseShaderCache(K))}this.renderBufferDirect=function(K,Se,Ue,Ie,we,H){Se===null&&(Se=Xe);const ae=we.isMesh&&we.matrixWorld.determinant()<0,me=Ss(K,Se,Ue,Ie,we);Ke.setMaterial(Ie,ae);let ve=Ue.index,le=1;if(Ie.wireframe===!0){if(ve=se.getWireframeAttribute(Ue),ve===void 0)return;le=2}const Fe=Ue.drawRange,qe=Ue.attributes.position;let et=Fe.start*le,rt=(Fe.start+Fe.count)*le;H!==null&&(et=Math.max(et,H.start*le),rt=Math.min(rt,(H.start+H.count)*le)),ve!==null?(et=Math.max(et,0),rt=Math.min(rt,ve.count)):qe!=null&&(et=Math.max(et,0),rt=Math.min(rt,qe.count));const pt=rt-et;if(pt<0||pt===1/0)return;tt.setup(we,Ie,me,Ue,ve);let _t,ot=Ce;if(ve!==null&&(_t=U.get(ve),ot=ke,ot.setIndex(_t)),we.isMesh)Ie.wireframe===!0?(Ke.setLineWidth(Ie.wireframeLinewidth*ft()),ot.setMode(_e.LINES)):ot.setMode(_e.TRIANGLES);else if(we.isLine){let dt=Ie.linewidth;dt===void 0&&(dt=1),Ke.setLineWidth(dt*ft()),we.isLineSegments?ot.setMode(_e.LINES):we.isLineLoop?ot.setMode(_e.LINE_LOOP):ot.setMode(_e.LINE_STRIP)}else we.isPoints?ot.setMode(_e.POINTS):we.isSprite&&ot.setMode(_e.TRIANGLES);if(we.isBatchedMesh)ot.renderMultiDraw(we._multiDrawStarts,we._multiDrawCounts,we._multiDrawCount);else if(we.isInstancedMesh)ot.renderInstances(et,pt,we.count);else if(Ue.isInstancedBufferGeometry){const dt=Ue._maxInstanceCount!==void 0?Ue._maxInstanceCount:1/0,Wt=Math.min(Ue.instanceCount,dt);ot.renderInstances(et,pt,Wt)}else ot.render(et,pt)};function At(K,Se,Ue){K.transparent===!0&&K.side===hs&&K.forceSinglePass===!1?(K.side=Ii,K.needsUpdate=!0,Ji(K,Se,Ue),K.side=js,K.needsUpdate=!0,Ji(K,Se,Ue),K.side=hs):Ji(K,Se,Ue)}this.compile=function(K,Se,Ue=null){Ue===null&&(Ue=K),S=ze.get(Ue),S.init(),b.push(S),Ue.traverseVisible(function(we){we.isLight&&we.layers.test(Se.layers)&&(S.pushLight(we),we.castShadow&&S.pushShadow(we))}),K!==Ue&&K.traverseVisible(function(we){we.isLight&&we.layers.test(Se.layers)&&(S.pushLight(we),we.castShadow&&S.pushShadow(we))}),S.setupLights(E._useLegacyLights);const Ie=new Set;return K.traverse(function(we){const H=we.material;if(H)if(Array.isArray(H))for(let ae=0;ae<H.length;ae++){const me=H[ae];At(me,Ue,we),Ie.add(me)}else At(H,Ue,we),Ie.add(H)}),b.pop(),S=null,Ie},this.compileAsync=function(K,Se,Ue=null){const Ie=this.compile(K,Se,Ue);return new Promise(we=>{function H(){if(Ie.forEach(function(ae){$e.get(ae).currentProgram.isReady()&&Ie.delete(ae)}),Ie.size===0){we(K);return}setTimeout(H,10)}Z.get("KHR_parallel_shader_compile")!==null?H():setTimeout(H,10)})};let Rt=null;function Mt(K){Rt&&Rt(K)}function en(){qt.stop()}function Dt(){qt.start()}const qt=new qE;qt.setAnimationLoop(Mt),typeof self<"u"&&qt.setContext(self),this.setAnimationLoop=function(K){Rt=K,oe.setAnimationLoop(K),K===null?qt.stop():qt.start()},oe.addEventListener("sessionstart",en),oe.addEventListener("sessionend",Dt),this.render=function(K,Se){if(Se!==void 0&&Se.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(R===!0)return;K.matrixWorldAutoUpdate===!0&&K.updateMatrixWorld(),Se.parent===null&&Se.matrixWorldAutoUpdate===!0&&Se.updateMatrixWorld(),oe.enabled===!0&&oe.isPresenting===!0&&(oe.cameraAutoUpdate===!0&&oe.updateCamera(Se),Se=oe.getCamera()),K.isScene===!0&&K.onBeforeRender(E,K,Se,w),S=ze.get(K,b.length),S.init(),b.push(S),Ae.multiplyMatrices(Se.projectionMatrix,Se.matrixWorldInverse),ie.setFromProjectionMatrix(Ae),ue=this.localClippingEnabled,j=je.init(this.clippingPlanes,ue),y=Oe.get(K,_.length),y.init(),_.push(y),an(K,Se,0,E.sortObjects),y.finish(),E.sortObjects===!0&&y.sort(q,J),this.info.render.frame++,j===!0&&je.beginShadows();const Ue=S.state.shadowsArray;if(Pe.render(Ue,K,Se),j===!0&&je.endShadows(),this.info.autoReset===!0&&this.info.reset(),Ve.render(y,K),S.setupLights(E._useLegacyLights),Se.isArrayCamera){const Ie=Se.cameras;for(let we=0,H=Ie.length;we<H;we++){const ae=Ie[we];ni(y,K,ae,ae.viewport)}}else ni(y,K,Se);w!==null&&(Q.updateMultisampleRenderTarget(w),Q.updateRenderTargetMipmap(w)),K.isScene===!0&&K.onAfterRender(E,K,Se),tt.resetDefaultState(),B=-1,C=null,b.pop(),b.length>0?S=b[b.length-1]:S=null,_.pop(),_.length>0?y=_[_.length-1]:y=null};function an(K,Se,Ue,Ie){if(K.visible===!1)return;if(K.layers.test(Se.layers)){if(K.isGroup)Ue=K.renderOrder;else if(K.isLOD)K.autoUpdate===!0&&K.update(Se);else if(K.isLight)S.pushLight(K),K.castShadow&&S.pushShadow(K);else if(K.isSprite){if(!K.frustumCulled||ie.intersectsSprite(K)){Ie&&Ze.setFromMatrixPosition(K.matrixWorld).applyMatrix4(Ae);const ae=fe.update(K),me=K.material;me.visible&&y.push(K,ae,me,Ue,Ze.z,null)}}else if((K.isMesh||K.isLine||K.isPoints)&&(!K.frustumCulled||ie.intersectsObject(K))){const ae=fe.update(K),me=K.material;if(Ie&&(K.boundingSphere!==void 0?(K.boundingSphere===null&&K.computeBoundingSphere(),Ze.copy(K.boundingSphere.center)):(ae.boundingSphere===null&&ae.computeBoundingSphere(),Ze.copy(ae.boundingSphere.center)),Ze.applyMatrix4(K.matrixWorld).applyMatrix4(Ae)),Array.isArray(me)){const ve=ae.groups;for(let le=0,Fe=ve.length;le<Fe;le++){const qe=ve[le],et=me[qe.materialIndex];et&&et.visible&&y.push(K,ae,et,Ue,Ze.z,qe)}}else me.visible&&y.push(K,ae,me,Ue,Ze.z,null)}}const H=K.children;for(let ae=0,me=H.length;ae<me;ae++)an(H[ae],Se,Ue,Ie)}function ni(K,Se,Ue,Ie){const we=K.opaque,H=K.transmissive,ae=K.transparent;S.setupLightsView(Ue),j===!0&&je.setGlobalState(E.clippingPlanes,Ue),H.length>0&&er(we,H,Se,Ue),Ie&&Ke.viewport(T.copy(Ie)),we.length>0&&tr(we,Se,Ue),H.length>0&&tr(H,Se,Ue),ae.length>0&&tr(ae,Se,Ue),Ke.buffers.depth.setTest(!0),Ke.buffers.depth.setMask(!0),Ke.buffers.color.setMask(!0),Ke.setPolygonOffset(!1)}function er(K,Se,Ue,Ie){if((Ue.isScene===!0?Ue.overrideMaterial:null)!==null)return;const H=it.isWebGL2;ge===null&&(ge=new Pa(1,1,{generateMipmaps:!0,type:Z.has("EXT_color_buffer_half_float")?tc:Or,minFilter:Ru,samples:H?4:0})),E.getDrawingBufferSize(Be),H?ge.setSize(Be.x,Be.y):ge.setSize(o0(Be.x),o0(Be.y));const ae=E.getRenderTarget();E.setRenderTarget(ge),E.getClearColor($),z=E.getClearAlpha(),z<1&&E.setClearColor(16777215,.5),E.clear();const me=E.toneMapping;E.toneMapping=Ra,tr(K,Ue,Ie),Q.updateMultisampleRenderTarget(ge),Q.updateRenderTargetMipmap(ge);let ve=!1;for(let le=0,Fe=Se.length;le<Fe;le++){const qe=Se[le],et=qe.object,rt=qe.geometry,pt=qe.material,_t=qe.group;if(pt.side===hs&&et.layers.test(Ie.layers)){const ot=pt.side;pt.side=Ii,pt.needsUpdate=!0,Ba(et,Ue,Ie,rt,pt,_t),pt.side=ot,pt.needsUpdate=!0,ve=!0}}ve===!0&&(Q.updateMultisampleRenderTarget(ge),Q.updateRenderTargetMipmap(ge)),E.setRenderTarget(ae),E.setClearColor($,z),E.toneMapping=me}function tr(K,Se,Ue){const Ie=Se.isScene===!0?Se.overrideMaterial:null;for(let we=0,H=K.length;we<H;we++){const ae=K[we],me=ae.object,ve=ae.geometry,le=Ie===null?ae.material:Ie,Fe=ae.group;me.layers.test(Ue.layers)&&Ba(me,Se,Ue,ve,le,Fe)}}function Ba(K,Se,Ue,Ie,we,H){K.onBeforeRender(E,Se,Ue,Ie,we,H),K.modelViewMatrix.multiplyMatrices(Ue.matrixWorldInverse,K.matrixWorld),K.normalMatrix.getNormalMatrix(K.modelViewMatrix),we.onBeforeRender(E,Se,Ue,Ie,K,H),we.transparent===!0&&we.side===hs&&we.forceSinglePass===!1?(we.side=Ii,we.needsUpdate=!0,E.renderBufferDirect(Ue,Se,Ie,we,K,H),we.side=js,we.needsUpdate=!0,E.renderBufferDirect(Ue,Se,Ie,we,K,H),we.side=hs):E.renderBufferDirect(Ue,Se,Ie,we,K,H),K.onAfterRender(E,Se,Ue,Ie,we,H)}function Ji(K,Se,Ue){Se.isScene!==!0&&(Se=Xe);const Ie=$e.get(K),we=S.state.lights,H=S.state.shadowsArray,ae=we.state.version,me=Ee.getParameters(K,we.state,H,Se,Ue),ve=Ee.getProgramCacheKey(me);let le=Ie.programs;Ie.environment=K.isMeshStandardMaterial?Se.environment:null,Ie.fog=Se.fog,Ie.envMap=(K.isMeshStandardMaterial?N:G).get(K.envMap||Ie.environment),le===void 0&&(K.addEventListener("dispose",De),le=new Map,Ie.programs=le);let Fe=le.get(ve);if(Fe!==void 0){if(Ie.currentProgram===Fe&&Ie.lightsStateVersion===ae)return vs(K,me),Fe}else me.uniforms=Ee.getUniforms(K),K.onBuild(Ue,me,E),K.onBeforeCompile(me,E),Fe=Ee.acquireProgram(me,ve),le.set(ve,Fe),Ie.uniforms=me.uniforms;const qe=Ie.uniforms;return(!K.isShaderMaterial&&!K.isRawShaderMaterial||K.clipping===!0)&&(qe.clippingPlanes=je.uniform),vs(K,me),Ie.needsLights=nr(K),Ie.lightsStateVersion=ae,Ie.needsLights&&(qe.ambientLightColor.value=we.state.ambient,qe.lightProbe.value=we.state.probe,qe.directionalLights.value=we.state.directional,qe.directionalLightShadows.value=we.state.directionalShadow,qe.spotLights.value=we.state.spot,qe.spotLightShadows.value=we.state.spotShadow,qe.rectAreaLights.value=we.state.rectArea,qe.ltc_1.value=we.state.rectAreaLTC1,qe.ltc_2.value=we.state.rectAreaLTC2,qe.pointLights.value=we.state.point,qe.pointLightShadows.value=we.state.pointShadow,qe.hemisphereLights.value=we.state.hemi,qe.directionalShadowMap.value=we.state.directionalShadowMap,qe.directionalShadowMatrix.value=we.state.directionalShadowMatrix,qe.spotShadowMap.value=we.state.spotShadowMap,qe.spotLightMatrix.value=we.state.spotLightMatrix,qe.spotLightMap.value=we.state.spotLightMap,qe.pointShadowMap.value=we.state.pointShadowMap,qe.pointShadowMatrix.value=we.state.pointShadowMatrix),Ie.currentProgram=Fe,Ie.uniformsList=null,Fe}function _s(K){if(K.uniformsList===null){const Se=K.currentProgram.getUniforms();K.uniformsList=Jd.seqWithValue(Se.seq,K.uniforms)}return K.uniformsList}function vs(K,Se){const Ue=$e.get(K);Ue.outputColorSpace=Se.outputColorSpace,Ue.batching=Se.batching,Ue.instancing=Se.instancing,Ue.instancingColor=Se.instancingColor,Ue.skinning=Se.skinning,Ue.morphTargets=Se.morphTargets,Ue.morphNormals=Se.morphNormals,Ue.morphColors=Se.morphColors,Ue.morphTargetsCount=Se.morphTargetsCount,Ue.numClippingPlanes=Se.numClippingPlanes,Ue.numIntersection=Se.numClipIntersection,Ue.vertexAlphas=Se.vertexAlphas,Ue.vertexTangents=Se.vertexTangents,Ue.toneMapping=Se.toneMapping}function Ss(K,Se,Ue,Ie,we){Se.isScene!==!0&&(Se=Xe),Q.resetTextureUnits();const H=Se.fog,ae=Ie.isMeshStandardMaterial?Se.environment:null,me=w===null?E.outputColorSpace:w.isXRRenderTarget===!0?w.texture.colorSpace:Gr,ve=(Ie.isMeshStandardMaterial?N:G).get(Ie.envMap||ae),le=Ie.vertexColors===!0&&!!Ue.attributes.color&&Ue.attributes.color.itemSize===4,Fe=!!Ue.attributes.tangent&&(!!Ie.normalMap||Ie.anisotropy>0),qe=!!Ue.morphAttributes.position,et=!!Ue.morphAttributes.normal,rt=!!Ue.morphAttributes.color;let pt=Ra;Ie.toneMapped&&(w===null||w.isXRRenderTarget===!0)&&(pt=E.toneMapping);const _t=Ue.morphAttributes.position||Ue.morphAttributes.normal||Ue.morphAttributes.color,ot=_t!==void 0?_t.length:0,dt=$e.get(Ie),Wt=S.state.lights;if(j===!0&&(ue===!0||K!==C)){const Ot=K===C&&Ie.id===B;je.setState(Ie,K,Ot)}let wt=!1;Ie.version===dt.__version?(dt.needsLights&&dt.lightsStateVersion!==Wt.state.version||dt.outputColorSpace!==me||we.isBatchedMesh&&dt.batching===!1||!we.isBatchedMesh&&dt.batching===!0||we.isInstancedMesh&&dt.instancing===!1||!we.isInstancedMesh&&dt.instancing===!0||we.isSkinnedMesh&&dt.skinning===!1||!we.isSkinnedMesh&&dt.skinning===!0||we.isInstancedMesh&&dt.instancingColor===!0&&we.instanceColor===null||we.isInstancedMesh&&dt.instancingColor===!1&&we.instanceColor!==null||dt.envMap!==ve||Ie.fog===!0&&dt.fog!==H||dt.numClippingPlanes!==void 0&&(dt.numClippingPlanes!==je.numPlanes||dt.numIntersection!==je.numIntersection)||dt.vertexAlphas!==le||dt.vertexTangents!==Fe||dt.morphTargets!==qe||dt.morphNormals!==et||dt.morphColors!==rt||dt.toneMapping!==pt||it.isWebGL2===!0&&dt.morphTargetsCount!==ot)&&(wt=!0):(wt=!0,dt.__version=Ie.version);let Lt=dt.currentProgram;wt===!0&&(Lt=Ji(Ie,Se,we));let Ht=!1,xt=!1,gn=!1;const Tt=Lt.getUniforms(),xn=dt.uniforms;if(Ke.useProgram(Lt.program)&&(Ht=!0,xt=!0,gn=!0),Ie.id!==B&&(B=Ie.id,xt=!0),Ht||C!==K){Tt.setValue(_e,"projectionMatrix",K.projectionMatrix),Tt.setValue(_e,"viewMatrix",K.matrixWorldInverse);const Ot=Tt.map.cameraPosition;Ot!==void 0&&Ot.setValue(_e,Ze.setFromMatrixPosition(K.matrixWorld)),it.logarithmicDepthBuffer&&Tt.setValue(_e,"logDepthBufFC",2/(Math.log(K.far+1)/Math.LN2)),(Ie.isMeshPhongMaterial||Ie.isMeshToonMaterial||Ie.isMeshLambertMaterial||Ie.isMeshBasicMaterial||Ie.isMeshStandardMaterial||Ie.isShaderMaterial)&&Tt.setValue(_e,"isOrthographic",K.isOrthographicCamera===!0),C!==K&&(C=K,xt=!0,gn=!0)}if(we.isSkinnedMesh){Tt.setOptional(_e,we,"bindMatrix"),Tt.setOptional(_e,we,"bindMatrixInverse");const Ot=we.skeleton;Ot&&(it.floatVertexTextures?(Ot.boneTexture===null&&Ot.computeBoneTexture(),Tt.setValue(_e,"boneTexture",Ot.boneTexture,Q)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}we.isBatchedMesh&&(Tt.setOptional(_e,we,"batchingTexture"),Tt.setValue(_e,"batchingTexture",we._matricesTexture,Q));const es=Ue.morphAttributes;if((es.position!==void 0||es.normal!==void 0||es.color!==void 0&&it.isWebGL2===!0)&&te.update(we,Ue,Lt),(xt||dt.receiveShadow!==we.receiveShadow)&&(dt.receiveShadow=we.receiveShadow,Tt.setValue(_e,"receiveShadow",we.receiveShadow)),Ie.isMeshGouraudMaterial&&Ie.envMap!==null&&(xn.envMap.value=ve,xn.flipEnvMap.value=ve.isCubeTexture&&ve.isRenderTargetTexture===!1?-1:1),xt&&(Tt.setValue(_e,"toneMappingExposure",E.toneMappingExposure),dt.needsLights&&xs(xn,gn),H&&Ie.fog===!0&&pe.refreshFogUniforms(xn,H),pe.refreshMaterialUniforms(xn,Ie,Y,I,ge),Jd.upload(_e,_s(dt),xn,Q)),Ie.isShaderMaterial&&Ie.uniformsNeedUpdate===!0&&(Jd.upload(_e,_s(dt),xn,Q),Ie.uniformsNeedUpdate=!1),Ie.isSpriteMaterial&&Tt.setValue(_e,"center",we.center),Tt.setValue(_e,"modelViewMatrix",we.modelViewMatrix),Tt.setValue(_e,"normalMatrix",we.normalMatrix),Tt.setValue(_e,"modelMatrix",we.matrixWorld),Ie.isShaderMaterial||Ie.isRawShaderMaterial){const Ot=Ie.uniformsGroups;for(let Fi=0,tn=Ot.length;Fi<tn;Fi++)if(it.isWebGL2){const Hn=Ot[Fi];st.update(Hn,Lt),st.bind(Hn,Lt)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return Lt}function xs(K,Se){K.ambientLightColor.needsUpdate=Se,K.lightProbe.needsUpdate=Se,K.directionalLights.needsUpdate=Se,K.directionalLightShadows.needsUpdate=Se,K.pointLights.needsUpdate=Se,K.pointLightShadows.needsUpdate=Se,K.spotLights.needsUpdate=Se,K.spotLightShadows.needsUpdate=Se,K.rectAreaLights.needsUpdate=Se,K.hemisphereLights.needsUpdate=Se}function nr(K){return K.isMeshLambertMaterial||K.isMeshToonMaterial||K.isMeshPhongMaterial||K.isMeshStandardMaterial||K.isShadowMaterial||K.isShaderMaterial&&K.lights===!0}this.getActiveCubeFace=function(){return D},this.getActiveMipmapLevel=function(){return L},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(K,Se,Ue){$e.get(K.texture).__webglTexture=Se,$e.get(K.depthTexture).__webglTexture=Ue;const Ie=$e.get(K);Ie.__hasExternalTextures=!0,Ie.__hasExternalTextures&&(Ie.__autoAllocateDepthBuffer=Ue===void 0,Ie.__autoAllocateDepthBuffer||Z.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),Ie.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(K,Se){const Ue=$e.get(K);Ue.__webglFramebuffer=Se,Ue.__useDefaultFramebuffer=Se===void 0},this.setRenderTarget=function(K,Se=0,Ue=0){w=K,D=Se,L=Ue;let Ie=!0,we=null,H=!1,ae=!1;if(K){const ve=$e.get(K);ve.__useDefaultFramebuffer!==void 0?(Ke.bindFramebuffer(_e.FRAMEBUFFER,null),Ie=!1):ve.__webglFramebuffer===void 0?Q.setupRenderTarget(K):ve.__hasExternalTextures&&Q.rebindTextures(K,$e.get(K.texture).__webglTexture,$e.get(K.depthTexture).__webglTexture);const le=K.texture;(le.isData3DTexture||le.isDataArrayTexture||le.isCompressedArrayTexture)&&(ae=!0);const Fe=$e.get(K).__webglFramebuffer;K.isWebGLCubeRenderTarget?(Array.isArray(Fe[Se])?we=Fe[Se][Ue]:we=Fe[Se],H=!0):it.isWebGL2&&K.samples>0&&Q.useMultisampledRTT(K)===!1?we=$e.get(K).__webglMultisampledFramebuffer:Array.isArray(Fe)?we=Fe[Ue]:we=Fe,T.copy(K.viewport),O.copy(K.scissor),X=K.scissorTest}else T.copy(F).multiplyScalar(Y).floor(),O.copy(ee).multiplyScalar(Y).floor(),X=ce;if(Ke.bindFramebuffer(_e.FRAMEBUFFER,we)&&it.drawBuffers&&Ie&&Ke.drawBuffers(K,we),Ke.viewport(T),Ke.scissor(O),Ke.setScissorTest(X),H){const ve=$e.get(K.texture);_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_CUBE_MAP_POSITIVE_X+Se,ve.__webglTexture,Ue)}else if(ae){const ve=$e.get(K.texture),le=Se||0;_e.framebufferTextureLayer(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,ve.__webglTexture,Ue||0,le)}B=-1},this.readRenderTargetPixels=function(K,Se,Ue,Ie,we,H,ae){if(!(K&&K.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let me=$e.get(K).__webglFramebuffer;if(K.isWebGLCubeRenderTarget&&ae!==void 0&&(me=me[ae]),me){Ke.bindFramebuffer(_e.FRAMEBUFFER,me);try{const ve=K.texture,le=ve.format,Fe=ve.type;if(le!==Ai&&be.convert(le)!==_e.getParameter(_e.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const qe=Fe===tc&&(Z.has("EXT_color_buffer_half_float")||it.isWebGL2&&Z.has("EXT_color_buffer_float"));if(Fe!==Or&&be.convert(Fe)!==_e.getParameter(_e.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Fe===Xs&&(it.isWebGL2||Z.has("OES_texture_float")||Z.has("WEBGL_color_buffer_float")))&&!qe){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Se>=0&&Se<=K.width-Ie&&Ue>=0&&Ue<=K.height-we&&_e.readPixels(Se,Ue,Ie,we,be.convert(le),be.convert(Fe),H)}finally{const ve=w!==null?$e.get(w).__webglFramebuffer:null;Ke.bindFramebuffer(_e.FRAMEBUFFER,ve)}}},this.copyFramebufferToTexture=function(K,Se,Ue=0){const Ie=Math.pow(2,-Ue),we=Math.floor(Se.image.width*Ie),H=Math.floor(Se.image.height*Ie);Q.setTexture2D(Se,0),_e.copyTexSubImage2D(_e.TEXTURE_2D,Ue,0,0,K.x,K.y,we,H),Ke.unbindTexture()},this.copyTextureToTexture=function(K,Se,Ue,Ie=0){const we=Se.image.width,H=Se.image.height,ae=be.convert(Ue.format),me=be.convert(Ue.type);Q.setTexture2D(Ue,0),_e.pixelStorei(_e.UNPACK_FLIP_Y_WEBGL,Ue.flipY),_e.pixelStorei(_e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Ue.premultiplyAlpha),_e.pixelStorei(_e.UNPACK_ALIGNMENT,Ue.unpackAlignment),Se.isDataTexture?_e.texSubImage2D(_e.TEXTURE_2D,Ie,K.x,K.y,we,H,ae,me,Se.image.data):Se.isCompressedTexture?_e.compressedTexSubImage2D(_e.TEXTURE_2D,Ie,K.x,K.y,Se.mipmaps[0].width,Se.mipmaps[0].height,ae,Se.mipmaps[0].data):_e.texSubImage2D(_e.TEXTURE_2D,Ie,K.x,K.y,ae,me,Se.image),Ie===0&&Ue.generateMipmaps&&_e.generateMipmap(_e.TEXTURE_2D),Ke.unbindTexture()},this.copyTextureToTexture3D=function(K,Se,Ue,Ie,we=0){if(E.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const H=K.max.x-K.min.x+1,ae=K.max.y-K.min.y+1,me=K.max.z-K.min.z+1,ve=be.convert(Ie.format),le=be.convert(Ie.type);let Fe;if(Ie.isData3DTexture)Q.setTexture3D(Ie,0),Fe=_e.TEXTURE_3D;else if(Ie.isDataArrayTexture||Ie.isCompressedArrayTexture)Q.setTexture2DArray(Ie,0),Fe=_e.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}_e.pixelStorei(_e.UNPACK_FLIP_Y_WEBGL,Ie.flipY),_e.pixelStorei(_e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,Ie.premultiplyAlpha),_e.pixelStorei(_e.UNPACK_ALIGNMENT,Ie.unpackAlignment);const qe=_e.getParameter(_e.UNPACK_ROW_LENGTH),et=_e.getParameter(_e.UNPACK_IMAGE_HEIGHT),rt=_e.getParameter(_e.UNPACK_SKIP_PIXELS),pt=_e.getParameter(_e.UNPACK_SKIP_ROWS),_t=_e.getParameter(_e.UNPACK_SKIP_IMAGES),ot=Ue.isCompressedTexture?Ue.mipmaps[we]:Ue.image;_e.pixelStorei(_e.UNPACK_ROW_LENGTH,ot.width),_e.pixelStorei(_e.UNPACK_IMAGE_HEIGHT,ot.height),_e.pixelStorei(_e.UNPACK_SKIP_PIXELS,K.min.x),_e.pixelStorei(_e.UNPACK_SKIP_ROWS,K.min.y),_e.pixelStorei(_e.UNPACK_SKIP_IMAGES,K.min.z),Ue.isDataTexture||Ue.isData3DTexture?_e.texSubImage3D(Fe,we,Se.x,Se.y,Se.z,H,ae,me,ve,le,ot.data):Ue.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),_e.compressedTexSubImage3D(Fe,we,Se.x,Se.y,Se.z,H,ae,me,ve,ot.data)):_e.texSubImage3D(Fe,we,Se.x,Se.y,Se.z,H,ae,me,ve,le,ot),_e.pixelStorei(_e.UNPACK_ROW_LENGTH,qe),_e.pixelStorei(_e.UNPACK_IMAGE_HEIGHT,et),_e.pixelStorei(_e.UNPACK_SKIP_PIXELS,rt),_e.pixelStorei(_e.UNPACK_SKIP_ROWS,pt),_e.pixelStorei(_e.UNPACK_SKIP_IMAGES,_t),we===0&&Ie.generateMipmaps&&_e.generateMipmap(Fe),Ke.unbindTexture()},this.initTexture=function(K){K.isCubeTexture?Q.setTextureCube(K,0):K.isData3DTexture?Q.setTexture3D(K,0):K.isDataArrayTexture||K.isCompressedArrayTexture?Q.setTexture2DArray(K,0):Q.setTexture2D(K,0),Ke.unbindTexture()},this.resetState=function(){D=0,L=0,w=null,Ke.reset(),tt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Br}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===o_?"display-p3":"srgb",t.unpackColorSpace=dn.workingColorSpace===Mh?"display-p3":"srgb"}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===ci?Eo:yE}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=e===Eo?ci:Gr}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=e}};class lP extends eT{}lP.prototype.isWebGL1Renderer=!0;let cP=class extends yi{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t}};class _a extends Zs{constructor(e=null,t=1,n=1,s,o,c,u,f,d=li,p=li,m,g){super(null,c,u,f,d,p,s,o,m,g),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class uP extends ms{constructor(e,t,n,s=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}class Du extends Js{constructor(e=1,t=1,n=1,s=32,o=1,c=!1,u=0,f=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:s,heightSegments:o,openEnded:c,thetaStart:u,thetaLength:f};const d=this;s=Math.floor(s),o=Math.floor(o);const p=[],m=[],g=[],v=[];let A=0;const y=[],S=n/2;let _=0;b(),c===!1&&(e>0&&E(!0),t>0&&E(!1)),this.setIndex(p),this.setAttribute("position",new ji(m,3)),this.setAttribute("normal",new ji(g,3)),this.setAttribute("uv",new ji(v,2));function b(){const R=new ne,D=new ne;let L=0;const w=(t-e)/n;for(let B=0;B<=o;B++){const C=[],T=B/o,O=T*(t-e)+e;for(let X=0;X<=s;X++){const $=X/s,z=$*f+u,k=Math.sin(z),I=Math.cos(z);D.x=O*k,D.y=-T*n+S,D.z=O*I,m.push(D.x,D.y,D.z),R.set(k,w,I).normalize(),g.push(R.x,R.y,R.z),v.push($,1-T),C.push(A++)}y.push(C)}for(let B=0;B<s;B++)for(let C=0;C<o;C++){const T=y[C][B],O=y[C+1][B],X=y[C+1][B+1],$=y[C][B+1];p.push(T,O,$),p.push(O,X,$),L+=6}d.addGroup(_,L,0),_+=L}function E(R){const D=A,L=new vt,w=new ne;let B=0;const C=R===!0?e:t,T=R===!0?1:-1;for(let X=1;X<=s;X++)m.push(0,S*T,0),g.push(0,T,0),v.push(.5,.5),A++;const O=A;for(let X=0;X<=s;X++){const z=X/s*f+u,k=Math.cos(z),I=Math.sin(z);w.x=C*I,w.y=S*T,w.z=C*k,m.push(w.x,w.y,w.z),g.push(0,T,0),L.x=k*.5+.5,L.y=I*.5*T+.5,v.push(L.x,L.y),A++}for(let X=0;X<s;X++){const $=D+X,z=O+X;R===!0?p.push(z,z+1,$):p.push(z+1,z,$),B+=3}d.addGroup(_,B,R===!0?1:2),_+=B}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Du(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class d_ extends Du{constructor(e=1,t=1,n=32,s=1,o=!1,c=0,u=Math.PI*2){super(0,e,t,n,s,o,c,u),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:s,openEnded:o,thetaStart:c,thetaLength:u}}static fromJSON(e){return new d_(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class hh extends Js{constructor(e=1,t=32,n=16,s=0,o=Math.PI*2,c=0,u=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:s,phiLength:o,thetaStart:c,thetaLength:u},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const f=Math.min(c+u,Math.PI);let d=0;const p=[],m=new ne,g=new ne,v=[],A=[],y=[],S=[];for(let _=0;_<=n;_++){const b=[],E=_/n;let R=0;_===0&&c===0?R=.5/t:_===n&&f===Math.PI&&(R=-.5/t);for(let D=0;D<=t;D++){const L=D/t;m.x=-e*Math.cos(s+L*o)*Math.sin(c+E*u),m.y=e*Math.cos(c+E*u),m.z=e*Math.sin(s+L*o)*Math.sin(c+E*u),A.push(m.x,m.y,m.z),g.copy(m).normalize(),y.push(g.x,g.y,g.z),S.push(L+R,1-E),b.push(d++)}p.push(b)}for(let _=0;_<n;_++)for(let b=0;b<t;b++){const E=p[_][b+1],R=p[_][b],D=p[_+1][b],L=p[_+1][b+1];(_!==0||c>0)&&v.push(E,R,L),(_!==n-1||f<Math.PI)&&v.push(R,D,L)}this.setIndex(v),this.setAttribute("position",new ji(A,3)),this.setAttribute("normal",new ji(y,3)),this.setAttribute("uv",new ji(S,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new hh(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class fP extends Js{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class Vy{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(gi(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:s_}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=s_);const So=class So{constructor(e,t){let n,s;this.promise=new Promise((d,p)=>{n=d,s=p});const o=n.bind(this),c=s.bind(this),u=(...d)=>{o(...d)},f=d=>{c(d)};e(u.bind(this),f.bind(this)),this.abortHandler=t,this.id=So.idGen++}then(e){return new So((t,n)=>{this.promise=this.promise.then((...s)=>{const o=e(...s);o instanceof Promise||o instanceof So?o.then((...c)=>{t(...c)}):t(o)}).catch(s=>{n(s)})},this.abortHandler)}catch(e){return new So(t=>{this.promise=this.promise.then((...n)=>{t(...n)}).catch(e)},this.abortHandler)}abort(e){this.abortHandler&&this.abortHandler(e)}};nt(So,"idGen",0);let Lu=So;class tT extends Error{constructor(e){super(e)}}(function(){const r=new Float32Array(1),e=new Int32Array(r.buffer);return function(t){r[0]=t;const n=e[0];let s=n>>16&32768,o=n>>12&2047;const c=n>>23&255;return c<103?s:c>142?(s|=31744,s|=(c==255?0:1)&&n&8388607,s):c<113?(o|=2048,s|=(o>>114-c)+(o>>113-c&1),s):(s|=c-112<<10|o>>1,s+=o&1,s)}})();const mg=function(){const r=new Float32Array(1),e=new Int32Array(r.buffer);return function(t){return r[0]=t,e[0]}}(),dP=function(r,e){return r[e]+(r[e+1]<<8)+(r[e+2]<<16)+(r[e+3]<<24)},Ch=function(r,e,t=!0,n){const s=new AbortController,o=s.signal;let c=!1;const u=p=>{s.abort(p),c=!0};let f=!1;const d=(p,m,g,v)=>{e&&!f&&(e(p,m,g,v),p===100&&(f=!0))};return new Lu((p,m)=>{const g={signal:o};n&&(g.headers=n),fetch(r,g).then(async v=>{if(!v.ok){const E=await v.text();m(new Error(`Fetch failed: ${v.status} ${v.statusText} ${E}`));return}const A=v.body.getReader();let y=0,S=v.headers.get("Content-Length"),_=S?parseInt(S):void 0;const b=[];for(;!c;)try{const{value:E,done:R}=await A.read();if(R){if(d(100,"100%",E,_),t){const w=new Blob(b).arrayBuffer();p(w)}else p();break}y+=E.length;let D,L;_!==void 0&&(D=y/_*100,L=`${D.toFixed(2)}%`),t&&b.push(E),d(D,L,E,_)}catch(E){m(E);return}}).catch(v=>{m(new tT(v))})},u)},Mn=function(r,e,t){return Math.max(Math.min(r,t),e)},bl=function(){return performance.now()/1e3},Vl=r=>{if(r.geometry&&(r.geometry.dispose(),r.geometry=null),r.material&&(r.material.dispose(),r.material=null),r.children)for(let e of r.children)Vl(e)},Ki=(r,e)=>new Promise(t=>{window.setTimeout(()=>{t(r?r():void 0)},e?1:50)}),$l=(r=0)=>{let e=0;if(r===1)e=9;else if(r===2)e=24;else if(r===3)e=45;else if(r>3)throw new Error("getSphericalHarmonicsComponentCountForDegree() -> Invalid spherical harmonics degree");return e},h_=()=>{let r,e;return{promise:new Promise((n,s)=>{r=n,e=s}),resolve:r,reject:e}},gg=r=>{let e,t;return r||(r=()=>{}),{promise:new Lu((s,o)=>{e=s,t=o},r),resolve:e,reject:t}};class hP{constructor(e,t,n){this.major=e,this.minor=t,this.patch=n}toString(){return`${this.major}_${this.minor}_${this.patch}`}}function p_(){const r=navigator.userAgent;return r.indexOf("iPhone")>0||r.indexOf("iPad")>0}function nT(){if(p_()){const r=navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);return new hP(parseInt(r[1]||0,10),parseInt(r[2]||0,10),parseInt(r[3]||0,10))}else return null}const pP=14,Tu=class Tu{constructor(e=0){this.sphericalHarmonicsDegree=e,this.sphericalHarmonicsCount=$l(this.sphericalHarmonicsDegree),this.componentCount=this.sphericalHarmonicsCount+pP,this.defaultSphericalHarmonics=new Array(this.sphericalHarmonicsCount).fill(0),this.splats=[],this.splatCount=0}static createSplat(e=0){const t=[0,0,0,1,1,1,1,0,0,0,0,0,0,0];let n=$l(e);for(let s=0;s<n;s++)t.push(0);return t}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=Tu.createSplat(this.sphericalHarmonicsDegree);return this.addSplat(e),e}addSplatFromComonents(e,t,n,s,o,c,u,f,d,p,m,g,v,A,...y){const S=[e,t,n,s,o,c,u,f,d,p,m,g,v,A,...this.defaultSphericalHarmonics];for(let _=0;_<y.length&&_<this.sphericalHarmonicsCount;_++)S[_]=y[_];return this.addSplat(S),S}addSplatFromArray(e,t){const n=e.splats[t],s=Tu.createSplat(this.sphericalHarmonicsDegree);for(let o=0;o<this.componentCount&&o<n.length;o++)s[o]=n[o];this.addSplat(s)}};nt(Tu,"OFFSET",{X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13,FRC0:14,FRC1:15,FRC2:16,FRC3:17,FRC4:18,FRC5:19,FRC6:20,FRC7:21,FRC8:22,FRC9:23,FRC10:24,FRC11:25,FRC12:26,FRC13:27,FRC14:28,FRC15:29,FRC16:30,FRC17:31,FRC18:32,FRC19:33,FRC20:34,FRC21:35,FRC22:36,FRC23:37});let lt=Tu;class Xt{}nt(Xt,"DefaultSplatSortDistanceMapPrecision",16),nt(Xt,"MemoryPageSize",65536),nt(Xt,"BytesPerFloat",4),nt(Xt,"BytesPerInt",4),nt(Xt,"MaxScenes",32),nt(Xt,"ProgressiveLoadSectionSize",262144),nt(Xt,"ProgressiveLoadSectionDelayDuration",15),nt(Xt,"SphericalHarmonics8BitCompressionRange",3);const mP=Xt.SphericalHarmonics8BitCompressionRange,xd=mP/2,Wn=wu.toHalfFloat.bind(wu),m_=wu.fromHalfFloat.bind(wu),yn=(r,e,t=!1,n,s)=>{if(e===0)return r;if(e===1||e===2&&!t)return wu.fromHalfFloat(r);if(e===2)return g_(r,n,s)},Au=(r,e,t)=>{r=Mn(r,e,t);const n=t-e;return Mn(Math.floor((r-e)/n*255),0,255)},g_=(r,e,t)=>{const n=t-e;return r/255*n+e},iT=(r,e,t)=>Au(m_(r,e,t)),gP=(r,e,t)=>Wn(g_(r,e,t)),Jt=(r,e,t,n=!1)=>t===0?r.getFloat32(e*4,!0):t===1||t===2&&!n?r.getUint16(e*2,!0):r.getUint8(e,!0),_P=function(){const r=e=>e;return function(e,t,n,s=!1){if(t===n)return e;let o=r;return t===2&&s?n===1?o=gP:n==0&&(o=g_):t===2||t===1?n===0?o=m_:n==2&&(s?o=iT:o=r):t===0&&(n===1?o=Wn:n==2&&(s?o=Au:o=Wn)),o(e)}}(),Cl=(r,e,t,n,s=0)=>{const o=new Uint8Array(r,e),c=new Uint8Array(t,n);for(let u=0;u<s;u++)c[u]=o[u]},He=class He{constructor(e,t=!0){nt(this,"getSplatScaleAndRotation",function(){const e=new Bt,t=new Bt,n=new Bt,s=new ne,o=new ne,c=new En;return function(u,f,d,p,m){const g=this.globalSplatIndexToSectionMap[u],v=this.sections[g],A=u-v.splatCountOffset,y=v.bytesPerSplat*A+He.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,S=new DataView(this.bufferData,v.dataBase+y);o.set(yn(Jt(S,0,this.compressionLevel),this.compressionLevel),yn(Jt(S,1,this.compressionLevel),this.compressionLevel),yn(Jt(S,2,this.compressionLevel),this.compressionLevel)),m&&(m.x!==void 0&&(o.x=m.x),m.y!==void 0&&(o.y=m.y),m.z!==void 0&&(o.z=m.z)),c.set(yn(Jt(S,4,this.compressionLevel),this.compressionLevel),yn(Jt(S,5,this.compressionLevel),this.compressionLevel),yn(Jt(S,6,this.compressionLevel),this.compressionLevel),yn(Jt(S,3,this.compressionLevel),this.compressionLevel)),p?(e.makeScale(o.x,o.y,o.z),t.makeRotationFromQuaternion(c),n.copy(e).multiply(t).multiply(p),n.decompose(s,d,f)):(f.copy(o),d.copy(c))}}());nt(this,"fillSplatScaleRotationArray",function(){const e=new Bt,t=new Bt,n=new Bt,s=new ne,o=new En,c=new ne,u=f=>{const d=f.w<0?-1:1;f.x*=d,f.y*=d,f.z*=d,f.w*=d};return function(f,d,p,m,g,v,A,y){const S=this.splatCount;m=m||0,g=g||S-1,v===void 0&&(v=m);const _=(b,E)=>_P(b,E,A);for(let b=m;b<=g;b++){const E=this.globalSplatIndexToSectionMap[b],R=this.sections[E],D=b-R.splatCountOffset,L=R.bytesPerSplat*D+He.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,w=(b-m+v)*He.ScaleComponentCount,B=(b-m+v)*He.RotationComponentCount,C=new DataView(this.bufferData,R.dataBase+L),T=y&&y.x!==void 0?y.x:Jt(C,0,this.compressionLevel),O=y&&y.y!==void 0?y.y:Jt(C,1,this.compressionLevel),X=y&&y.z!==void 0?y.z:Jt(C,2,this.compressionLevel),$=Jt(C,3,this.compressionLevel),z=Jt(C,4,this.compressionLevel),k=Jt(C,5,this.compressionLevel),I=Jt(C,6,this.compressionLevel);s.set(yn(T,this.compressionLevel),yn(O,this.compressionLevel),yn(X,this.compressionLevel)),o.set(yn(z,this.compressionLevel),yn(k,this.compressionLevel),yn(I,this.compressionLevel),yn($,this.compressionLevel)).normalize(),p&&(c.set(0,0,0),e.makeScale(s.x,s.y,s.z),t.makeRotationFromQuaternion(o),n.identity().premultiply(e).premultiply(t),n.premultiply(p),n.decompose(c,o,s),o.normalize()),u(o),f&&(f[w]=_(s.x,0),f[w+1]=_(s.y,0),f[w+2]=_(s.z,0)),d&&(d[B]=_(o.x,0),d[B+1]=_(o.y,0),d[B+2]=_(o.z,0),d[B+3]=_(o.w,0))}}}());nt(this,"fillSphericalHarmonicsArray",function(){for(let z=0;z<15;z++)new ne;const e=new Pt,t=new Bt,n=new ne,s=new ne,o=new En,c=[],u=[],f=[],d=[],p=[],m=[],g=[],v=[],A=[],y=[],S=[],_=[],b=[],E=[],R=[],D=[],L=[],w=[],B=z=>z,C=(z,k,I,Y)=>{z[0]=k,z[1]=I,z[2]=Y},T=(z,k,I,Y,q)=>{z[0]=Jt(k,Y,q,!0),z[1]=Jt(k,Y+I,q,!0),z[2]=Jt(k,Y+I+I,q,!0)},O=(z,k)=>{k[0]=z[0],k[1]=z[1],k[2]=z[2]},X=(z,k,I,Y)=>{k[I]=Y(z[0]),k[I+1]=Y(z[1]),k[I+2]=Y(z[2])},$=(z,k,I,Y,q)=>(k[0]=yn(z[0],I,!0,Y,q),k[1]=yn(z[1],I,!0,Y,q),k[2]=yn(z[2],I,!0,Y,q),k);return function(z,k,I,Y,q,J,F){const ee=this.splatCount;Y=Y||0,q=q||ee-1,J===void 0&&(J=Y),I&&k>=1&&(t.copy(I),t.decompose(n,o,s),o.normalize(),t.makeRotationFromQuaternion(o),e.setFromMatrix4(t),C(c,e.elements[4],-e.elements[7],e.elements[1]),C(u,-e.elements[5],e.elements[8],-e.elements[2]),C(f,e.elements[3],-e.elements[6],e.elements[0]));const ce=j=>iT(j,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff),ie=j=>Au(j,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff);for(let j=Y;j<=q;j++){const ue=this.globalSplatIndexToSectionMap[j],ge=this.sections[ue];k=Math.min(k,ge.sphericalHarmonicsDegree);const Ae=$l(k),Be=j-ge.splatCountOffset,Ze=ge.bytesPerSplat*Be+He.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes,Xe=new DataView(this.bufferData,ge.dataBase+Ze),ft=(j-Y+J)*Ae;let _e=I?0:this.compressionLevel,ct=B;_e!==F&&(_e===1?F===0?ct=m_:F==2&&(ct=ce):_e===0&&(F===1?ct=Wn:F==2&&(ct=ie)));const Z=this.minSphericalHarmonicsCoeff,it=this.maxSphericalHarmonicsCoeff;k>=1&&(T(A,Xe,3,0,this.compressionLevel),T(y,Xe,3,1,this.compressionLevel),T(S,Xe,3,2,this.compressionLevel),I?($(A,A,this.compressionLevel,Z,it),$(y,y,this.compressionLevel,Z,it),$(S,S,this.compressionLevel,Z,it),He.rotateSphericalHarmonics3(A,y,S,c,u,f,E,R,D)):(O(A,E),O(y,R),O(S,D)),X(E,z,ft,ct),X(R,z,ft+3,ct),X(D,z,ft+6,ct),k>=2&&(T(A,Xe,5,9,this.compressionLevel),T(y,Xe,5,10,this.compressionLevel),T(S,Xe,5,11,this.compressionLevel),T(_,Xe,5,12,this.compressionLevel),T(b,Xe,5,13,this.compressionLevel),I?($(A,A,this.compressionLevel,Z,it),$(y,y,this.compressionLevel,Z,it),$(S,S,this.compressionLevel,Z,it),$(_,_,this.compressionLevel,Z,it),$(b,b,this.compressionLevel,Z,it),He.rotateSphericalHarmonics5(A,y,S,_,b,c,u,f,d,p,m,g,v,E,R,D,L,w)):(O(A,E),O(y,R),O(S,D),O(_,L),O(b,w)),X(E,z,ft+9,ct),X(R,z,ft+12,ct),X(D,z,ft+15,ct),X(L,z,ft+18,ct),X(w,z,ft+21,ct)))}}}());this.constructFromBuffer(e,t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getMinSphericalHarmonicsDegree(){let e=0;for(let t=0;t<this.sections.length;t++){const n=this.sections[t];(t===0||n.sphericalHarmonicsDegree<e)&&(e=n.sphericalHarmonicsDegree)}return e}getBucketIndex(e,t){let n;const s=e.fullBucketCount*e.bucketSize;if(t<s)n=Math.floor(t/e.bucketSize);else{let o=s;n=e.fullBucketCount;let c=0;for(;o<e.splatCount;){let u=e.partiallyFilledBucketLengths[c];if(t>=o&&t<o+u)break;o+=u,n++,c++}}return n}getSplatCenter(e,t,n){const s=this.globalSplatIndexToSectionMap[e],o=this.sections[s],c=e-o.splatCountOffset,u=o.bytesPerSplat*c,f=new DataView(this.bufferData,o.dataBase+u),d=Jt(f,0,this.compressionLevel),p=Jt(f,1,this.compressionLevel),m=Jt(f,2,this.compressionLevel);if(this.compressionLevel>=1){const v=this.getBucketIndex(o,c)*He.BucketStorageSizeFloats,A=o.compressionScaleFactor,y=o.compressionScaleRange;t.x=(d-y)*A+o.bucketArray[v],t.y=(p-y)*A+o.bucketArray[v+1],t.z=(m-y)*A+o.bucketArray[v+2]}else t.x=d,t.y=p,t.z=m;n&&t.applyMatrix4(n)}getSplatColor(e,t){const n=this.globalSplatIndexToSectionMap[e],s=this.sections[n],o=e-s.splatCountOffset,c=s.bytesPerSplat*o+He.CompressionLevels[this.compressionLevel].ColorOffsetBytes,u=new Uint8Array(this.bufferData,s.dataBase+c,4);t.set(u[0],u[1],u[2],u[3])}fillSplatCenterArray(e,t,n,s,o){const c=this.splatCount;n=n||0,s=s||c-1,o===void 0&&(o=n);const u=new ne;for(let f=n;f<=s;f++){const d=this.globalSplatIndexToSectionMap[f],p=this.sections[d],m=f-p.splatCountOffset,g=(f-n+o)*He.CenterComponentCount,v=p.bytesPerSplat*m,A=new DataView(this.bufferData,p.dataBase+v),y=Jt(A,0,this.compressionLevel),S=Jt(A,1,this.compressionLevel),_=Jt(A,2,this.compressionLevel);if(this.compressionLevel>=1){const E=this.getBucketIndex(p,m)*He.BucketStorageSizeFloats,R=p.compressionScaleFactor,D=p.compressionScaleRange;u.x=(y-D)*R+p.bucketArray[E],u.y=(S-D)*R+p.bucketArray[E+1],u.z=(_-D)*R+p.bucketArray[E+2]}else u.x=y,u.y=S,u.z=_;t&&u.applyMatrix4(t),e[g]=u.x,e[g+1]=u.y,e[g+2]=u.z}}fillSplatCovarianceArray(e,t,n,s,o,c){const u=this.splatCount,f=new ne,d=new En;n=n||0,s=s||u-1,o===void 0&&(o=n);for(let p=n;p<=s;p++){const m=this.globalSplatIndexToSectionMap[p],g=this.sections[m],v=p-g.splatCountOffset,A=(p-n+o)*He.CovarianceComponentCount,y=g.bytesPerSplat*v+He.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,S=new DataView(this.bufferData,g.dataBase+y);f.set(yn(Jt(S,0,this.compressionLevel),this.compressionLevel),yn(Jt(S,1,this.compressionLevel),this.compressionLevel),yn(Jt(S,2,this.compressionLevel),this.compressionLevel)),d.set(yn(Jt(S,4,this.compressionLevel),this.compressionLevel),yn(Jt(S,5,this.compressionLevel),this.compressionLevel),yn(Jt(S,6,this.compressionLevel),this.compressionLevel),yn(Jt(S,3,this.compressionLevel),this.compressionLevel)),He.computeCovariance(f,d,t,e,A,c)}}fillSplatColorArray(e,t,n,s,o){const c=this.splatCount;n=n||0,s=s||c-1,o===void 0&&(o=n);for(let u=n;u<=s;u++){const f=this.globalSplatIndexToSectionMap[u],d=this.sections[f],p=u-d.splatCountOffset,m=(u-n+o)*He.ColorComponentCount,g=d.bytesPerSplat*p+He.CompressionLevels[this.compressionLevel].ColorOffsetBytes,v=new Uint8Array(this.bufferData,d.dataBase+g);let A=v[3];A=A>=t?A:0,e[m]=v[0],e[m+1]=v[1],e[m+2]=v[2],e[m+3]=A}}static parseHeader(e){const t=new Uint8Array(e,0,He.HeaderSizeBytes),n=new Uint16Array(e,0,He.HeaderSizeBytes/2),s=new Uint32Array(e,0,He.HeaderSizeBytes/4),o=new Float32Array(e,0,He.HeaderSizeBytes/4),c=t[0],u=t[1],f=s[1],d=s[2],p=s[3],m=s[4],g=n[10],v=new ne(o[6],o[7],o[8]),A=o[9]||-1.5,y=o[10]||xd;return{versionMajor:c,versionMinor:u,maxSectionCount:f,sectionCount:d,maxSplatCount:p,splatCount:m,compressionLevel:g,sceneCenter:v,minSphericalHarmonicsCoeff:A,maxSphericalHarmonicsCoeff:y}}static writeHeaderCountsToBuffer(e,t,n){const s=new Uint32Array(n,0,He.HeaderSizeBytes/4);s[2]=e,s[4]=t}static writeHeaderToBuffer(e,t){const n=new Uint8Array(t,0,He.HeaderSizeBytes),s=new Uint16Array(t,0,He.HeaderSizeBytes/2),o=new Uint32Array(t,0,He.HeaderSizeBytes/4),c=new Float32Array(t,0,He.HeaderSizeBytes/4);n[0]=e.versionMajor,n[1]=e.versionMinor,n[2]=0,n[3]=0,o[1]=e.maxSectionCount,o[2]=e.sectionCount,o[3]=e.maxSplatCount,o[4]=e.splatCount,s[10]=e.compressionLevel,c[6]=e.sceneCenter.x,c[7]=e.sceneCenter.y,c[8]=e.sceneCenter.z,c[9]=e.minSphericalHarmonicsCoeff||-1.5,c[10]=e.maxSphericalHarmonicsCoeff||xd}static parseSectionHeaders(e,t,n=0,s){const o=e.compressionLevel,c=e.maxSectionCount,u=new Uint16Array(t,n,c*He.SectionHeaderSizeBytes/2),f=new Uint32Array(t,n,c*He.SectionHeaderSizeBytes/4),d=new Float32Array(t,n,c*He.SectionHeaderSizeBytes/4),p=[];let m=0,g=m/2,v=m/4,A=He.HeaderSizeBytes+e.maxSectionCount*He.SectionHeaderSizeBytes,y=0;for(let S=0;S<c;S++){const _=f[v+1],b=f[v+2],E=f[v+3],R=d[v+4],D=R/2,L=u[g+10],w=f[v+6]||He.CompressionLevels[o].ScaleRange,B=f[v+8],C=f[v+9],T=C*4,O=L*E+T,X=u[g+20],{bytesPerSplat:$}=He.calculateComponentStorage(o,X),z=$*_,k=z+O,I={bytesPerSplat:$,splatCountOffset:y,splatCount:s?_:0,maxSplatCount:_,bucketSize:b,bucketCount:E,bucketBlockSize:R,halfBucketBlockSize:D,bucketStorageSizeBytes:L,bucketsStorageSizeBytes:O,splatDataStorageSizeBytes:z,storageSizeBytes:k,compressionScaleRange:w,compressionScaleFactor:D/w,base:A,bucketsBase:A+T,dataBase:A+O,fullBucketCount:B,partiallyFilledBucketCount:C,sphericalHarmonicsDegree:X};p[S]=I,A+=k,m+=He.SectionHeaderSizeBytes,g=m/2,v=m/4,y+=_}return p}static writeSectionHeaderToBuffer(e,t,n,s=0){const o=new Uint16Array(n,s,He.SectionHeaderSizeBytes/2),c=new Uint32Array(n,s,He.SectionHeaderSizeBytes/4),u=new Float32Array(n,s,He.SectionHeaderSizeBytes/4);c[0]=e.splatCount,c[1]=e.maxSplatCount,c[2]=t>=1?e.bucketSize:0,c[3]=t>=1?e.bucketCount:0,u[4]=t>=1?e.bucketBlockSize:0,o[10]=t>=1?He.BucketStorageSizeBytes:0,c[6]=t>=1?e.compressionScaleRange:0,c[7]=e.storageSizeBytes,c[8]=t>=1?e.fullBucketCount:0,c[9]=t>=1?e.partiallyFilledBucketCount:0,o[20]=e.sphericalHarmonicsDegree}static writeSectionHeaderSplatCountToBuffer(e,t,n=0){const s=new Uint32Array(t,n,He.SectionHeaderSizeBytes/4);s[0]=e}constructFromBuffer(e,t){this.bufferData=e,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const n=He.parseHeader(this.bufferData);this.versionMajor=n.versionMajor,this.versionMinor=n.versionMinor,this.maxSectionCount=n.maxSectionCount,this.sectionCount=t?n.maxSectionCount:0,this.maxSplatCount=n.maxSplatCount,this.splatCount=t?n.maxSplatCount:0,this.compressionLevel=n.compressionLevel,this.sceneCenter=new ne().copy(n.sceneCenter),this.minSphericalHarmonicsCoeff=n.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff=n.maxSphericalHarmonicsCoeff,this.sections=He.parseSectionHeaders(n,this.bufferData,He.HeaderSizeBytes,t),this.linkBufferArrays(),this.buildMaps()}static calculateComponentStorage(e,t){const n=He.CompressionLevels[e].BytesPerCenter,s=He.CompressionLevels[e].BytesPerScale,o=He.CompressionLevels[e].BytesPerRotation,c=He.CompressionLevels[e].BytesPerColor,u=$l(t),f=He.CompressionLevels[e].BytesPerSphericalHarmonicsComponent*u,d=n+s+o+c+f;return{bytesPerCenter:n,bytesPerScale:s,bytesPerRotation:o,bytesPerColor:c,sphericalHarmonicsComponentsPerSplat:u,sphericalHarmonicsBytesPerSplat:f,bytesPerSplat:d}}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*He.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const n=this.sections[t];for(let s=0;s<n.maxSplatCount;s++){const o=e+s;this.globalSplatIndexToLocalSplatIndexMap[o]=s,this.globalSplatIndexToSectionMap[o]=t}e+=n.maxSplatCount}}updateLoadedCounts(e,t){He.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const n=He.HeaderSizeBytes+He.SectionHeaderSizeBytes*e;He.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,n),this.sections[e].splatCount=t}static generateFromUncompressedSplatArrays(e,t,n,s,o,c,u=[]){let f=0;for(let D=0;D<e.length;D++){const L=e[D];f=Math.max(L.sphericalHarmonicsDegree,f)}let d,p;for(let D=0;D<e.length;D++){const L=e[D];for(let w=0;w<L.splats.length;w++){const B=L.splats[w];for(let C=lt.OFFSET.FRC0;C<lt.OFFSET.FRC23&&C<B.length;C++)(!d||B[C]<d)&&(d=B[C]),(!p||B[C]>p)&&(p=B[C])}}d=d||-1.5,p=p||xd;const{bytesPerSplat:m}=He.calculateComponentStorage(n,f),g=He.CompressionLevels[n].ScaleRange,v=[],A=[];let y=0;for(let D=0;D<e.length;D++){const L=e[D],w=new lt(f);for(let ue=0;ue<L.splatCount;ue++){const ge=L.splats[ue];(ge[lt.OFFSET.OPACITY]||0)>=t&&w.addSplat(ge)}const B=u[D]||{},C=(B.blockSizeFactor||1)*(o||He.BucketBlockSize),T=Math.ceil((B.bucketSizeFactor||1)*(c||He.BucketSize)),O=He.computeBucketsForUncompressedSplatArray(w,C,T),X=O.fullBuckets.length,$=O.partiallyFullBuckets.map(ue=>ue.splats.length),z=$.length,k=[...O.fullBuckets,...O.partiallyFullBuckets],I=w.splats.length*m,Y=z*4,q=n>=1?k.length*He.BucketStorageSizeBytes+Y:0,J=I+q,F=new ArrayBuffer(J),ee=g/(C*.5),ce=new ne;let ie=0;for(let ue=0;ue<k.length;ue++){const ge=k[ue];ce.fromArray(ge.center);for(let Ae=0;Ae<ge.splats.length;Ae++){let Be=ge.splats[Ae];const Ze=w.splats[Be],Xe=q+ie*m;He.writeSplatDataToSectionBuffer(Ze,F,Xe,n,f,ce,ee,g,d,p),ie++}}if(y+=ie,n>=1){const ue=new Uint32Array(F,0,$.length*4);for(let Ae=0;Ae<$.length;Ae++)ue[Ae]=$[Ae];const ge=new Float32Array(F,Y,k.length*He.BucketStorageSizeFloats);for(let Ae=0;Ae<k.length;Ae++){const Be=k[Ae],Ze=Ae*3;ge[Ze]=Be.center[0],ge[Ze+1]=Be.center[1],ge[Ze+2]=Be.center[2]}}v.push(F);const j=new ArrayBuffer(He.SectionHeaderSizeBytes);He.writeSectionHeaderToBuffer({maxSplatCount:ie,splatCount:ie,bucketSize:T,bucketCount:k.length,bucketBlockSize:C,compressionScaleRange:g,storageSizeBytes:J,fullBucketCount:X,partiallyFilledBucketCount:z,sphericalHarmonicsDegree:f},n,j,0),A.push(j)}let S=0;for(let D of v)S+=D.byteLength;const _=He.HeaderSizeBytes+He.SectionHeaderSizeBytes*v.length+S,b=new ArrayBuffer(_);He.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:v.length,sectionCount:v.length,maxSplatCount:y,splatCount:y,compressionLevel:n,sceneCenter:s,minSphericalHarmonicsCoeff:d,maxSphericalHarmonicsCoeff:p},b);let E=He.HeaderSizeBytes;for(let D of A)new Uint8Array(b,E,He.SectionHeaderSizeBytes).set(new Uint8Array(D)),E+=He.SectionHeaderSizeBytes;for(let D of v)new Uint8Array(b,E,D.byteLength).set(new Uint8Array(D)),E+=D.byteLength;return new He(b)}static computeBucketsForUncompressedSplatArray(e,t,n){let s=e.splatCount;const o=t/2,c=new ne,u=new ne;for(let y=0;y<s;y++){const S=e.splats[y],_=[S[lt.OFFSET.X],S[lt.OFFSET.Y],S[lt.OFFSET.Z]];(y===0||_[0]<c.x)&&(c.x=_[0]),(y===0||_[0]>u.x)&&(u.x=_[0]),(y===0||_[1]<c.y)&&(c.y=_[1]),(y===0||_[1]>u.y)&&(u.y=_[1]),(y===0||_[2]<c.z)&&(c.z=_[2]),(y===0||_[2]>u.z)&&(u.z=_[2])}const f=new ne().copy(u).sub(c),d=Math.ceil(f.y/t),p=Math.ceil(f.z/t),m=new ne,g=[],v={};for(let y=0;y<s;y++){const S=e.splats[y],_=[S[lt.OFFSET.X],S[lt.OFFSET.Y],S[lt.OFFSET.Z]],b=Math.floor((_[0]-c.x)/t),E=Math.floor((_[1]-c.y)/t),R=Math.floor((_[2]-c.z)/t);m.x=b*t+c.x+o,m.y=E*t+c.y+o,m.z=R*t+c.z+o;const D=b*(d*p)+E*p+R;let L=v[D];L||(v[D]=L={splats:[],center:m.toArray()}),L.splats.push(y),L.splats.length>=n&&(g.push(L),v[D]=null)}const A=[];for(let y in v)if(v.hasOwnProperty(y)){const S=v[y];S&&A.push(S)}return{fullBuckets:g,partiallyFullBuckets:A}}static preallocateUncompressed(e,t){const n=He.CompressionLevels[0].SphericalHarmonicsDegrees[t],s=He.HeaderSizeBytes+He.SectionHeaderSizeBytes,o=s+n.BytesPerSplat*e,c=new ArrayBuffer(o);return He.writeHeaderToBuffer({versionMajor:He.CurrentMajorVersion,versionMinor:He.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:e,splatCount:e,compressionLevel:0,sceneCenter:new ne},c),He.writeSectionHeaderToBuffer({maxSplatCount:e,splatCount:e,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:t},0,c,He.HeaderSizeBytes),{splatBuffer:new He(c,!0),splatBufferDataOffsetBytes:s}}};nt(He,"CurrentMajorVersion",0),nt(He,"CurrentMinorVersion",1),nt(He,"CenterComponentCount",3),nt(He,"ScaleComponentCount",3),nt(He,"RotationComponentCount",4),nt(He,"ColorComponentCount",4),nt(He,"CovarianceComponentCount",6),nt(He,"SplatScaleOffsetFloat",3),nt(He,"SplatRotationOffsetFloat",6),nt(He,"CompressionLevels",{0:{BytesPerCenter:12,BytesPerScale:12,BytesPerRotation:16,BytesPerColor:4,ScaleOffsetBytes:12,RotationffsetBytes:24,ColorOffsetBytes:40,SphericalHarmonicsOffsetBytes:44,ScaleRange:1,BytesPerSphericalHarmonicsComponent:4,SphericalHarmonicsOffsetFloat:11,SphericalHarmonicsDegrees:{0:{BytesPerSplat:44},1:{BytesPerSplat:80},2:{BytesPerSplat:140}}},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:2,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:42},2:{BytesPerSplat:72}}},2:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:1,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:33},2:{BytesPerSplat:48}}}}),nt(He,"CovarianceSizeFloats",6),nt(He,"HeaderSizeBytes",4096),nt(He,"SectionHeaderSizeBytes",1024),nt(He,"BucketStorageSizeBytes",12),nt(He,"BucketStorageSizeFloats",3),nt(He,"BucketBlockSize",5),nt(He,"BucketSize",256),nt(He,"computeCovariance",function(){const e=new Bt,t=new Pt,n=new Pt,s=new Pt,o=new Pt,c=new Pt,u=new Pt;return function(f,d,p,m,g=0,v){e.makeScale(f.x,f.y,f.z),t.setFromMatrix4(e),e.makeRotationFromQuaternion(d),n.setFromMatrix4(e),s.copy(n).multiply(t),o.copy(s).transpose().premultiply(s),p&&(c.setFromMatrix4(p),u.copy(c).transpose(),o.multiply(u),o.premultiply(c)),v>=1?(m[g]=Wn(o.elements[0]),m[g+1]=Wn(o.elements[3]),m[g+2]=Wn(o.elements[6]),m[g+3]=Wn(o.elements[4]),m[g+4]=Wn(o.elements[7]),m[g+5]=Wn(o.elements[8])):(m[g]=o.elements[0],m[g+1]=o.elements[3],m[g+2]=o.elements[6],m[g+3]=o.elements[4],m[g+4]=o.elements[7],m[g+5]=o.elements[8])}}()),nt(He,"dot3",(e,t,n,s,o)=>{o[0]=o[1]=o[2]=0;const c=s[0],u=s[1],f=s[2];He.addInto3(e[0]*c,e[1]*c,e[2]*c,o),He.addInto3(t[0]*u,t[1]*u,t[2]*u,o),He.addInto3(n[0]*f,n[1]*f,n[2]*f,o)}),nt(He,"addInto3",(e,t,n,s)=>{s[0]=s[0]+e,s[1]=s[1]+t,s[2]=s[2]+n}),nt(He,"dot5",(e,t,n,s,o,c,u)=>{u[0]=u[1]=u[2]=0;const f=c[0],d=c[1],p=c[2],m=c[3],g=c[4];He.addInto3(e[0]*f,e[1]*f,e[2]*f,u),He.addInto3(t[0]*d,t[1]*d,t[2]*d,u),He.addInto3(n[0]*p,n[1]*p,n[2]*p,u),He.addInto3(s[0]*m,s[1]*m,s[2]*m,u),He.addInto3(o[0]*g,o[1]*g,o[2]*g,u)}),nt(He,"rotateSphericalHarmonics3",(e,t,n,s,o,c,u,f,d)=>{He.dot3(e,t,n,s,u),He.dot3(e,t,n,o,f),He.dot3(e,t,n,c,d)}),nt(He,"rotateSphericalHarmonics5",(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S,_,b)=>{const E=Math.sqrt(.25),R=Math.sqrt(3/4),D=Math.sqrt(1/3),L=Math.sqrt(4/3),w=Math.sqrt(1/12);d[0]=E*(f[2]*c[0]+f[0]*c[2]+(c[2]*f[0]+c[0]*f[2])),d[1]=f[1]*c[0]+c[1]*f[0],d[2]=R*(f[1]*c[1]+c[1]*f[1]),d[3]=f[1]*c[2]+c[1]*f[2],d[4]=E*(f[2]*c[2]-f[0]*c[0]+(c[2]*f[2]-c[0]*f[0])),He.dot5(e,t,n,s,o,d,A),p[0]=E*(u[2]*c[0]+u[0]*c[2]+(c[2]*u[0]+c[0]*u[2])),p[1]=u[1]*c[0]+c[1]*u[0],p[2]=R*(u[1]*c[1]+c[1]*u[1]),p[3]=u[1]*c[2]+c[1]*u[2],p[4]=E*(u[2]*c[2]-u[0]*c[0]+(c[2]*u[2]-c[0]*u[0])),He.dot5(e,t,n,s,o,p,y),m[0]=D*(u[2]*u[0]+u[0]*u[2])+-w*(f[2]*f[0]+f[0]*f[2]+(c[2]*c[0]+c[0]*c[2])),m[1]=L*u[1]*u[0]+-D*(f[1]*f[0]+c[1]*c[0]),m[2]=u[1]*u[1]+-E*(f[1]*f[1]+c[1]*c[1]),m[3]=L*u[1]*u[2]+-D*(f[1]*f[2]+c[1]*c[2]),m[4]=D*(u[2]*u[2]-u[0]*u[0])+-w*(f[2]*f[2]-f[0]*f[0]+(c[2]*c[2]-c[0]*c[0])),He.dot5(e,t,n,s,o,m,S),g[0]=E*(u[2]*f[0]+u[0]*f[2]+(f[2]*u[0]+f[0]*u[2])),g[1]=u[1]*f[0]+f[1]*u[0],g[2]=R*(u[1]*f[1]+f[1]*u[1]),g[3]=u[1]*f[2]+f[1]*u[2],g[4]=E*(u[2]*f[2]-u[0]*f[0]+(f[2]*u[2]-f[0]*u[0])),He.dot5(e,t,n,s,o,g,_),v[0]=E*(f[2]*f[0]+f[0]*f[2]-(c[2]*c[0]+c[0]*c[2])),v[1]=f[1]*f[0]-c[1]*c[0],v[2]=R*(f[1]*f[1]-c[1]*c[1]),v[3]=f[1]*f[2]-c[1]*c[2],v[4]=E*(f[2]*f[2]-f[0]*f[0]-(c[2]*c[2]-c[0]*c[0])),He.dot5(e,t,n,s,o,v,b)}),nt(He,"writeSplatDataToSectionBuffer",function(){const e=new ArrayBuffer(12),t=new ArrayBuffer(12),n=new ArrayBuffer(16),s=new ArrayBuffer(4),o=new ArrayBuffer(256),c=new En,u=new ne,f=new ne,{X:d,Y:p,Z:m,SCALE0:g,SCALE1:v,SCALE2:A,ROTATION0:y,ROTATION1:S,ROTATION2:_,ROTATION3:b,FDC0:E,FDC1:R,FDC2:D,OPACITY:L,FRC0:w,FRC9:B}=lt.OFFSET,C=(T,O,X)=>{const $=X*2+1;return T=Math.round(T*O)+X,Mn(T,0,$)};return function(T,O,X,$,z,k,I,Y,q=-1.5,J=xd){const F=$l(z),ee=He.CompressionLevels[$].BytesPerCenter,ce=He.CompressionLevels[$].BytesPerScale,ie=He.CompressionLevels[$].BytesPerRotation,j=He.CompressionLevels[$].BytesPerColor,ue=X,ge=ue+ee,Ae=ge+ce,Be=Ae+ie,Ze=Be+j;if(T[y]!==void 0?(c.set(T[y],T[S],T[_],T[b]),c.normalize()):c.set(1,0,0,0),T[g]!==void 0?u.set(T[g]||0,T[v]||0,T[A]||0):u.set(0,0,0),$===0){const ft=new Float32Array(O,ue,He.CenterComponentCount),_e=new Float32Array(O,Ae,He.RotationComponentCount),ct=new Float32Array(O,ge,He.ScaleComponentCount);if(_e.set([c.x,c.y,c.z,c.w]),ct.set([u.x,u.y,u.z]),ft.set([T[d],T[p],T[m]]),z>0){const Z=new Float32Array(O,Ze,F);if(z>=1){for(let it=0;it<9;it++)Z[it]=T[w+it]||0;if(z>=2)for(let it=0;it<15;it++)Z[it+9]=T[B+it]||0}}}else{const ft=new Uint16Array(e,0,He.CenterComponentCount),_e=new Uint16Array(n,0,He.RotationComponentCount),ct=new Uint16Array(t,0,He.ScaleComponentCount);if(_e.set([Wn(c.x),Wn(c.y),Wn(c.z),Wn(c.w)]),ct.set([Wn(u.x),Wn(u.y),Wn(u.z)]),f.set(T[d],T[p],T[m]).sub(k),f.x=C(f.x,I,Y),f.y=C(f.y,I,Y),f.z=C(f.z,I,Y),ft.set([f.x,f.y,f.z]),z>0){const Z=$===1?Uint16Array:Uint8Array,it=$===1?2:1,Ke=new Z(o,0,F);if(z>=1){for(let $e=0;$e<9;$e++){const Q=T[w+$e]||0;Ke[$e]=$===1?Wn(Q):Au(Q,q,J)}const at=9*it;if(Cl(Ke.buffer,0,O,Ze,at),z>=2){for(let $e=0;$e<15;$e++){const Q=T[B+$e]||0;Ke[$e+9]=$===1?Wn(Q):Au(Q,q,J)}Cl(Ke.buffer,at,O,Ze+at,15*it)}}}Cl(ft.buffer,0,O,ue,6),Cl(ct.buffer,0,O,ge,6),Cl(_e.buffer,0,O,Ae,8)}const Xe=new Uint8ClampedArray(s,0,4);Xe.set([T[E]||0,T[R]||0,T[D]||0]),Xe[3]=T[L]||0,Cl(Xe.buffer,0,O,Be,4)}}());let mt=He;const ky=new Uint8Array([112,108,121,10]),Wy=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),_g="end_header",vg=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),Ys=(r,e)=>{const t=(1<<e)-1;return(r&t)/t},Xy=(r,e)=>{r.x=Ys(e>>>21,11),r.y=Ys(e>>>11,10),r.z=Ys(e,11)},vP=(r,e)=>{r.x=Ys(e>>>24,8),r.y=Ys(e>>>16,8),r.z=Ys(e>>>8,8),r.w=Ys(e,8)},SP=(r,e)=>{const t=1/(Math.sqrt(2)*.5),n=(Ys(e>>>20,10)-.5)*t,s=(Ys(e>>>10,10)-.5)*t,o=(Ys(e,10)-.5)*t,c=Math.sqrt(1-(n*n+s*s+o*o));switch(e>>>30){case 0:r.set(c,n,s,o);break;case 1:r.set(n,c,s,o);break;case 2:r.set(n,s,c,o);break;case 3:r.set(n,s,o,c);break}},Mr=(r,e,t)=>r*(1-t)+e*t,bn=(r,e)=>{var t;return(t=r.properties.find(n=>n.name===e&&n.storage))==null?void 0:t.storage},un=class un{static decodeHeaderText(e){let t,n,s,o;const c=e.split(`
`).filter(m=>!m.startsWith("comment "));let u=0,f=!1;for(let m=1;m<c.length;++m){const g=c[m].split(" ");switch(g[0]){case"format":if(g[1]!=="binary_little_endian")throw new Error("Unsupported ply format");break;case"element":t={name:g[1],count:parseInt(g[2],10),properties:[],storageSizeBytes:0},t.name==="chunk"?n=t:t.name==="vertex"?s=t:t.name==="sh"&&(o=t);break;case"property":{if(!vg.has(g[1]))throw new Error(`Unrecognized property data type '${g[1]}' in ply header`);const v=vg.get(g[1]),A=v.BYTES_PER_ELEMENT*t.count;t.name==="vertex"&&(u+=v.BYTES_PER_ELEMENT),t.properties.push({type:g[1],name:g[2],storage:null,byteSize:v.BYTES_PER_ELEMENT,storageSizeByes:A}),t.storageSizeBytes+=A;break}case _g:f=!0;break;default:throw new Error(`Unrecognized header value '${g[0]}' in ply header`)}if(f)break}let d=0,p=0;return o&&(p=o.properties.length,o.properties.length>=45?d=3:o.properties.length>=24?d=2:o.properties.length>=9&&(d=1)),{chunkElement:n,vertexElement:s,shElement:o,bytesPerSplat:u,headerSizeBytes:e.indexOf(_g)+_g.length+1,sphericalHarmonicsDegree:d,sphericalHarmonicsPerSplat:p}}static decodeHeader(e){const t=(v,A)=>{const y=v.length-A.length;let S,_;for(S=0;S<=y;++S){for(_=0;_<A.length&&v[S+_]===A[_];++_);if(_===A.length)return S}return-1},n=(v,A)=>{if(v.length<A.length)return!1;for(let y=0;y<A.length;++y)if(v[y]!==A[y])return!1;return!0};let s=new Uint8Array(e),o;if(s.length>=ky.length&&!n(s,ky))throw new Error("Invalid PLY header");if(o=t(s,Wy),o===-1)throw new Error("End of PLY header not found");const c=new TextDecoder("ascii").decode(s.slice(0,o)),{chunkElement:u,vertexElement:f,shElement:d,sphericalHarmonicsDegree:p,sphericalHarmonicsPerSplat:m,bytesPerSplat:g}=un.decodeHeaderText(c);return{headerSizeBytes:o+Wy.length,bytesPerSplat:g,chunkElement:u,vertexElement:f,shElement:d,sphericalHarmonicsDegree:p,sphericalHarmonicsPerSplat:m}}static readElementData(e,t,n,s,o,c=null){let u=t instanceof DataView?t:new DataView(t);s=s||0,o=o||e.count-1;for(let f=s;f<=o;++f)for(let d=0;d<e.properties.length;++d){const p=e.properties[d],m=vg.get(p.type),g=m.BYTES_PER_ELEMENT*e.count;if((!p.storage||p.storage.byteLength<g)&&(!c||c(p.name))&&(p.storage=new m(e.count)),p.storage)switch(p.type){case"char":p.storage[f]=u.getInt8(n);break;case"uchar":p.storage[f]=u.getUint8(n);break;case"short":p.storage[f]=u.getInt16(n,!0);break;case"ushort":p.storage[f]=u.getUint16(n,!0);break;case"int":p.storage[f]=u.getInt32(n,!0);break;case"uint":p.storage[f]=u.getUint32(n,!0);break;case"float":p.storage[f]=u.getFloat32(n,!0);break;case"double":p.storage[f]=u.getFloat64(n,!0);break}n+=p.byteSize}return n}static readPly(e,t=null){const n=un.decodeHeader(e);let s=un.readElementData(n.chunkElement,e,n.headerSizeBytes,null,null,t);return s=un.readElementData(n.vertexElement,e,s,null,null,t),un.readElementData(n.shElement,e,s,null,null,t),{chunkElement:n.chunkElement,vertexElement:n.vertexElement,shElement:n.shElement,sphericalHarmonicsDegree:n.sphericalHarmonicsDegree,sphericalHarmonicsPerSplat:n.sphericalHarmonicsPerSplat}}static getElementStorageArrays(e,t,n){const s={};if(t){const o=bn(e,"min_r"),c=bn(e,"min_g"),u=bn(e,"min_b"),f=bn(e,"max_r"),d=bn(e,"max_g"),p=bn(e,"max_b"),m=bn(e,"min_x"),g=bn(e,"min_y"),v=bn(e,"min_z"),A=bn(e,"max_x"),y=bn(e,"max_y"),S=bn(e,"max_z"),_=bn(e,"min_scale_x"),b=bn(e,"min_scale_y"),E=bn(e,"min_scale_z"),R=bn(e,"max_scale_x"),D=bn(e,"max_scale_y"),L=bn(e,"max_scale_z"),w=bn(t,"packed_position"),B=bn(t,"packed_rotation"),C=bn(t,"packed_scale"),T=bn(t,"packed_color");s.colorExtremes={minR:o,maxR:f,minG:c,maxG:d,minB:u,maxB:p},s.positionExtremes={minX:m,maxX:A,minY:g,maxY:y,minZ:v,maxZ:S},s.scaleExtremes={minScaleX:_,maxScaleX:R,minScaleY:b,maxScaleY:D,minScaleZ:E,maxScaleZ:L},s.position=w,s.rotation=B,s.scale=C,s.color=T}if(n){const o={};for(let c=0;c<45;c++){const u=`f_rest_${c}`,f=bn(n,u);if(f)o[u]=f;else break}s.sh=o}return s}static parseToUncompressedSplatBufferSection(e,t,n,s,o,c,u,f,d=null){un.readElementData(t,c,0,n,s,d);const p=mt.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,{positionExtremes:m,scaleExtremes:g,colorExtremes:v,position:A,rotation:y,scale:S,color:_}=un.getElementStorageArrays(e,t),b=lt.createSplat();for(let E=n;E<=s;++E){un.decompressBaseSplat(E,o,A,m,S,g,y,v,_,b);const R=E*p+f;mt.writeSplatDataToSectionBuffer(b,u,R,0,0)}}static parseToUncompressedSplatArraySection(e,t,n,s,o,c,u,f=null){un.readElementData(t,c,0,n,s,f);const{positionExtremes:d,scaleExtremes:p,colorExtremes:m,position:g,rotation:v,scale:A,color:y}=un.getElementStorageArrays(e,t);for(let S=n;S<=s;++S){const _=lt.createSplat();un.decompressBaseSplat(S,o,g,d,A,p,v,m,y,_),u.addSplat(_)}}static parseSphericalHarmonicsToUncompressedSplatArraySection(e,t,n,s,o,c,u,f,d,p=null){un.readElementData(t,o,c,n,s,p);const{sh:m}=un.getElementStorageArrays(e,void 0,t),g=Object.values(m);for(let v=n;v<=s;++v)un.decompressSphericalHarmonics(v,g,u,f,d.splats[v])}static parseToUncompressedSplatArray(e,t){const{chunkElement:n,vertexElement:s,shElement:o,sphericalHarmonicsDegree:c}=un.readPly(e);t=Math.min(t,c);const u=new lt(t),{positionExtremes:f,scaleExtremes:d,colorExtremes:p,position:m,rotation:g,scale:v,color:A}=un.getElementStorageArrays(n,s);let y;if(t>0){const{sh:S}=un.getElementStorageArrays(n,void 0,o);y=Object.values(S)}for(let S=0;S<s.count;++S){u.addDefaultSplat();const _=u.getSplat(u.splatCount-1);un.decompressBaseSplat(S,0,m,f,v,d,g,p,A,_),t>0&&un.decompressSphericalHarmonics(S,y,t,c,_)}return u}static parseToUncompressedSplatBuffer(e,t){const{chunkElement:n,vertexElement:s,shElement:o,sphericalHarmonicsDegree:c}=un.readPly(e);t=Math.min(t,c);const{splatBuffer:u,splatBufferDataOffsetBytes:f}=mt.preallocateUncompressed(s.count,t),{positionExtremes:d,scaleExtremes:p,colorExtremes:m,position:g,rotation:v,scale:A,color:y}=un.getElementStorageArrays(n,s);let S;if(t>0){const{sh:E}=un.getElementStorageArrays(n,void 0,o);S=Object.values(E)}const _=mt.CompressionLevels[0].SphericalHarmonicsDegrees[t].BytesPerSplat,b=lt.createSplat(t);for(let E=0;E<s.count;++E){un.decompressBaseSplat(E,0,g,d,A,p,v,m,y,b),t>0&&un.decompressSphericalHarmonics(E,S,t,c,b);const R=E*_+f;mt.writeSplatDataToSectionBuffer(b,u.bufferData,R,0,t)}return u}};nt(un,"decompressBaseSplat",function(){const e=new ne,t=new En,n=new ne,s=new ti,o=lt.OFFSET;return function(c,u,f,d,p,m,g,v,A,y){y=y||lt.createSplat();const S=Math.floor((u+c)/256);return Xy(e,f[c]),SP(t,g[c]),Xy(n,p[c]),vP(s,A[c]),y[o.X]=Mr(d.minX[S],d.maxX[S],e.x),y[o.Y]=Mr(d.minY[S],d.maxY[S],e.y),y[o.Z]=Mr(d.minZ[S],d.maxZ[S],e.z),y[o.ROTATION0]=t.x,y[o.ROTATION1]=t.y,y[o.ROTATION2]=t.z,y[o.ROTATION3]=t.w,y[o.SCALE0]=Math.exp(Mr(m.minScaleX[S],m.maxScaleX[S],n.x)),y[o.SCALE1]=Math.exp(Mr(m.minScaleY[S],m.maxScaleY[S],n.y)),y[o.SCALE2]=Math.exp(Mr(m.minScaleZ[S],m.maxScaleZ[S],n.z)),v.minR&&v.maxR?y[o.FDC0]=Mn(Math.round(Mr(v.minR[S],v.maxR[S],s.x)*255),0,255):y[o.FDC0]=Mn(Math.floor(s.x*255),0,255),v.minG&&v.maxG?y[o.FDC1]=Mn(Math.round(Mr(v.minG[S],v.maxG[S],s.y)*255),0,255):y[o.FDC1]=Mn(Math.floor(s.y*255),0,255),v.minB&&v.maxB?y[o.FDC2]=Mn(Math.round(Mr(v.minB[S],v.maxB[S],s.z)*255),0,255):y[o.FDC2]=Mn(Math.floor(s.z*255),0,255),y[o.OPACITY]=Mn(Math.floor(s.w*255),0,255),y}}()),nt(un,"decompressSphericalHarmonics",function(){const e=[0,3,8,15],t=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(n,s,o,c,u){u=u||lt.createSplat();let f=e[o],d=e[c];for(let p=0;p<3;++p)for(let m=0;m<15;++m){const g=t[p*15+m];m<f&&m<d&&(u[lt.OFFSET.FRC0+g]=s[p*d+m][n]*(8/255)-4)}return u}}());let Ur=un;const xi={INRIAV1:0,INRIAV2:1,PlayCanvasCompressed:2},[sT,__,v_,S_,x_,A_,y_]=[0,1,2,3,4,5,6],qy={double:sT,int:__,uint:v_,float:S_,short:x_,ushort:A_,uchar:y_},xP={[sT]:8,[__]:4,[v_]:4,[S_]:4,[x_]:2,[A_]:2,[y_]:1},Di=class Di{static decodeSectionHeader(e,t,n=0){const s=[];let o=!1,c=-1,u=0,f=!1,d=null;const p=[],m=[],g=[],v={};for(let _=n;_<e.length;_++){const b=e[_].trim();if(b.startsWith("element"))if(o){c--;break}else{o=!0,n=_,c=_;const E=b.split(" ");let R=0;for(let D of E){const L=D.trim();L.length>0&&(R++,R===2?d=L:R===3&&(u=parseInt(L)))}}else if(b.startsWith("property")){const E=b.match(/(\w+)\s+(\w+)\s+(\w+)/);if(E){const R=E[2],D=E[3];g.push(D);const L=t[D];v[D]=R;const w=qy[R];L!==void 0&&(p.push(L),m[L]=w)}}if(b===Di.HeaderEndToken){f=!0;break}o&&(s.push(b),c++)}const A=[];let y=0;for(let _ of g){const b=v[_];if(v.hasOwnProperty(_)){const E=t[_];E!==void 0&&(A[E]=y)}y+=xP[qy[b]]}const S=Di.decodeSphericalHarmonicsFromSectionHeader(g,t);return{headerLines:s,headerStartLine:n,headerEndLine:c,fieldTypes:m,fieldIds:p,fieldOffsets:A,bytesPerVertex:y,vertexCount:u,dataSizeBytes:y*u,endOfHeader:f,sectionName:d,sphericalHarmonicsDegree:S.degree,sphericalHarmonicsCoefficientsPerChannel:S.coefficientsPerChannel,sphericalHarmonicsDegree1Fields:S.degree1Fields,sphericalHarmonicsDegree2Fields:S.degree2Fields}}static decodeSphericalHarmonicsFromSectionHeader(e,t){let n=0,s=0;for(let f of e)f.startsWith("f_rest")&&n++;s=n/3;let o=0;s>=3&&(o=1),s>=8&&(o=2);let c=[],u=[];for(let f=0;f<3;f++){if(o>=1)for(let d=0;d<3;d++)c.push(t["f_rest_"+(d+s*f)]);if(o>=2)for(let d=0;d<5;d++)u.push(t["f_rest_"+(d+s*f+3)])}return{degree:o,coefficientsPerChannel:s,degree1Fields:c,degree2Fields:u}}static getHeaderSectionNames(e){const t=[];for(let n of e)if(n.startsWith("element")){const s=n.split(" ");let o=0;for(let c of s){const u=c.trim();u.length>0&&(o++,o===2&&t.push(u))}}return t}static checkTextForEndHeader(e){return!!e.includes(Di.HeaderEndToken)}static checkBufferForEndHeader(e,t,n,s){const o=new Uint8Array(e,Math.max(0,t-n),n),c=s.decode(o);return Di.checkTextForEndHeader(c)}static extractHeaderFromBufferToText(e){const t=new TextDecoder;let n=0,s="";const o=100;for(;;){if(n+o>=e.byteLength)throw new Error("End of file reached while searching for end of header");const c=new Uint8Array(e,n,o);if(s+=t.decode(c),n+=o,Di.checkBufferForEndHeader(e,n,o*2,t))break}return s}static readHeaderFromBuffer(e){const t=new TextDecoder;let n=0,s="";const o=100;for(;;){if(n+o>=e.byteLength)throw new Error("End of file reached while searching for end of header");const c=new Uint8Array(e,n,o);if(s+=t.decode(c),n+=o,Di.checkBufferForEndHeader(e,n,o*2,t))break}return s}static convertHeaderTextToLines(e){const t=e.split(`
`),n=[];for(let s=0;s<t.length;s++){const o=t[s].trim();if(n.push(o),o===Di.HeaderEndToken)break}return n}static determineHeaderFormatFromHeaderText(e){const t=Di.convertHeaderTextToLines(e);let n=xi.INRIAV1;for(let s=0;s<t.length;s++){const o=t[s].trim();if(o.startsWith("element chunk")||o.match(/[A-Za-z]*packed_[A-Za-z]*/))n=xi.PlayCanvasCompressed;else if(o.startsWith("element codebook_centers"))n=xi.INRIAV2;else if(o===Di.HeaderEndToken)break}return n}static determineHeaderFormatFromPlyBuffer(e){const t=Di.extractHeaderFromBufferToText(e);return Di.determineHeaderFormatFromHeaderText(t)}static readVertex(e,t,n,s,o,c,u=!0){const f=n*t.bytesPerVertex+s,d=t.fieldOffsets,p=t.fieldTypes;for(let m of o){const g=p[m];g===S_?c[m]=e.getFloat32(f+d[m],!0):g===x_?c[m]=e.getInt16(f+d[m],!0):g===A_?c[m]=e.getUint16(f+d[m],!0):g===__?c[m]=e.getInt32(f+d[m],!0):g===v_?c[m]=e.getUint32(f+d[m],!0):g===y_&&(u?c[m]=e.getUint8(f+d[m])/255:c[m]=e.getUint8(f+d[m]))}}};nt(Di,"HeaderEndToken","end_header");let Ln=Di;const rT=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0"],AP=rT.map((r,e)=>e),[Yy,yP,MP,EP,TP,bP,CP,RP,wP,DP,$y,LP,PP,Qy,Ky,UP,IP,BP]=AP,us=class us{static decodeHeaderLines(e){let t=0;e.forEach(p=>{p.includes("f_rest_")&&t++});let n=0;t>=45?n=45:t>=24?n=24:t>=9&&(n=9);let o=Array.from(Array(Math.max(n-1,0))).map((p,m)=>`f_rest_${m+1}`);const c=[...rT,...o],u=c.map((p,m)=>m),f=u.reduce((p,m)=>(p[c[m]]=m,p),{}),d=Ln.decodeSectionHeader(e,f,0);return d.splatCount=d.vertexCount,d.bytesPerSplat=d.bytesPerVertex,d.fieldsToReadIndexes=u,d}static decodeHeaderText(e){const t=Ln.convertHeaderTextToLines(e),n=us.decodeHeaderLines(t);return n.headerText=e,n.headerSizeBytes=e.indexOf(Ln.HeaderEndToken)+Ln.HeaderEndToken.length+1,n}static decodeHeaderFromBuffer(e){const t=Ln.readHeaderFromBuffer(e);return us.decodeHeaderText(t)}static findSplatData(e,t){return new DataView(e,t.headerSizeBytes)}static parseToUncompressedSplatBufferSection(e,t,n,s,o,c,u,f=0){f=Math.min(f,e.sphericalHarmonicsDegree);const d=mt.CompressionLevels[0].SphericalHarmonicsDegrees[f].BytesPerSplat;for(let p=t;p<=n;p++){const m=us.parseToUncompressedSplat(s,p,e,o,f),g=p*d+u;mt.writeSplatDataToSectionBuffer(m,c,g,0,f)}}static parseToUncompressedSplatArraySection(e,t,n,s,o,c,u=0){u=Math.min(u,e.sphericalHarmonicsDegree);for(let f=t;f<=n;f++){const d=us.parseToUncompressedSplat(s,f,e,o,u);c.addSplat(d)}}static decodeSectionSplatData(e,t,n,s,o=!0){if(s=Math.min(s,n.sphericalHarmonicsDegree),o){const c=new lt(s);for(let u=0;u<t;u++){const f=us.parseToUncompressedSplat(e,u,n,0,s);c.addSplat(f)}return c}else{const{splatBuffer:c,splatBufferDataOffsetBytes:u}=mt.preallocateUncompressed(t,s);return us.parseToUncompressedSplatBufferSection(n,0,t-1,e,0,c.bufferData,u,s),c}}static readSplat(e,t,n,s,o){return Ln.readVertex(e,t,n,s,t.fieldsToReadIndexes,o,!0)}static parseToUncompressedSplatArray(e,t=0){const{header:n,splatCount:s,splatData:o}=jy(e);return us.decodeSectionSplatData(o,s,n,t,!0)}static parseToUncompressedSplatBuffer(e,t=0){const{header:n,splatCount:s,splatData:o}=jy(e);return us.decodeSectionSplatData(o,s,n,t,!1)}};nt(us,"parseToUncompressedSplat",function(){let e=[];const t=new En,n=lt.OFFSET.X,s=lt.OFFSET.Y,o=lt.OFFSET.Z,c=lt.OFFSET.SCALE0,u=lt.OFFSET.SCALE1,f=lt.OFFSET.SCALE2,d=lt.OFFSET.ROTATION0,p=lt.OFFSET.ROTATION1,m=lt.OFFSET.ROTATION2,g=lt.OFFSET.ROTATION3,v=lt.OFFSET.FDC0,A=lt.OFFSET.FDC1,y=lt.OFFSET.FDC2,S=lt.OFFSET.OPACITY,_=[];for(let b=0;b<45;b++)_[b]=lt.OFFSET.FRC0+b;return function(b,E,R,D=0,L=0){L=Math.min(L,R.sphericalHarmonicsDegree),us.readSplat(b,R,E,D,e);const w=lt.createSplat(L);if(e[Yy]!==void 0?(w[c]=Math.exp(e[Yy]),w[u]=Math.exp(e[yP]),w[f]=Math.exp(e[MP])):(w[c]=.01,w[u]=.01,w[f]=.01),e[$y]!==void 0){const B=.28209479177387814;w[v]=(.5+B*e[$y])*255,w[A]=(.5+B*e[LP])*255,w[y]=(.5+B*e[PP])*255}else e[Ky]!==void 0?(w[v]=e[Ky]*255,w[A]=e[UP]*255,w[y]=e[IP]*255):(w[v]=0,w[A]=0,w[y]=0);if(e[Qy]!==void 0&&(w[S]=1/(1+Math.exp(-e[Qy]))*255),w[v]=Mn(Math.floor(w[v]),0,255),w[A]=Mn(Math.floor(w[A]),0,255),w[y]=Mn(Math.floor(w[y]),0,255),w[S]=Mn(Math.floor(w[S]),0,255),L>=1&&e[BP]!==void 0){for(let B=0;B<9;B++)w[_[B]]=e[R.sphericalHarmonicsDegree1Fields[B]];if(L>=2)for(let B=0;B<15;B++)w[_[9+B]]=e[R.sphericalHarmonicsDegree2Fields[B]]}return t.set(e[EP],e[TP],e[bP],e[CP]),t.normalize(),w[d]=t.x,w[p]=t.y,w[m]=t.z,w[g]=t.w,w[n]=e[RP],w[s]=e[wP],w[o]=e[DP],w}}());let zr=us;function jy(r){const e=zr.decodeHeaderFromBuffer(r),t=e.splatCount,n=zr.findSplatData(r,e);return{header:e,splatCount:t,splatData:n}}const aT=["features_dc","features_rest_0","features_rest_1","features_rest_2","features_rest_3","features_rest_4","features_rest_5","features_rest_6","features_rest_7","features_rest_8","features_rest_9","features_rest_10","features_rest_11","features_rest_12","features_rest_13","features_rest_14","opacity","scaling","rotation_re","rotation_im"],Ad=aT.map((r,e)=>e),[yd,FP,NP,Zy,Md,OP,Sg]=[0,1,4,16,17,18,19],oT=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0","f_rest_1","f_rest_2","f_rest_3","f_rest_4","f_rest_5","f_rest_6","f_rest_7","f_rest_8","f_rest_9","f_rest_10","f_rest_11","f_rest_12","f_rest_13","f_rest_14","f_rest_15","f_rest_16","f_rest_17","f_rest_18","f_rest_19","f_rest_20","f_rest_21","f_rest_22","f_rest_23","f_rest_24","f_rest_25","f_rest_26","f_rest_27","f_rest_28","f_rest_29","f_rest_30","f_rest_31","f_rest_32","f_rest_33","f_rest_34","f_rest_35","f_rest_36","f_rest_37","f_rest_38","f_rest_39","f_rest_40","f_rest_41","f_rest_42","f_rest_43","f_rest_44","f_rest_45"],f0=oT.map((r,e)=>e),[Jy,zP,HP,GP,VP,kP,WP,XP,qP,YP,d0,lT,cT,eM]=f0,tM=d0,$P=lT,QP=cT,Ed=r=>{const e=(31744&r)>>10,t=1023&r;return(r>>15?-1:1)*(e?e===31?t?NaN:1/0:Math.pow(2,e-15)*(1+t/1024):t/1024*6103515625e-14)},Li=class Li{static decodeSectionHeadersFromHeaderLines(e){const t=f0.reduce((p,m)=>(p[oT[m]]=m,p),{}),n=Ad.reduce((p,m)=>(p[aT[m]]=m,p),{}),s=Ln.getHeaderSectionNames(e);let o;for(let p=0;p<s.length;p++)s[p]==="codebook_centers"&&(o=p);let c=0,u=!1;const f=[];let d=0;for(;!u;){let p;d===o?p=Ln.decodeSectionHeader(e,n,c):p=Ln.decodeSectionHeader(e,t,c),u=p.endOfHeader,c=p.headerEndLine+1,u||(p.splatCount=p.vertexCount,p.bytesPerSplat=p.bytesPerVertex),f.push(p),d++}return f}static decodeSectionHeadersFromHeaderText(e){const t=Ln.convertHeaderTextToLines(e);return Li.decodeSectionHeadersFromHeaderLines(t)}static getSplatCountFromSectionHeaders(e){let t=0;for(let n of e)n.sectionName!=="codebook_centers"&&(t+=n.vertexCount);return t}static decodeHeaderFromHeaderText(e){const t=e.indexOf(Ln.HeaderEndToken)+Ln.HeaderEndToken.length+1,n=Li.decodeSectionHeadersFromHeaderText(e),s=Li.getSplatCountFromSectionHeaders(n);return{headerSizeBytes:t,sectionHeaders:n,splatCount:s}}static decodeHeaderFromBuffer(e){const t=Ln.readHeaderFromBuffer(e);return Li.decodeHeaderFromHeaderText(t)}static findVertexData(e,t,n){let s=t.headerSizeBytes;for(let o=0;o<n&&o<t.sectionHeaders.length;o++){const c=t.sectionHeaders[o];s+=c.dataSizeBytes}return new DataView(e,s,t.sectionHeaders[n].dataSizeBytes)}static decodeCodeBook(e,t){const n=[],s=[];for(let o=0;o<t.vertexCount;o++){Ln.readVertex(e,t,o,0,Ad,n);for(let c of Ad){const u=Ad[c];let f=s[u];f||(s[u]=f=[]),f.push(n[c])}}for(let o=0;o<s.length;o++){const c=s[o],u=.28209479177387814;for(let f=0;f<c.length;f++){const d=Ed(c[f]);o===Zy?c[f]=Math.round(1/(1+Math.exp(-d))*255):o===yd?c[f]=Math.round((.5+u*d)*255):o===Md?c[f]=Math.exp(d):c[f]=d}}return s}static decodeSectionSplatData(e,t,n,s,o){o=Math.min(o,n.sphericalHarmonicsDegree);const c=new lt(o);for(let u=0;u<t;u++){const f=Li.parseToUncompressedSplat(e,u,n,s,0,o);c.addSplat(f)}return c}static readSplat(e,t,n,s,o){return Ln.readVertex(e,t,n,s,f0,o,!1)}static parseToUncompressedSplatArray(e,t=0){const n=[],s=Li.decodeHeaderFromBuffer(e,t);let o;for(let u=0;u<s.sectionHeaders.length;u++){const f=s.sectionHeaders[u];if(f.sectionName==="codebook_centers"){const d=Li.findVertexData(e,s,u);o=Li.decodeCodeBook(d,f)}}for(let u=0;u<s.sectionHeaders.length;u++){const f=s.sectionHeaders[u];if(f.sectionName!=="codebook_centers"){const d=f.vertexCount,p=Li.findVertexData(e,s,u),m=Li.decodeSectionSplatData(p,d,f,o,t);n.push(m)}}const c=new lt(t);for(let u of n)for(let f of u.splats)c.addSplat(f);return c}};nt(Li,"parseToUncompressedSplat",function(){let e=[];const t=new En,n=lt.OFFSET.X,s=lt.OFFSET.Y,o=lt.OFFSET.Z,c=lt.OFFSET.SCALE0,u=lt.OFFSET.SCALE1,f=lt.OFFSET.SCALE2,d=lt.OFFSET.ROTATION0,p=lt.OFFSET.ROTATION1,m=lt.OFFSET.ROTATION2,g=lt.OFFSET.ROTATION3,v=lt.OFFSET.FDC0,A=lt.OFFSET.FDC1,y=lt.OFFSET.FDC2,S=lt.OFFSET.OPACITY,_=[];for(let b=0;b<45;b++)_[b]=lt.OFFSET.FRC0+b;return function(b,E,R,D,L=0,w=0){w=Math.min(w,R.sphericalHarmonicsDegree),Li.readSplat(b,R,E,L,e);const B=lt.createSplat(w);if(e[Jy]!==void 0?(B[c]=D[Md][e[Jy]],B[u]=D[Md][e[zP]],B[f]=D[Md][e[HP]]):(B[c]=.01,B[u]=.01,B[f]=.01),e[d0]!==void 0?(B[v]=D[yd][e[d0]],B[A]=D[yd][e[lT]],B[y]=D[yd][e[cT]]):e[tM]!==void 0?(B[v]=e[tM]*255,B[A]=e[$P]*255,B[y]=e[QP]*255):(B[v]=0,B[A]=0,B[y]=0),e[eM]!==void 0&&(B[S]=D[Zy][e[eM]]),B[v]=Mn(Math.floor(B[v]),0,255),B[A]=Mn(Math.floor(B[A]),0,255),B[y]=Mn(Math.floor(B[y]),0,255),B[S]=Mn(Math.floor(B[S]),0,255),w>=1&&R.sphericalHarmonicsDegree>=1){for(let $=0;$<9;$++){const z=D[FP+$%3];B[_[$]]=z[e[R.sphericalHarmonicsDegree1Fields[$]]]}if(w>=2&&R.sphericalHarmonicsDegree>=2)for(let $=0;$<15;$++){const z=D[NP+$%5];B[_[9+$]]=z[e[R.sphericalHarmonicsDegree2Fields[$]]]}}const C=D[OP][e[GP]],T=D[Sg][e[VP]],O=D[Sg][e[kP]],X=D[Sg][e[WP]];return t.set(C,T,O,X),t.normalize(),B[d]=t.x,B[p]=t.y,B[m]=t.z,B[g]=t.w,B[n]=Ed(e[XP]),B[s]=Ed(e[qP]),B[o]=Ed(e[YP]),B}}());let h0=Li;class nM{static parseToUncompressedSplatArray(e,t=0){const n=Ln.determineHeaderFormatFromPlyBuffer(e);if(n===xi.PlayCanvasCompressed)return Ur.parseToUncompressedSplatArray(e,t);if(n===xi.INRIAV1)return zr.parseToUncompressedSplatArray(e,t);if(n===xi.INRIAV2)return h0.parseToUncompressedSplatArray(e,t)}static parseToUncompressedSplatBuffer(e,t=0){const n=Ln.determineHeaderFormatFromPlyBuffer(e);if(n===xi.PlayCanvasCompressed)return Ur.parseToUncompressedSplatBuffer(e,t);if(n===xi.INRIAV1)return zr.parseToUncompressedSplatBuffer(e,t);if(n===xi.INRIAV2)throw new Error("parseToUncompressedSplatBuffer() is not implemented for INRIA V2 PLY files")}}class M_{constructor(e,t,n,s){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=n,this.partitionGenerator=s}partitionUncompressedSplatArray(e){let t,n,s;if(this.partitionGenerator){const c=this.partitionGenerator(e);t=c.groupingParameters,n=c.sectionCount,s=c.sectionFilters}else t=this.groupingParameters,n=this.sectionCount,s=this.sectionFilters;const o=[];for(let c=0;c<n;c++){const u=new lt(e.sphericalHarmonicsDegree),f=s[c];for(let d=0;d<e.splatCount;d++)f(d)&&u.addSplat(e.splats[d]);o.push(u)}return{splatArrays:o,parameters:t}}static getStandardPartitioner(e=0,t=new ne,n=mt.BucketBlockSize,s=mt.BucketSize){const o=c=>{const u=lt.OFFSET.X,f=lt.OFFSET.Y,d=lt.OFFSET.Z;e<=0&&(e=c.splatCount);const p=new ne,m=.5,g=_=>{_.x=Math.floor(_.x/m)*m,_.y=Math.floor(_.y/m)*m,_.z=Math.floor(_.z/m)*m};c.splats.forEach(_=>{p.set(_[u],_[f],_[d]).sub(t),g(p),_.centerDist=p.lengthSq()}),c.splats.sort((_,b)=>{let E=_.centerDist,R=b.centerDist;return E>R?1:-1});const v=[],A=[];e=Math.min(c.splatCount,e);const y=Math.ceil(c.splatCount/e);let S=0;for(let _=0;_<y;_++){let b=S;v.push(E=>E>=b&&E<b+e),A.push({blocksSize:n,bucketSize:s}),S+=e}return{sectionCount:v.length,sectionFilters:v,groupingParameters:A}};return new M_(void 0,void 0,void 0,o)}}class Ou{constructor(e,t,n,s,o,c,u){this.splatPartitioner=e,this.alphaRemovalThreshold=t,this.compressionLevel=n,this.sectionSize=s,this.sceneCenter=o?new ne().copy(o):void 0,this.blockSize=c,this.bucketSize=u}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return mt.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(e=1,t=1,n=0,s=new ne,o=mt.BucketBlockSize,c=mt.BucketSize){const u=M_.getStandardPartitioner(n,s,o,c);return new Ou(u,e,t,n,s,o,c)}}const Pn={Downloading:0,Processing:1,Done:2};class ph extends Error{constructor(e){super(e)}}const Sn={ProgressiveToSplatBuffer:0,ProgressiveToSplatArray:1,DownloadBeforeProcessing:2};function iM(r,e){let t=0;for(let s of r)t+=s.sizeBytes;(!e||e.byteLength<t)&&(e=new ArrayBuffer(t));let n=0;for(let s of r)new Uint8Array(e,n,s.sizeBytes).set(s.data),n+=s.sizeBytes;return e}function sM(r,e,t,n,s,o,c,u){return e?Ou.getStandardGenerator(t,n,s,o,c,u).generateFromUncompressedSplatArray(r):mt.generateFromUncompressedSplatArrays([r],t,0,new ne)}class E_{static loadFromURL(e,t,n,s,o,c,u=!0,f=0,d,p,m,g,v){let A;!n&&!u?A=Sn.DownloadBeforeProcessing:u?A=Sn.ProgressiveToSplatArray:A=Sn.ProgressiveToSplatBuffer;const y=Xt.ProgressiveLoadSectionSize,S=mt.HeaderSizeBytes+mt.SectionHeaderSizeBytes,_=1;let b,E,R,D,L,w=0,B=0,C=0,T=!1,O=!1,X=!1;const $=h_();let z=0,k=0,I=0,Y=0,q="",J=null,F=[],ee;const ce=new TextDecoder,ie=(j,ue,ge)=>{const Ae=j>=100;if(ge&&(F.push({data:ge,sizeBytes:ge.byteLength,startBytes:I,endBytes:I+ge.byteLength}),I+=ge.byteLength),A===Sn.DownloadBeforeProcessing)Ae&&$.resolve(F);else{if(T){if(b===xi.PlayCanvasCompressed&&!O){const Be=J.headerSizeBytes+J.chunkElement.storageSizeBytes;L=iM(F,L),L.byteLength>=Be&&(Ur.readElementData(J.chunkElement,L,J.headerSizeBytes),z=Be,k=Be,O=!0)}}else if(q+=ce.decode(ge),Ln.checkTextForEndHeader(q)){if(b=Ln.determineHeaderFormatFromHeaderText(q),b===xi.INRIAV1)J=zr.decodeHeaderText(q),f=Math.min(f,J.sphericalHarmonicsDegree),w=J.splatCount,O=!0,Y=J.headerSizeBytes+J.bytesPerSplat*w;else if(b===xi.PlayCanvasCompressed){if(J=Ur.decodeHeaderText(q),f=Math.min(f,J.sphericalHarmonicsDegree),A===Sn.ProgressiveToSplatBuffer&&f>0)throw new ph("PlyLoader.loadFromURL() -> Selected PLY format has spherical harmonics data that cannot be progressively loaded.");w=J.vertexElement.count,Y=J.headerSizeBytes+J.bytesPerSplat*w+J.chunkElement.storageSizeBytes}else{if(A===Sn.ProgressiveToSplatBuffer)throw new ph("PlyLoader.loadFromURL() -> Selected PLY format cannot be progressively loaded.");A=Sn.DownloadBeforeProcessing;return}if(A===Sn.ProgressiveToSplatBuffer){const Be=mt.CompressionLevels[0].SphericalHarmonicsDegrees[f],Ze=S+Be.BytesPerSplat*w;R=new ArrayBuffer(Ze),mt.writeHeaderToBuffer({versionMajor:mt.CurrentMajorVersion,versionMinor:mt.CurrentMinorVersion,maxSectionCount:_,sectionCount:_,maxSplatCount:w,splatCount:0,compressionLevel:0,sceneCenter:new ne},R)}else ee=new lt(f);z=J.headerSizeBytes,k=J.headerSizeBytes,T=!0}if(T&&O&&F.length>0&&(E=iM(F,E),I-z>y||I>=Y&&!X||Ae)){const Ze=X?J.sphericalHarmonicsPerSplat:J.bytesPerSplat,ft=(X?I:Math.min(Y,I))-k,_e=Math.floor(ft/Ze),ct=_e*Ze,Z=I-k-ct,it=k-F[0].startBytes,Ke=new DataView(E,it,ct);if(X)b===xi.PlayCanvasCompressed&&A===Sn.ProgressiveToSplatArray&&(Ur.parseSphericalHarmonicsToUncompressedSplatArraySection(J.chunkElement,J.shElement,C,C+_e-1,Ke,0,f,J.sphericalHarmonicsDegree,ee),C+=_e);else{if(A===Sn.ProgressiveToSplatBuffer){const at=mt.CompressionLevels[0].SphericalHarmonicsDegrees[f],$e=B*at.BytesPerSplat+S;b===xi.PlayCanvasCompressed?Ur.parseToUncompressedSplatBufferSection(J.chunkElement,J.vertexElement,0,_e-1,B,Ke,R,$e):zr.parseToUncompressedSplatBufferSection(J,0,_e-1,Ke,0,R,$e,f)}else b===xi.PlayCanvasCompressed?Ur.parseToUncompressedSplatArraySection(J.chunkElement,J.vertexElement,0,_e-1,B,Ke,ee):zr.parseToUncompressedSplatArraySection(J,0,_e-1,Ke,0,ee,f);B+=_e,A===Sn.ProgressiveToSplatBuffer&&(D||(mt.writeSectionHeaderToBuffer({maxSplatCount:w,splatCount:B,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:f},0,R,mt.HeaderSizeBytes),D=new mt(R,!1)),D.updateLoadedCounts(1,B)),I>=Y&&(X=!0)}if(Z===0)F=[];else{let at=[],$e=0;for(let Q=F.length-1;Q>=0;Q--){const G=F[Q];if($e+=G.sizeBytes,at.unshift(G),$e>=Z)break}F=at}z+=y,k+=ct}s&&D&&s(D,Ae),Ae&&(A===Sn.ProgressiveToSplatBuffer?$.resolve(D):$.resolve(ee))}t&&t(j,ue,Pn.Downloading)};return t&&t(0,"0%",Pn.Downloading),Ch(e,ie,!1,d).then(()=>(t&&t(0,"0%",Pn.Processing),$.promise.then(j=>{if(t&&t(100,"100%",Pn.Done),A===Sn.DownloadBeforeProcessing){const ue=F.map(ge=>ge.data);return new Blob(ue).arrayBuffer().then(ge=>E_.loadFromFileData(ge,o,c,u,f,p,m,g,v))}else return A===Sn.ProgressiveToSplatBuffer?j:Ki(()=>sM(j,u,o,c,p,m,g,v))})))}static loadFromFileData(e,t,n,s,o=0,c,u,f,d){return s?Ki(()=>nM.parseToUncompressedSplatArray(e,o)).then(p=>sM(p,s,t,n,c,u,f,d)):Ki(()=>nM.parseToUncompressedSplatBuffer(e,o))}}const KP=r=>new ReadableStream({async start(e){e.enqueue(r),e.close()}});async function jP(r){try{const e=KP(r);if(!e)throw new Error("Failed to create stream from data");return await ZP(e)}catch(e){throw console.error("Error decompressing gzipped data:",e),e}}async function ZP(r){const e=r.pipeThrough(new DecompressionStream("gzip")),n=await new Response(e).arrayBuffer();return new Uint8Array(n)}const JP=1347635022,eU=1,tU=.15;function nU(r){const e=r>>15&1,t=r>>10&31,n=r&1023,s=e===1?-1:1;return t===0?s*Math.pow(2,-14)*n/1024:t===31?n!==0?NaN:s*(1/0):s*Math.pow(2,t-15)*(1+n/1024)}function iU(r){return(r-128)/128}function xo(r){switch(r){case 0:return 0;case 1:return 3;case 2:return 8;case 3:return 15;default:return console.error(`[SPZ: ERROR] Unsupported SH degree: ${r}`),0}}const sU=function(){let r=[];const e=new En,t=lt.OFFSET.X,n=lt.OFFSET.Y,s=lt.OFFSET.Z,o=lt.OFFSET.SCALE0,c=lt.OFFSET.SCALE1,u=lt.OFFSET.SCALE2,f=lt.OFFSET.ROTATION0,d=lt.OFFSET.ROTATION1,p=lt.OFFSET.ROTATION2,m=lt.OFFSET.ROTATION3,g=lt.OFFSET.FDC0,v=lt.OFFSET.FDC1,A=lt.OFFSET.FDC2,y=lt.OFFSET.OPACITY,S=[xo(0),xo(1),xo(2),xo(3)],_=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(b,E,R){R=Math.min(E,R);const D=lt.createSplat(R);b.scale[0]!==void 0?(D[o]=b.scale[0],D[c]=b.scale[1],D[u]=b.scale[2]):(D[o]=.01,D[c]=.01,D[u]=.01),b.color[0]!==void 0?(D[g]=b.color[0],D[v]=b.color[1],D[A]=b.color[2]):r[RED]!==void 0?(D[g]=r[RED]*255,D[v]=r[GREEN]*255,D[A]=r[BLUE]*255):(D[g]=0,D[v]=0,D[A]=0),b.alpha!==void 0&&(D[y]=b.alpha),D[g]=Mn(Math.floor(D[g]),0,255),D[v]=Mn(Math.floor(D[v]),0,255),D[A]=Mn(Math.floor(D[A]),0,255),D[y]=Mn(Math.floor(D[y]),0,255);let L=S[R],w=S[E];for(let B=0;B<3;++B)for(let C=0;C<15;++C){const T=_[B*15+C];C<L&&C<w&&(D[lt.OFFSET.FRC0+T]=b.sh[B*w+C])}return e.set(b.rotation[3],b.rotation[0],b.rotation[1],b.rotation[2]),e.normalize(),D[f]=e.x,D[d]=e.y,D[p]=e.z,D[m]=e.w,D[t]=b.position[0],D[n]=b.position[1],D[s]=b.position[2],D}}();function rU(r,e,t,n){return!(r.positions.length!==e*3*(n?2:3)||r.scales.length!==e*3||r.rotations.length!==e*3||r.alphas.length!==e||r.colors.length!==e*3||r.sh.length!==e*t*3)}function rM(r,e,t,n,s){e=Math.min(e,r.shDegree);const o=r.numPoints,c=xo(r.shDegree),u=r.positions.length===o*3*2;if(!rU(r,o,c,u))return null;const f={position:[],scale:[],rotation:[],alpha:void 0,color:[],sh:[]};let d;u&&(d=new Uint16Array(r.positions.buffer,r.positions.byteOffset,o*3));const p=1/(1<<r.fractionalBits),m=xo(r.shDegree),g=.28209479177387814;for(let v=0;v<o;v++){if(u)for(let b=0;b<3;b++)f.position[b]=nU(d[v*3+b]);else for(let b=0;b<3;b++){const E=v*9+b*3;let R=r.positions[E];R|=r.positions[E+1]<<8,R|=r.positions[E+2]<<16,R|=R&8388608?4278190080:0,f.position[b]=R*p}for(let b=0;b<3;b++)f.scale[b]=Math.exp(r.scales[v*3+b]/16-10);const A=r.rotations.subarray(v*3,v*3+3),y=[A[0]/127.5-1,A[1]/127.5-1,A[2]/127.5-1];f.rotation[0]=y[0],f.rotation[1]=y[1],f.rotation[2]=y[2];const S=y[0]*y[0]+y[1]*y[1]+y[2]*y[2];f.rotation[3]=Math.sqrt(Math.max(0,1-S)),f.alpha=Math.floor(r.alphas[v]);for(let b=0;b<3;b++)f.color[b]=Math.floor(((r.colors[v*3+b]/255-.5)/tU*g+.5)*255);for(let b=0;b<3;b++)for(let E=0;E<m;E++)f.sh[b*m+E]=iU(r.sh[m*3*v+E*3+b]);const _=sU(f,r.shDegree,e);if(t){const b=mt.CompressionLevels[0].SphericalHarmonicsDegrees[e].BytesPerSplat,E=v*b+s;mt.writeSplatDataToSectionBuffer(_,n,E,0,e)}else n.addSplat(_)}}const aU=16,oU=1e7;function lU(r){const e=new DataView(r);let t=0;const n={magic:e.getUint32(t,!0),version:e.getUint32(t+4,!0),numPoints:e.getUint32(t+8,!0),shDegree:e.getUint8(t+12),fractionalBits:e.getUint8(t+13),flags:e.getUint8(t+14),reserved:e.getUint8(t+15)};if(t+=aU,n.magic!==JP)return console.error("[SPZ ERROR] deserializePackedGaussians: header not found"),null;if(n.version<1||n.version>2)return console.error(`[SPZ ERROR] deserializePackedGaussians: version not supported: ${n.version}`),null;if(n.numPoints>oU)return console.error(`[SPZ ERROR] deserializePackedGaussians: Too many points: ${n.numPoints}`),null;if(n.shDegree>3)return console.error(`[SPZ ERROR] deserializePackedGaussians: Unsupported SH degree: ${n.shDegree}`),null;const s=n.numPoints,o=xo(n.shDegree),c=n.version===1,u={numPoints:s,shDegree:n.shDegree,fractionalBits:n.fractionalBits,antialiased:(n.flags&eU)!==0,positions:new Uint8Array(s*3*(c?2:3)),scales:new Uint8Array(s*3),rotations:new Uint8Array(s*3),alphas:new Uint8Array(s),colors:new Uint8Array(s*3),sh:new Uint8Array(s*o*3)};try{const f=new Uint8Array(r);let d=u.positions.length,p=t;if(u.positions.set(f.slice(p,p+d)),p+=d,u.alphas.set(f.slice(p,p+u.alphas.length)),p+=u.alphas.length,u.colors.set(f.slice(p,p+u.colors.length)),p+=u.colors.length,u.scales.set(f.slice(p,p+u.scales.length)),p+=u.scales.length,u.rotations.set(f.slice(p,p+u.rotations.length)),p+=u.rotations.length,u.sh.set(f.slice(p,p+u.sh.length)),p+u.sh.length!==r.byteLength)return console.error("[SPZ ERROR] deserializePackedGaussians: incorrect buffer size"),null}catch(f){return console.error("[SPZ ERROR] deserializePackedGaussians: read error",f),null}return u}async function cU(r){try{const e=await jP(r);return lU(e.buffer)}catch(e){return console.error("[SPZ ERROR] loadSpzPacked: decompression error",e),null}}class T_{static loadFromURL(e,t,n,s,o=!0,c=0,u,f,d,p,m){return t&&t(0,"0%",Pn.Downloading),Ch(e,t,!0,u).then(g=>(t&&t(0,"0%",Pn.Processing),T_.loadFromFileData(g,n,s,o,c,f,d,p,m)))}static async loadFromFileData(e,t,n,s,o=0,c,u,f,d){await Ki();const p=await cU(e);o=Math.min(p.shDegree,o);const m=new lt(o);if(s)return rM(p,o,!1,m,0),Ou.getStandardGenerator(t,n,c,u,f,d).generateFromUncompressedSplatArray(m);{const{splatBuffer:g,splatBufferDataOffsetBytes:v}=mt.preallocateUncompressed(p.numPoints,o);return rM(p,o,!0,g.bufferData,v),g}}}const rn=class rn{static parseToUncompressedSplatBufferSection(e,t,n,s,o,c){const u=mt.CompressionLevels[0].BytesPerCenter,f=mt.CompressionLevels[0].BytesPerScale,d=mt.CompressionLevels[0].BytesPerRotation,p=mt.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;for(let m=e;m<=t;m++){const g=m*rn.RowSizeBytes+s,v=new Float32Array(n,g,3),A=new Float32Array(n,g+rn.CenterSizeBytes,3),y=new Uint8Array(n,g+rn.CenterSizeBytes+rn.ScaleSizeBytes,4),S=new Uint8Array(n,g+rn.CenterSizeBytes+rn.ScaleSizeBytes+rn.RotationSizeBytes,4),_=new En((S[1]-128)/128,(S[2]-128)/128,(S[3]-128)/128,(S[0]-128)/128);_.normalize();const b=m*p+c,E=new Float32Array(o,b,3),R=new Float32Array(o,b+u,3),D=new Float32Array(o,b+u+f,4),L=new Uint8Array(o,b+u+f+d,4);E[0]=v[0],E[1]=v[1],E[2]=v[2],R[0]=A[0],R[1]=A[1],R[2]=A[2],D[0]=_.w,D[1]=_.x,D[2]=_.y,D[3]=_.z,L[0]=y[0],L[1]=y[1],L[2]=y[2],L[3]=y[3]}}static parseToUncompressedSplatArraySection(e,t,n,s,o){for(let c=e;c<=t;c++){const u=c*rn.RowSizeBytes+s,f=new Float32Array(n,u,3),d=new Float32Array(n,u+rn.CenterSizeBytes,3),p=new Uint8Array(n,u+rn.CenterSizeBytes+rn.ScaleSizeBytes,4),m=new Uint8Array(n,u+rn.CenterSizeBytes+rn.ScaleSizeBytes+rn.RotationSizeBytes,4),g=new En((m[1]-128)/128,(m[2]-128)/128,(m[3]-128)/128,(m[0]-128)/128);g.normalize(),o.addSplatFromComonents(f[0],f[1],f[2],d[0],d[1],d[2],g.w,g.x,g.y,g.z,p[0],p[1],p[2],p[3])}}static parseStandardSplatToUncompressedSplatArray(e){const t=e.byteLength/rn.RowSizeBytes,n=new lt;for(let s=0;s<t;s++){const o=s*rn.RowSizeBytes,c=new Float32Array(e,o,3),u=new Float32Array(e,o+rn.CenterSizeBytes,3),f=new Uint8Array(e,o+rn.CenterSizeBytes+rn.ScaleSizeBytes,4),d=new Uint8Array(e,o+rn.CenterSizeBytes+rn.ScaleSizeBytes+rn.ColorSizeBytes,4),p=new En((d[1]-128)/128,(d[2]-128)/128,(d[3]-128)/128,(d[0]-128)/128);p.normalize(),n.addSplatFromComonents(c[0],c[1],c[2],u[0],u[1],u[2],p.w,p.x,p.y,p.z,f[0],f[1],f[2],f[3])}return n}};nt(rn,"RowSizeBytes",32),nt(rn,"CenterSizeBytes",12),nt(rn,"ScaleSizeBytes",12),nt(rn,"RotationSizeBytes",4),nt(rn,"ColorSizeBytes",4);let go=rn;function aM(r,e,t,n,s,o,c,u){return e?Ou.getStandardGenerator(t,n,s,o,c,u).generateFromUncompressedSplatArray(r):mt.generateFromUncompressedSplatArrays([r],t,0,new ne)}class b_{static loadFromURL(e,t,n,s,o,c,u=!0,f,d,p,m,g){let v=n?Sn.ProgressiveToSplatBuffer:Sn.ProgressiveToSplatArray;u&&(v=Sn.ProgressiveToSplatArray);const A=mt.HeaderSizeBytes+mt.SectionHeaderSizeBytes,y=Xt.ProgressiveLoadSectionSize,S=1;let _,b,E,R=0,D=0,L;const w=h_();let B=0,C=0,T=[];const O=(X,$,z,k)=>{const I=X>=100;if(z&&T.push(z),v===Sn.DownloadBeforeProcessing){I&&w.resolve(T);return}if(!k){if(n)throw new ph("Cannon directly load .splat because no file size info is available.");v=Sn.DownloadBeforeProcessing;return}if(!_){R=k/go.RowSizeBytes,_=new ArrayBuffer(k);const Y=mt.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,q=A+Y*R;v===Sn.ProgressiveToSplatBuffer?(b=new ArrayBuffer(q),mt.writeHeaderToBuffer({versionMajor:mt.CurrentMajorVersion,versionMinor:mt.CurrentMinorVersion,maxSectionCount:S,sectionCount:S,maxSplatCount:R,splatCount:D,compressionLevel:0,sceneCenter:new ne},b)):L=new lt(0)}if(z){new Uint8Array(_,C,z.byteLength).set(new Uint8Array(z)),C+=z.byteLength;const Y=C-B;if(Y>y||I){const J=(I?Y:y)/go.RowSizeBytes,F=D+J;v===Sn.ProgressiveToSplatBuffer?go.parseToUncompressedSplatBufferSection(D,F-1,_,0,b,A):go.parseToUncompressedSplatArraySection(D,F-1,_,0,L),D=F,v===Sn.ProgressiveToSplatBuffer&&(E||(mt.writeSectionHeaderToBuffer({maxSplatCount:R,splatCount:D,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,b,mt.HeaderSizeBytes),E=new mt(b,!1)),E.updateLoadedCounts(1,D),s&&s(E,I)),B+=y}}I&&(v===Sn.ProgressiveToSplatBuffer?w.resolve(E):w.resolve(L)),t&&t(X,$,Pn.Downloading)};return t&&t(0,"0%",Pn.Downloading),Ch(e,O,!1,f).then(()=>(t&&t(0,"0%",Pn.Processing),w.promise.then(X=>(t&&t(100,"100%",Pn.Done),v===Sn.DownloadBeforeProcessing?new Blob(T).arrayBuffer().then($=>b_.loadFromFileData($,o,c,u,d,p,m,g)):v===Sn.ProgressiveToSplatBuffer?X:Ki(()=>aM(X,u,o,c,d,p,m,g))))))}static loadFromFileData(e,t,n,s,o,c,u,f){return Ki(()=>{const d=go.parseStandardSplatToUncompressedSplatArray(e);return aM(d,s,t,n,o,c,u,f)})}}const ql=class ql{static checkVersion(e){const t=mt.CurrentMajorVersion,n=mt.CurrentMinorVersion,s=mt.parseHeader(e);if(s.versionMajor===t&&s.versionMinor>=n||s.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${s.versionMajor}.${s.versionMinor}. Minimum required: v${t}.${n}`)}static loadFromURL(e,t,n,s,o){let c,u,f,d,p=!1,m=!1,g,v=[],A=!1,y=!1,S=0,_=0,b=0,E=!1,R=!1,D=!1,L=[];const w=h_(),B=()=>{!p&&!m&&S>=mt.HeaderSizeBytes&&(m=!0,new Blob(L).arrayBuffer().then(k=>{f=new ArrayBuffer(mt.HeaderSizeBytes),new Uint8Array(f).set(new Uint8Array(k,0,mt.HeaderSizeBytes)),ql.checkVersion(f),m=!1,p=!0,d=mt.parseHeader(f),window.setTimeout(()=>{O()},1)}))};let C=0;const T=()=>{C===0&&(C++,window.setTimeout(()=>{C--,X()},1))},O=()=>{const z=()=>{y=!0,new Blob(L).arrayBuffer().then(I=>{y=!1,A=!0,g=new ArrayBuffer(d.maxSectionCount*mt.SectionHeaderSizeBytes),new Uint8Array(g).set(new Uint8Array(I,mt.HeaderSizeBytes,d.maxSectionCount*mt.SectionHeaderSizeBytes)),v=mt.parseSectionHeaders(d,g,0,!1);let Y=0;for(let J=0;J<d.maxSectionCount;J++)Y+=v[J].storageSizeBytes;const q=mt.HeaderSizeBytes+d.maxSectionCount*mt.SectionHeaderSizeBytes+Y;if(!c){c=new ArrayBuffer(q);let J=0;for(let F=0;F<L.length;F++){const ee=L[F];new Uint8Array(c,J,ee.byteLength).set(new Uint8Array(ee)),J+=ee.byteLength}}b=mt.HeaderSizeBytes+mt.SectionHeaderSizeBytes*d.maxSectionCount;for(let J=0;J<=v.length&&J<d.maxSectionCount;J++)b+=v[J].storageSizeBytes;T()})};!y&&!A&&p&&S>=mt.HeaderSizeBytes+mt.SectionHeaderSizeBytes*d.maxSectionCount&&z()},X=()=>{if(D)return;D=!0;const z=()=>{if(D=!1,A){if(R)return;if(E=S>=b,S-_>Xt.ProgressiveLoadSectionSize||E){_+=Xt.ProgressiveLoadSectionSize,R=_>=b,u||(u=new mt(c,!1));const I=mt.HeaderSizeBytes+mt.SectionHeaderSizeBytes*d.maxSectionCount;let Y=0,q=0,J=0;for(let ce=0;ce<d.maxSectionCount;ce++){const ie=v[ce],j=Y+ie.partiallyFilledBucketCount*4+ie.bucketStorageSizeBytes*ie.bucketCount,ue=I+j;if(_>=ue){q++;const ge=_-ue,Ze=mt.CompressionLevels[d.compressionLevel].SphericalHarmonicsDegrees[ie.sphericalHarmonicsDegree].BytesPerSplat;let Xe=Math.floor(ge/Ze);Xe=Math.min(Xe,ie.maxSplatCount),J+=Xe,u.updateLoadedCounts(q,J),u.updateSectionLoadedCounts(ce,Xe)}else break;Y+=ie.storageSizeBytes}s(u,R);const F=_/b*100,ee=F.toFixed(2)+"%";t&&t(F,ee,Pn.Downloading),R?w.resolve(u):X()}}};window.setTimeout(z,Xt.ProgressiveLoadSectionDelayDuration)};return Ch(e,(z,k,I)=>{I&&(L.push(I),c&&new Uint8Array(c,S,I.byteLength).set(new Uint8Array(I)),S+=I.byteLength),n?(B(),O(),X()):t&&t(z,k,Pn.Downloading)},!n,o).then(z=>(t&&t(0,"0%",Pn.Processing),(n?w.promise:ql.loadFromFileData(z)).then(I=>(t&&t(100,"100%",Pn.Done),I))))}static loadFromFileData(e){return Ki(()=>(ql.checkVersion(e),new mt(e)))}};nt(ql,"downloadFile",function(){let e;return function(t,n){const s=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=n,e.href=URL.createObjectURL(s),e.click()}}());let p0=ql;const Pi={Splat:0,KSplat:1,Ply:2,Spz:3},oM=r=>r.endsWith(".ply")?Pi.Ply:r.endsWith(".splat")?Pi.Splat:r.endsWith(".ksplat")?Pi.KSplat:r.endsWith(".spz")?Pi.Spz:null,lM={type:"change"},xg={type:"start"},cM={type:"end"},Td=new UE,uM=new Ea,uU=Math.cos(70*EE.DEG2RAD);class bd extends wo{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new ne,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:ll.ROTATE,MIDDLE:ll.DOLLY,RIGHT:ll.PAN},this.touches={ONE:cl.ROTATE,TWO:cl.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return u.phi},this.getAzimuthalAngle=function(){return u.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(te){te.addEventListener("keydown",fe),this._domElementKeyEvents=te},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",fe),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,this.clearDampedRotation(),this.clearDampedPan(),n.object.updateProjectionMatrix(),n.dispatchEvent(lM),n.update(),o=s.NONE},this.clearDampedRotation=function(){f.theta=0,f.phi=0},this.clearDampedPan=function(){p.set(0,0,0)},this.update=function(){const te=new ne,Ce=new En().setFromUnitVectors(e.up,new ne(0,1,0)),ke=Ce.clone().invert(),be=new ne,tt=new En,st=new ne,St=2*Math.PI;return function(){Ce.setFromUnitVectors(e.up,new ne(0,1,0)),ke.copy(Ce).invert();const Te=n.object.position;te.copy(Te).sub(n.target),te.applyQuaternion(Ce),u.setFromVector3(te),n.autoRotate&&o===s.NONE&&O(C()),n.enableDamping?(u.theta+=f.theta*n.dampingFactor,u.phi+=f.phi*n.dampingFactor):(u.theta+=f.theta,u.phi+=f.phi);let W=n.minAzimuthAngle,he=n.maxAzimuthAngle;isFinite(W)&&isFinite(he)&&(W<-Math.PI?W+=St:W>Math.PI&&(W-=St),he<-Math.PI?he+=St:he>Math.PI&&(he-=St),W<=he?u.theta=Math.max(W,Math.min(he,u.theta)):u.theta=u.theta>(W+he)/2?Math.max(W,u.theta):Math.min(he,u.theta)),u.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,u.phi)),u.makeSafe(),n.enableDamping===!0?n.target.addScaledVector(p,n.dampingFactor):n.target.add(p),n.zoomToCursor&&L||n.object.isOrthographicCamera?u.radius=J(u.radius):u.radius=J(u.radius*d),te.setFromSpherical(u),te.applyQuaternion(ke),Te.copy(n.target).add(te),n.object.lookAt(n.target),n.enableDamping===!0?(f.theta*=1-n.dampingFactor,f.phi*=1-n.dampingFactor,p.multiplyScalar(1-n.dampingFactor)):(f.set(0,0,0),p.set(0,0,0));let De=!1;if(n.zoomToCursor&&L){let Ge=null;if(n.object.isPerspectiveCamera){const Je=te.length();Ge=J(Je*d);const At=Je-Ge;n.object.position.addScaledVector(R,At),n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const Je=new ne(D.x,D.y,0);Je.unproject(n.object),n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/d)),n.object.updateProjectionMatrix(),De=!0;const At=new ne(D.x,D.y,0);At.unproject(n.object),n.object.position.sub(At).add(Je),n.object.updateMatrixWorld(),Ge=te.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;Ge!==null&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(Ge).add(n.object.position):(Td.origin.copy(n.object.position),Td.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(Td.direction))<uU?e.lookAt(n.target):(uM.setFromNormalAndCoplanarPoint(n.object.up,n.target),Td.intersectPlane(uM,n.target))))}else n.object.isOrthographicCamera&&(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/d)),n.object.updateProjectionMatrix(),De=!0);return d=1,L=!1,De||be.distanceToSquared(n.object.position)>c||8*(1-tt.dot(n.object.quaternion))>c||st.distanceToSquared(n.target)>0?(n.dispatchEvent(lM),be.copy(n.object.position),tt.copy(n.object.quaternion),st.copy(n.target),De=!1,!0):!1}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",Oe),n.domElement.removeEventListener("pointerdown",$e),n.domElement.removeEventListener("pointercancel",G),n.domElement.removeEventListener("wheel",se),n.domElement.removeEventListener("pointermove",Q),n.domElement.removeEventListener("pointerup",G),n._domElementKeyEvents!==null&&(n._domElementKeyEvents.removeEventListener("keydown",fe),n._domElementKeyEvents=null)};const n=this,s={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let o=s.NONE;const c=1e-6,u=new Vy,f=new Vy;let d=1;const p=new ne,m=new vt,g=new vt,v=new vt,A=new vt,y=new vt,S=new vt,_=new vt,b=new vt,E=new vt,R=new ne,D=new vt;let L=!1;const w=[],B={};function C(){return 2*Math.PI/60/60*n.autoRotateSpeed}function T(){return Math.pow(.95,n.zoomSpeed)}function O(te){f.theta-=te}function X(te){f.phi-=te}const $=function(){const te=new ne;return function(ke,be){te.setFromMatrixColumn(be,0),te.multiplyScalar(-ke),p.add(te)}}(),z=function(){const te=new ne;return function(ke,be){n.screenSpacePanning===!0?te.setFromMatrixColumn(be,1):(te.setFromMatrixColumn(be,0),te.crossVectors(n.object.up,te)),te.multiplyScalar(ke),p.add(te)}}(),k=function(){const te=new ne;return function(ke,be){const tt=n.domElement;if(n.object.isPerspectiveCamera){const st=n.object.position;te.copy(st).sub(n.target);let St=te.length();St*=Math.tan(n.object.fov/2*Math.PI/180),$(2*ke*St/tt.clientHeight,n.object.matrix),z(2*be*St/tt.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?($(ke*(n.object.right-n.object.left)/n.object.zoom/tt.clientWidth,n.object.matrix),z(be*(n.object.top-n.object.bottom)/n.object.zoom/tt.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function I(te){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?d/=te:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function Y(te){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?d*=te:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function q(te){if(!n.zoomToCursor)return;L=!0;const Ce=n.domElement.getBoundingClientRect(),ke=te.clientX-Ce.left,be=te.clientY-Ce.top,tt=Ce.width,st=Ce.height;D.x=ke/tt*2-1,D.y=-(be/st)*2+1,R.set(D.x,D.y,1).unproject(e).sub(e.position).normalize()}function J(te){return Math.max(n.minDistance,Math.min(n.maxDistance,te))}function F(te){m.set(te.clientX,te.clientY)}function ee(te){q(te),_.set(te.clientX,te.clientY)}function ce(te){A.set(te.clientX,te.clientY)}function ie(te){g.set(te.clientX,te.clientY),v.subVectors(g,m).multiplyScalar(n.rotateSpeed);const Ce=n.domElement;O(2*Math.PI*v.x/Ce.clientHeight),X(2*Math.PI*v.y/Ce.clientHeight),m.copy(g),n.update()}function j(te){b.set(te.clientX,te.clientY),E.subVectors(b,_),E.y>0?I(T()):E.y<0&&Y(T()),_.copy(b),n.update()}function ue(te){y.set(te.clientX,te.clientY),S.subVectors(y,A).multiplyScalar(n.panSpeed),k(S.x,S.y),A.copy(y),n.update()}function ge(te){q(te),te.deltaY<0?Y(T()):te.deltaY>0&&I(T()),n.update()}function Ae(te){let Ce=!1;switch(te.code){case n.keys.UP:te.ctrlKey||te.metaKey||te.shiftKey?X(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(0,n.keyPanSpeed),Ce=!0;break;case n.keys.BOTTOM:te.ctrlKey||te.metaKey||te.shiftKey?X(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(0,-n.keyPanSpeed),Ce=!0;break;case n.keys.LEFT:te.ctrlKey||te.metaKey||te.shiftKey?O(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(n.keyPanSpeed,0),Ce=!0;break;case n.keys.RIGHT:te.ctrlKey||te.metaKey||te.shiftKey?O(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(-n.keyPanSpeed,0),Ce=!0;break}Ce&&(te.preventDefault(),n.update())}function Be(){if(w.length===1)m.set(w[0].pageX,w[0].pageY);else{const te=.5*(w[0].pageX+w[1].pageX),Ce=.5*(w[0].pageY+w[1].pageY);m.set(te,Ce)}}function Ze(){if(w.length===1)A.set(w[0].pageX,w[0].pageY);else{const te=.5*(w[0].pageX+w[1].pageX),Ce=.5*(w[0].pageY+w[1].pageY);A.set(te,Ce)}}function Xe(){const te=w[0].pageX-w[1].pageX,Ce=w[0].pageY-w[1].pageY,ke=Math.sqrt(te*te+Ce*Ce);_.set(0,ke)}function ft(){n.enableZoom&&Xe(),n.enablePan&&Ze()}function _e(){n.enableZoom&&Xe(),n.enableRotate&&Be()}function ct(te){if(w.length==1)g.set(te.pageX,te.pageY);else{const ke=Ve(te),be=.5*(te.pageX+ke.x),tt=.5*(te.pageY+ke.y);g.set(be,tt)}v.subVectors(g,m).multiplyScalar(n.rotateSpeed);const Ce=n.domElement;O(2*Math.PI*v.x/Ce.clientHeight),X(2*Math.PI*v.y/Ce.clientHeight),m.copy(g)}function Z(te){if(w.length===1)y.set(te.pageX,te.pageY);else{const Ce=Ve(te),ke=.5*(te.pageX+Ce.x),be=.5*(te.pageY+Ce.y);y.set(ke,be)}S.subVectors(y,A).multiplyScalar(n.panSpeed),k(S.x,S.y),A.copy(y)}function it(te){const Ce=Ve(te),ke=te.pageX-Ce.x,be=te.pageY-Ce.y,tt=Math.sqrt(ke*ke+be*be);b.set(0,tt),E.set(0,Math.pow(b.y/_.y,n.zoomSpeed)),I(E.y),_.copy(b)}function Ke(te){n.enableZoom&&it(te),n.enablePan&&Z(te)}function at(te){n.enableZoom&&it(te),n.enableRotate&&ct(te)}function $e(te){n.enabled!==!1&&(w.length===0&&(n.domElement.setPointerCapture(te.pointerId),n.domElement.addEventListener("pointermove",Q),n.domElement.addEventListener("pointerup",G)),ze(te),te.pointerType==="touch"?Ee(te):N(te))}function Q(te){n.enabled!==!1&&(te.pointerType==="touch"?pe(te):U(te))}function G(te){je(te),w.length===0&&(n.domElement.releasePointerCapture(te.pointerId),n.domElement.removeEventListener("pointermove",Q),n.domElement.removeEventListener("pointerup",G)),n.dispatchEvent(cM),o=s.NONE}function N(te){let Ce;switch(te.button){case 0:Ce=n.mouseButtons.LEFT;break;case 1:Ce=n.mouseButtons.MIDDLE;break;case 2:Ce=n.mouseButtons.RIGHT;break;default:Ce=-1}switch(Ce){case ll.DOLLY:if(n.enableZoom===!1)return;ee(te),o=s.DOLLY;break;case ll.ROTATE:if(te.ctrlKey||te.metaKey||te.shiftKey){if(n.enablePan===!1)return;ce(te),o=s.PAN}else{if(n.enableRotate===!1)return;F(te),o=s.ROTATE}break;case ll.PAN:if(te.ctrlKey||te.metaKey||te.shiftKey){if(n.enableRotate===!1)return;F(te),o=s.ROTATE}else{if(n.enablePan===!1)return;ce(te),o=s.PAN}break;default:o=s.NONE}o!==s.NONE&&n.dispatchEvent(xg)}function U(te){switch(o){case s.ROTATE:if(n.enableRotate===!1)return;ie(te);break;case s.DOLLY:if(n.enableZoom===!1)return;j(te);break;case s.PAN:if(n.enablePan===!1)return;ue(te);break}}function se(te){n.enabled===!1||n.enableZoom===!1||o!==s.NONE||(te.preventDefault(),n.dispatchEvent(xg),ge(te),n.dispatchEvent(cM))}function fe(te){n.enabled===!1||n.enablePan===!1||Ae(te)}function Ee(te){switch(Pe(te),w.length){case 1:switch(n.touches.ONE){case cl.ROTATE:if(n.enableRotate===!1)return;Be(),o=s.TOUCH_ROTATE;break;case cl.PAN:if(n.enablePan===!1)return;Ze(),o=s.TOUCH_PAN;break;default:o=s.NONE}break;case 2:switch(n.touches.TWO){case cl.DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;ft(),o=s.TOUCH_DOLLY_PAN;break;case cl.DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;_e(),o=s.TOUCH_DOLLY_ROTATE;break;default:o=s.NONE}break;default:o=s.NONE}o!==s.NONE&&n.dispatchEvent(xg)}function pe(te){switch(Pe(te),o){case s.TOUCH_ROTATE:if(n.enableRotate===!1)return;ct(te),n.update();break;case s.TOUCH_PAN:if(n.enablePan===!1)return;Z(te),n.update();break;case s.TOUCH_DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;Ke(te),n.update();break;case s.TOUCH_DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;at(te),n.update();break;default:o=s.NONE}}function Oe(te){n.enabled!==!1&&te.preventDefault()}function ze(te){w.push(te)}function je(te){delete B[te.pointerId];for(let Ce=0;Ce<w.length;Ce++)if(w[Ce].pointerId==te.pointerId){w.splice(Ce,1);return}}function Pe(te){let Ce=B[te.pointerId];Ce===void 0&&(Ce=new vt,B[te.pointerId]=Ce),Ce.set(te.pageX,te.pageY)}function Ve(te){const Ce=te.pointerId===w[0].pointerId?w[1]:w[0];return B[Ce.pointerId]}n.domElement.addEventListener("contextmenu",Oe),n.domElement.addEventListener("pointerdown",$e),n.domElement.addEventListener("pointercancel",G),n.domElement.addEventListener("wheel",se,{passive:!1}),this.update()}}const fU=(r,e,t,n,s)=>{const o=performance.now();let c=r.style.display==="none"?0:parseFloat(r.style.opacity);isNaN(c)&&(c=1);const u=window.setInterval(()=>{const d=performance.now()-o;let p=Math.min(d/n,1);p>.999&&(p=1);let m;e?(m=(1-p)*c,m<1e-4&&(m=0)):m=(1-c)*p+c,m>0?(r.style.display=t,r.style.opacity=m):r.style.display="none",p>=1&&(s&&s(),window.clearInterval(u))},16);return u},dU=500,xh=class xh{constructor(e,t){this.taskIDGen=0,this.elementID=xh.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const n=document.createElement("style");n.innerHTML=`

            .spinnerOuterContainer${this.elementID} {
                width: 100%;
                height: 100%;
                margin: 0;
                top: 0;
                left: 0;
                position: absolute;
                pointer-events: none;
            }

            .messageContainer${this.elementID} {
                height: 20px;
                font-family: arial;
                font-size: 12pt;
                color: #ffffff;
                text-align: center;
                vertical-align: middle;
            }

            .spinner${this.elementID} {
                padding: 15px;
                background: #07e8d6;
                z-index:99999;
            
                aspect-ratio: 1;
                border-radius: 50%;
                --_m: 
                    conic-gradient(#0000,#000),
                    linear-gradient(#000 0 0) content-box;
                -webkit-mask: var(--_m);
                    mask: var(--_m);
                -webkit-mask-composite: source-out;
                    mask-composite: subtract;
                box-sizing: border-box;
                animation: load 1s linear infinite;
            }

            .spinnerContainerPrimary${this.elementID} {
                z-index:99999;
                background-color: rgba(128, 128, 128, 0.75);
                border: #666666 1px solid;
                border-radius: 5px;
                padding-top: 20px;
                padding-bottom: 10px;
                margin: 0;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-80px, -80px);
                width: 180px;
                pointer-events: auto;
            }

            .spinnerPrimary${this.elementID} {
                width: 120px;
                margin-left: 30px;
            }

            .messageContainerPrimary${this.elementID} {
                padding-top: 15px;
            }

            .spinnerContainerMin${this.elementID} {
                z-index:99999;
                background-color: rgba(128, 128, 128, 0.75);
                border: #666666 1px solid;
                border-radius: 5px;
                padding-top: 20px;
                padding-bottom: 15px;
                margin: 0;
                position: absolute;
                bottom: 50px;
                left: 50%;
                transform: translate(-50%, 0);
                display: flex;
                flex-direction: left;
                pointer-events: auto;
                min-width: 250px;
            }

            .messageContainerMin${this.elementID} {
                margin-right: 15px;
            }

            .spinnerMin${this.elementID} {
                width: 50px;
                height: 50px;
                margin-left: 15px;
                margin-right: 25px;
            }

            .messageContainerMin${this.elementID} {
                padding-top: 15px;
            }
            
            @keyframes load {
                to{transform: rotate(1turn)}
            }

        `,this.spinnerContainerOuter.appendChild(n),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let n of this.tasks){if(n.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let n of this.tasks)if(n.id===e){n.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.spinnerContainerOuter.parentElement===this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const n=(s,o,c,u,f)=>{c?s.style.display=o?u:"none":this.fadeTransitions[f]=fU(s,!o,u,dU,()=>{this.fadeTransitions[f]=null})};n(this.spinnerContainerPrimary,!e,t,"block",0),n(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}};nt(xh,"elementIDGen",0);let m0=xh;class hU{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML=`

            .progressBarOuterContainer {
                width: 100%;
                height: 100%;
                margin: 0;
                top: 0;
                left: 0;
                position: absolute;
                pointer-events: none;
            }

            .progressBarBox {
                z-index:99999;
                padding: 7px 9px 5px 7px;
                background-color: rgba(190, 190, 190, 0.75);
                border: #555555 1px solid;
                border-radius: 15px;
                margin: 0;
                position: absolute;
                bottom: 50px;
                left: 50%;
                transform: translate(-50%, 0);
                width: 180px;
                height: 30px;
                pointer-events: auto;
            }

            .progressBarBackground {
                width: 100%;
                height: 25px;
                border-radius:10px;
                background-color: rgba(128, 128, 128, 0.75);
                border: #444444 1px solid;
                box-shadow: inset 0 0 10px #333333;
            }

            .progressBar {
                height: 25px;
                width: 0px;
                border-radius:10px;
                background-color: rgba(0, 200, 0, 0.75);
                box-shadow: inset 0 0 10px #003300;
            }

        `,this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.progressBarContainerOuter.parentElement===this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}let pU=class{constructor(e){nt(this,"update",function(e,t,n,s,o,c,u,f,d,p,m,g,v,A){const y=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==y&&(this.infoCells.cameraPosition.innerHTML=y),n){const _=n,b=`${_.x.toFixed(5)}, ${_.y.toFixed(5)}, ${_.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==b&&(this.infoCells.cameraLookAt.innerHTML=b)}const S=`${s.x.toFixed(5)}, ${s.y.toFixed(5)}, ${s.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==S&&(this.infoCells.cameraUp.innerHTML=S),this.infoCells.orthographicCamera.innerHTML=o?"Orthographic":"Perspective",c){const _=c,b=`${_.x.toFixed(5)}, ${_.y.toFixed(5)}, ${_.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=b}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=u,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${d} splats out of ${f} (${p.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${m.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${g.toFixed(3)}`,this.infoCells.splatScale.innerHTML=`${v.toFixed(3)}`,this.infoCells.pointCloudMode.innerHTML=`${A}`});this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Camera mode","orthographicCamera"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"],["Splat scale","splatScale"],["Point cloud mode","pointCloudMode"]];this.infoPanelContainer=document.createElement("div");const n=document.createElement("style");n.innerHTML=`

            .infoPanel {
                width: 430px;
                padding: 10px;
                background-color: rgba(50, 50, 50, 0.85);
                border: #555555 2px solid;
                color: #dddddd;
                border-radius: 10px;
                z-index: 9999;
                font-family: arial;
                font-size: 11pt;
                text-align: left;
                margin: 0;
                top: 10px;
                left:10px;
                position: absolute;
                pointer-events: auto;
            }

            .info-panel-cell {
                margin-bottom: 5px;
                padding-bottom: 2px;
            }

            .label-cell {
                font-weight: bold;
                font-size: 12pt;
                width: 140px;
            }

        `,this.infoPanelContainer.append(n),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const s=document.createElement("div");s.style.display="table";for(let o of t){const c=document.createElement("div");c.style.display="table-row",c.className="info-panel-row";const u=document.createElement("div");u.style.display="table-cell",u.innerHTML=`${o[0]}: `,u.classList.add("info-panel-cell","label-cell");const f=document.createElement("div");f.style.display="table-cell",f.style.width="10px",f.innerHTML=" ",f.className="info-panel-cell";const d=document.createElement("div");d.style.display="table-cell",d.innerHTML="",d.className="info-panel-cell",this.infoCells[o[1]]=d,c.appendChild(u),c.appendChild(f),c.appendChild(d),s.appendChild(c)}this.infoPanel.appendChild(s),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}setContainer(e){this.container&&this.infoPanelContainer.parentElement===this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}};const fM=new ne;class mU extends yi{constructor(e=new ne(0,0,1),t=new ne(0,0,0),n=1,s=.1,o=16776960,c=n*.2,u=c*.2){super(),this.type="ArrowHelper";const f=new Du(s,s,n,32);f.translate(0,n/2,0);const d=new Du(0,u,c,32);d.translate(0,n,0),this.position.copy(t),this.line=new On(f,new bo({color:o,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new On(d,new bo({color:o,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{fM.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(fM,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class yu{constructor(e){nt(this,"updateFocusMarker",function(){const e=new ne,t=new Bt,n=new ne;return function(s,o,c){t.copy(o.matrixWorld).invert(),e.copy(s).applyMatrix4(t),e.normalize().multiplyScalar(10),e.applyMatrix4(o.matrixWorld),n.copy(o.position).sub(s);const u=n.length();this.focusMarker.position.copy(s),this.focusMarker.scale.set(u,u,u),this.focusMarker.material.uniforms.realFocusPosition.value.copy(s),this.focusMarker.material.uniforms.viewport.value.copy(c),this.focusMarker.material.uniformsNeedUpdate=!0}}());nt(this,"positionAndOrientControlPlane",function(){const e=new En,t=new ne(0,1,0);return function(n,s){e.setFromUnitVectors(t,s),this.controlPlane.position.copy(n),this.controlPlane.quaternion.copy(e)}}());this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(e,t){this.destroySplatRendertarget(),this.splatRenderTarget=new Pa(e,t,{format:Ai,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new f_(e,t),this.splatRenderTarget.depthTexture.format=wa,this.splatRenderTarget.depthTexture.type=Qi}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const e={sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},t=new gs({vertexShader:`
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = vec4( position.xy, 0.0, 1.0 );    
                }
            `,fragmentShader:`
                #include <common>
                #include <packing>
                varying vec2 vUv;
                uniform sampler2D sourceColorTexture;
                uniform sampler2D sourceDepthTexture;
                void main() {
                    vec4 color = texture2D(sourceColorTexture, vUv);
                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;
                    gl_FragDepth = fragDepth;
                    gl_FragColor = vec4(color.rgb, color.a * 2.0);
              }
            `,uniforms:e,depthWrite:!1,depthTest:!1,transparent:!0,blending:pE,blendSrc:bu,blendSrcAlpha:bu,blendDst:Cu,blendDstAlpha:Cu});t.extensions.fragDepth=!0,this.renderTargetCopyQuad=new On(new c0(2,2),t),this.renderTargetCopyCamera=new c_(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(Vl(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const e=new d_(.5,1.5,32),t=new bo({color:16777215}),n=new On(e,t);n.rotation.set(0,0,Math.PI),n.position.set(0,1,0);const s=new On(e,t);s.position.set(0,-1,0);const o=new On(e,t);o.rotation.set(0,0,Math.PI/2),o.position.set(1,0,0);const c=new On(e,t);c.rotation.set(0,0,-Math.PI/2),c.position.set(-1,0,0),this.meshCursor=new yi,this.meshCursor.add(n),this.meshCursor.add(s),this.meshCursor.add(o),this.meshCursor.add(c),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(Vl(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const e=new hh(.5,32,32),t=yu.buildFocusMarkerMaterial();t.depthTest=!1,t.depthWrite=!1,t.transparent=!0,this.focusMarker=new On(e,t)}}destroyFocusMarker(){this.focusMarker&&(Vl(this.focusMarker),this.focusMarker=null)}setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const e=new c0(1,1);e.rotateX(-Math.PI/2);const t=new bo({color:16777215});t.transparent=!0,t.opacity=.6,t.depthTest=!1,t.depthWrite=!1,t.side=hs;const n=new On(e,t),s=new ne(0,1,0);s.normalize();const o=new ne(0,0,0),c=.5,u=.01,f=56576,d=new mU(s,o,c,u,f,.1,.03);this.controlPlane=new yi,this.controlPlane.add(n),this.controlPlane.add(d)}}destroyControlPlane(){this.controlPlane&&(Vl(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(Vl(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(e){const t=new hh(1,32,32),n=new yi,s=(o,c)=>{let u=new On(t,yu.buildDebugMaterial(o));u.renderOrder=e,n.add(u),u.position.fromArray(c)};return s(16711680,[-50,0,0]),s(16711680,[50,0,0]),s(65280,[0,0,-50]),s(65280,[0,0,50]),s(16755200,[5,0,5]),n}createSecondaryDebugMeshes(e){const t=new Th(3,3,3),n=new yi;let s=12303291;const o=u=>{let f=new On(t,yu.buildDebugMaterial(s));f.renderOrder=e,n.add(f),f.position.fromArray(u)};let c=10;return o([-10,0,-10]),o([-10,0,c]),o([c,0,-10]),o([c,0,c]),n}static buildDebugMaterial(e){const t=`
            #include <common>
            varying float ndcDepth;

            void main() {
                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);
                ndcDepth = gl_Position.z / gl_Position.w;
                gl_Position.x = gl_Position.x / gl_Position.w;
                gl_Position.y = gl_Position.y / gl_Position.w;
                gl_Position.z = 0.0;
                gl_Position.w = 1.0;
    
            }
        `,n=`
            #include <common>
            uniform vec3 color;
            varying float ndcDepth;
            void main() {
                gl_FragDepth = (ndcDepth + 1.0) / 2.0;
                gl_FragColor = vec4(color.rgb, 0.0);
            }
        `,s={color:{type:"v3",value:new jt(e)}},o=new gs({uniforms:s,vertexShader:t,fragmentShader:n,transparent:!1,depthTest:!0,depthWrite:!0,side:js});return o.extensions.fragDepth=!0,o}static buildFocusMarkerMaterial(e){const t=`
            #include <common>

            uniform vec2 viewport;
            uniform vec3 realFocusPosition;

            varying vec4 ndcPosition;
            varying vec4 ndcCenter;
            varying vec4 ndcFocusPosition;

            void main() {
                float radius = 0.01;

                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);
                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);

                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);

                ndcPosition = projectionMatrix * viewPosition;
                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);
                ndcCenter = projectionMatrix * viewCenter;
                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);

                ndcFocusPosition = projectionMatrix * viewFocusPosition;
                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);

                gl_Position = projectionMatrix * viewPosition;

            }
        `,n=`
            #include <common>
            uniform vec3 color;
            uniform vec2 viewport;
            uniform float opacity;

            varying vec4 ndcPosition;
            varying vec4 ndcCenter;
            varying vec4 ndcFocusPosition;

            void main() {
                vec2 screenPosition = vec2(ndcPosition) * viewport;
                vec2 screenCenter = vec2(ndcCenter) * viewport;

                vec2 screenVec = screenPosition - screenCenter;

                float projectedRadius = length(screenVec);

                float lineWidth = 0.0005 * viewport.y;
                float aaRange = 0.0025 * viewport.y;
                float radius = 0.06 * viewport.y;
                float radDiff = abs(projectedRadius - radius) - lineWidth;
                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); 

                gl_FragColor = vec4(color.rgb, alpha * opacity);
            }
        `,s={color:{type:"v3",value:new jt(e)},realFocusPosition:{type:"v3",value:new ne},viewport:{type:"v2",value:new vt},opacity:{value:0}};return new gs({uniforms:s,vertexShader:t,fragmentShader:n,transparent:!0,depthTest:!1,depthWrite:!1,side:js})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const gU=new ne(1,0,0),_U=new ne(0,1,0),vU=new ne(0,0,1);let Ag=class{constructor(e=new ne,t=new ne){nt(this,"intersectBox",function(){const e=new ne,t=[],n=[],s=[];return function(o,c){if(n[0]=this.origin.x,n[1]=this.origin.y,n[2]=this.origin.z,s[0]=this.direction.x,s[1]=this.direction.y,s[2]=this.direction.z,this.boxContainsPoint(o,this.origin,1e-4))return c&&(c.origin.copy(this.origin),c.normal.set(0,0,0),c.distance=-1),!0;for(let u=0;u<3;u++){if(s[u]==0)continue;const f=u==0?gU:u==1?_U:vU,d=s[u]<0?o.max:o.min;let p=-Math.sign(s[u]);t[0]=u==0?d.x:u==1?d.y:d.z;let m=t[0]-n[u];if(m*p<0){const g=(u+1)%3,v=(u+2)%3;if(t[2]=s[g]/s[u]*m+n[g],t[1]=s[v]/s[u]*m+n[v],e.set(t[u],t[v],t[g]),this.boxContainsPoint(o,e,1e-4))return c&&(c.origin.copy(e),c.normal.copy(f).multiplyScalar(p),c.distance=e.sub(this.origin).length()),!0}}return!1}}());nt(this,"intersectSphere",function(){const e=new ne;return function(t,n,s){e.copy(t).sub(this.origin);const o=e.dot(this.direction),c=o*o,f=e.dot(e)-c,d=n*n;if(f>d)return!1;const p=Math.sqrt(d-f),m=o-p,g=o+p;if(g<0)return!1;let v=m<0?g:m;return s&&(s.origin.copy(this.origin).addScaledVector(this.direction,v),s.normal.copy(s.origin).sub(t).normalize(),s.distance=v),!0}}());this.origin=new ne,this.direction=new ne,this.setParameters(e,t)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,n){return!(t.x<e.min.x-n||t.x>e.max.x+n||t.y<e.min.y-n||t.y>e.max.y+n||t.z<e.min.z-n||t.z>e.max.z+n)}};class C_{constructor(){this.origin=new ne,this.normal=new ne,this.distance=0,this.splatIndex=0}set(e,t,n,s){this.origin.copy(e),this.normal.copy(t),this.distance=n,this.splatIndex=s}clone(){const e=new C_;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}const Lr={ThreeD:0,TwoD:1};class SU{constructor(e,t,n=!1){nt(this,"setFromCameraAndScreenPosition",function(){const e=new vt;return function(t,n,s){if(e.x=n.x/s.x*2-1,e.y=(s.y-n.y)/s.y*2-1,t.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t;else if(t.isOrthographicCamera)this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t;else throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type")}}());nt(this,"intersectSplatMesh",function(){const e=new Bt,t=new Bt,n=new Bt,s=new Ag,o=new ne;return function(c,u=[]){const f=c.getSplatTree();if(f){for(let d=0;d<f.subTrees.length;d++){const p=f.subTrees[d];t.copy(c.matrixWorld),c.dynamicMode&&(c.getSceneTransform(d,n),t.multiply(n)),e.copy(t).invert(),s.origin.copy(this.ray.origin).applyMatrix4(e),s.direction.copy(this.ray.origin).add(this.ray.direction),s.direction.applyMatrix4(e).sub(s.origin).normalize();const m=[];p.rootNode&&this.castRayAtSplatTreeNode(s,f,p.rootNode,m),m.forEach(g=>{g.origin.applyMatrix4(t),g.normal.applyMatrix4(t).normalize(),g.distance=o.copy(g.origin).sub(this.ray.origin).length()}),u.push(...m)}return u.sort((d,p)=>d.distance>p.distance?1:-1),u}}}());nt(this,"castRayAtSplatTreeNode",function(){const e=new ti,t=new ne,n=new ne,s=new En,o=new C_,c=1e-7,u=new ne(0,0,0),f=new Bt,d=new Bt,p=new Bt,m=new Bt,g=new Bt,v=new Ag;return function(A,y,S,_=[]){if(A.intersectBox(S.boundingBox)){if(S.data&&S.data.indexes&&S.data.indexes.length>0)for(let b=0;b<S.data.indexes.length;b++){const E=S.data.indexes[b],R=y.splatMesh.getSceneIndexForSplat(E);if(y.splatMesh.getScene(R).visible&&(y.splatMesh.getSplatColor(E,e),y.splatMesh.getSplatCenter(E,t),y.splatMesh.getSplatScaleAndRotation(E,n,s),!(n.x<=c||n.y<=c||y.splatMesh.splatRenderMode===Lr.ThreeD&&n.z<=c)))if(this.raycastAgainstTrueSplatEllipsoid){d.makeScale(n.x,n.y,n.z),p.makeRotationFromQuaternion(s);const L=Math.log10(e.w)*2;if(f.makeScale(L,L,L),g.copy(f).multiply(p).multiply(d),m.copy(g).invert(),v.origin.copy(A.origin).sub(t).applyMatrix4(m),v.direction.copy(A.origin).add(A.direction).sub(t),v.direction.applyMatrix4(m).sub(v.origin).normalize(),v.intersectSphere(u,1,o)){const w=o.clone();w.splatIndex=E,w.origin.applyMatrix4(g).add(t),_.push(w)}}else{let L=n.x+n.y,w=2;if(y.splatMesh.splatRenderMode===Lr.ThreeD&&(L+=n.z,w=3),L=L/w,A.intersectSphere(t,L,o)){const B=o.clone();B.splatIndex=E,_.push(B)}}}if(S.children&&S.children.length>0)for(let b of S.children)this.castRayAtSplatTreeNode(A,y,b,_);return _}}}());this.ray=new Ag(e,t),this.raycastAgainstTrueSplatEllipsoid=n}}class Ql{static buildVertexShaderBase(e=!1,t=!1,n=0,s=""){let o=`
        precision highp float;
        #include <common>

        attribute uint splatIndex;
        uniform highp usampler2D centersColorsTexture;
        uniform highp sampler2D sphericalHarmonicsTexture;
        uniform highp sampler2D sphericalHarmonicsTextureR;
        uniform highp sampler2D sphericalHarmonicsTextureG;
        uniform highp sampler2D sphericalHarmonicsTextureB;

        uniform highp usampler2D sceneIndexesTexture;
        uniform vec2 sceneIndexesTextureSize;
        uniform int sceneCount;
    `;return t&&(o+=`
            uniform float sceneOpacity[${Xt.MaxScenes}];
            uniform int sceneVisibility[${Xt.MaxScenes}];
        `),e&&(o+=`
            uniform highp mat4 transforms[${Xt.MaxScenes}];
        `),o+=`
        ${s}
        uniform vec2 focal;
        uniform float orthoZoom;
        uniform int orthographicMode;
        uniform int pointCloudModeEnabled;
        uniform float inverseFocalAdjustment;
        uniform vec2 viewport;
        uniform vec2 basisViewport;
        uniform vec2 centersColorsTextureSize;
        uniform int sphericalHarmonicsDegree;
        uniform vec2 sphericalHarmonicsTextureSize;
        uniform int sphericalHarmonics8BitMode;
        uniform int sphericalHarmonicsMultiTextureMode;
        uniform float visibleRegionRadius;
        uniform float visibleRegionFadeStartRadius;
        uniform float firstRenderTime;
        uniform float currentTime;
        uniform int fadeInComplete;
        uniform vec3 sceneCenter;
        uniform float splatScale;
        uniform float sphericalHarmonics8BitCompressionRangeMin[${Xt.MaxScenes}];
        uniform float sphericalHarmonics8BitCompressionRangeMax[${Xt.MaxScenes}];

        varying vec4 vColor;
        varying vec2 vUv;
        varying vec2 vPosition;

        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {
            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);
        
            return mat3(
                1. - 2. * (y * y + z * z),
                2. * (x * y + w * z),
                2. * (x * z - w * y),
                2. * (x * y - w * z),
                1. - 2. * (x * x + z * z),
                2. * (y * z + w * x),
                2. * (x * z + w * y),
                2. * (y * z - w * x),
                1. - 2. * (x * x + y * y)
            );
        }

        const float sqrt8 = sqrt(8.0);
        const float minAlpha = 1.0 / 255.0;

        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);
        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));
        const uvec4 shift4 = uvec4(0, 8, 16, 24);
        vec4 uintToRGBAVec (uint u) {
           uvec4 urgba = mask4 & u;
           urgba = urgba >> shift4;
           vec4 rgba = vec4(urgba) * encodeNorm4;
           return rgba;
        }

        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {
            vec2 samplerUV = vec2(0.0, 0.0);
            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;
            samplerUV.y = float(floor(d)) / dimensions.y;
            samplerUV.x = fract(d);
            return samplerUV;
        }

        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {
            vec2 samplerUV = vec2(0.0, 0.0);
            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;
            samplerUV.y = float(floor(d)) / dimensions.y;
            samplerUV.x = fract(d);
            return samplerUV;
        }

        const float SH_C1 = 0.4886025119029199f;
        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);

        void main () {

            uint oddOffset = splatIndex & uint(0x00000001);
            uint doubleOddOffset = oddOffset * uint(2);
            bool isEven = oddOffset == uint(0);
            uint nearestEvenIndex = splatIndex - oddOffset;
            float fOddOffset = float(oddOffset);

            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));
            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));

            uint sceneIndex = uint(0);
            if (sceneCount > 1) {
                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;
            }
            `,t&&(o+=`
                float splatOpacityFromScene = sceneOpacity[sceneIndex];
                int sceneVisible = sceneVisibility[sceneIndex];
                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {
                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
                    return;
                }
            `),e?o+=`
                mat4 transform = transforms[sceneIndex];
                mat4 transformModelViewMatrix = viewMatrix * transform;
            `:o+="mat4 transformModelViewMatrix = modelViewMatrix;",o+=`
            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];
            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];
            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;
            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;
            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);

            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);

            vec4 clipCenter = projectionMatrix * viewCenter;

            float clip = 1.2 * clipCenter.w;
            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {
                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
                return;
            }

            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

            vPosition = position.xy;
            vColor = uintToRGBAVec(sampledCenterColor.r);
        `,n>=1&&(o+=`   
            if (sphericalHarmonicsDegree >= 1) {
            `,e?o+=`
                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));
                `:o+=`
                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);
                `,o+=`
                vec3 sh1;
                vec3 sh2;
                vec3 sh3;
            `,n>=2&&(o+=`
                    vec3 sh4;
                    vec3 sh5;
                    vec3 sh6;
                    vec3 sh7;
                    vec3 sh8;
                `),n===1?o+=`
                    if (sphericalHarmonicsMultiTextureMode == 0) {
                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);
                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);
                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);
                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);
                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);
                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);
                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;
                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;
                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;
                    } else {
                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;
                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;
                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;
                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;
                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;
                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;
                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);
                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);
                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);
                    }
                `:n===2&&(o+=`
                    vec4 sampledSH0123;
                    vec4 sampledSH4567;
                    vec4 sampledSH891011;

                    vec4 sampledSH0123R;
                    vec4 sampledSH0123G;
                    vec4 sampledSH0123B;

                    if (sphericalHarmonicsMultiTextureMode == 0) {
                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));
                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));
                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));
                        sh1 = sampledSH0123.rgb;
                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);
                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);
                    } else {
                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));
                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));
                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));
                        sh1 = vec3(sampledSH0123R.rgb);
                        sh2 = vec3(sampledSH0123G.rgb);
                        sh3 = vec3(sampledSH0123B.rgb);
                    }
                `),o+=`
                    if (sphericalHarmonics8BitMode == 1) {
                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                    }
                    float x = worldViewDir.x;
                    float y = worldViewDir.y;
                    float z = worldViewDir.z;
                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);
            `,n>=2&&(o+=`
                    if (sphericalHarmonicsDegree >= 2) {
                        float xx = x * x;
                        float yy = y * y;
                        float zz = z * z;
                        float xy = x * y;
                        float yz = y * z;
                        float xz = x * z;
                `,n===2&&(o+=`
                        if (sphericalHarmonicsMultiTextureMode == 0) {
                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));
                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));
                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));
                            sh4 = sampledSH891011.gba;
                            sh5 = sampledSH12131415.rgb;
                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);
                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);
                            sh8 = sampledSH20212223.gba;
                        } else {
                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));
                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));
                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));
                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);
                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);
                            sh6 = vec3(sampledSH4567G.rgb);
                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);
                            sh8 = vec3(sampledSH4567B.gba);
                        }
                    `),o+=`
                        if (sphericalHarmonics8BitMode == 1) {
                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;
                        }

                        vColor.rgb +=
                            (SH_C2[0] * xy) * sh4 +
                            (SH_C2[1] * yz) * sh5 +
                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +
                            (SH_C2[3] * xz) * sh7 +
                            (SH_C2[4] * (xx - yy)) * sh8;
                    }
                `),o+=`

                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));

            }

            `),o}static getVertexShaderFadeIn(){return`
            if (fadeInComplete == 0) {
                float opacityAdjust = 1.0;
                float centerDist = length(splatCenter - sceneCenter);
                float renderTime = max(currentTime - firstRenderTime, 0.0);

                float fadeDistance = 0.75;
                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);
                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +
                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *
                                        distanceLoadFadeInFactor;
                opacityAdjust *= distanceLoadFadeInFactor;
                vColor.a *= opacityAdjust;
            }
        `}static getUniforms(e=!1,t=!1,n=0,s=1,o=!1){const c={sceneCenter:{type:"v3",value:new ne},fadeInComplete:{type:"i",value:0},orthographicMode:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},centersColorsTexture:{type:"t",value:null},sphericalHarmonicsTexture:{type:"t",value:null},sphericalHarmonicsTextureR:{type:"t",value:null},sphericalHarmonicsTextureG:{type:"t",value:null},sphericalHarmonicsTextureB:{type:"t",value:null},sphericalHarmonics8BitCompressionRangeMin:{type:"f",value:[]},sphericalHarmonics8BitCompressionRangeMax:{type:"f",value:[]},focal:{type:"v2",value:new vt},orthoZoom:{type:"f",value:1},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new vt},basisViewport:{type:"v2",value:new vt},debugColor:{type:"v3",value:new jt},centersColorsTextureSize:{type:"v2",value:new vt(1024,1024)},sphericalHarmonicsDegree:{type:"i",value:n},sphericalHarmonicsTextureSize:{type:"v2",value:new vt(1024,1024)},sphericalHarmonics8BitMode:{type:"i",value:0},sphericalHarmonicsMultiTextureMode:{type:"i",value:0},splatScale:{type:"f",value:s},pointCloudModeEnabled:{type:"i",value:o?1:0},sceneIndexesTexture:{type:"t",value:null},sceneIndexesTextureSize:{type:"v2",value:new vt(1024,1024)},sceneCount:{type:"i",value:1}};for(let u=0;u<Xt.MaxScenes;u++)c.sphericalHarmonics8BitCompressionRangeMin.value.push(-3/2),c.sphericalHarmonics8BitCompressionRangeMax.value.push(Xt.SphericalHarmonics8BitCompressionRange/2);if(t){const u=[];for(let d=0;d<Xt.MaxScenes;d++)u.push(1);c.sceneOpacity={type:"f",value:u};const f=[];for(let d=0;d<Xt.MaxScenes;d++)f.push(1);c.sceneVisibility={type:"i",value:f}}if(e){const u=[];for(let f=0;f<Xt.MaxScenes;f++)u.push(new Bt);c.transforms={type:"mat4",value:u}}return c}}class mh{static build(e=!1,t=!1,n=!1,s=2048,o=1,c=!1,u=0,f=.3){let p=Ql.buildVertexShaderBase(e,t,u,`
            uniform vec2 covariancesTextureSize;
            uniform highp sampler2D covariancesTexture;
            uniform highp usampler2D covariancesTextureHalfFloat;
            uniform int covariancesAreHalfFloat;

            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {
                vec2 r = unpackHalf2x16(val.r);
                vec2 g = unpackHalf2x16(val.g);
                vec2 b = unpackHalf2x16(val.b);

                first = vec4(r.x, r.y, g.x, g.y);
                second = vec4(b.x, b.y, 0.0, 0.0);
            }
        `);p+=mh.buildVertexShaderProjection(n,t,s,f);const m=mh.buildFragmentShader(),g=Ql.getUniforms(e,t,u,o,c);return g.covariancesTextureSize={type:"v2",value:new vt(1024,1024)},g.covariancesTexture={type:"t",value:null},g.covariancesTextureHalfFloat={type:"t",value:null},g.covariancesAreHalfFloat={type:"i",value:0},new gs({uniforms:g,vertexShader:p,fragmentShader:m,transparent:!0,alphaTest:1,blending:Ca,depthTest:!0,depthWrite:!1,side:hs})}static buildVertexShaderProjection(e,t,n,s){let o=`

            vec4 sampledCovarianceA;
            vec4 sampledCovarianceB;
            vec3 cov3D_M11_M12_M13;
            vec3 cov3D_M22_M23_M33;
            if (covariancesAreHalfFloat == 0) {
                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,
                                                                            covariancesTextureSize));
                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),
                                                                            covariancesTextureSize));

                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +
                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;
                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +
                                    vec3(sampledCovarianceB.gba) * fOddOffset;
            } else {
                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));
                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);
                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;
                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);
            }
        
            // Construct the 3D covariance matrix
            mat3 Vrk = mat3(
                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,
                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,
                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z
            );

            mat3 J;
            if (orthographicMode == 1) {
                // Since the projection is linear, we don't need an approximation
                J = transpose(mat3(orthoZoom, 0.0, 0.0,
                                0.0, orthoZoom, 0.0,
                                0.0, 0.0, 0.0));
            } else {
                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the
                // 3D covariance matrix instead of using the actual projection matrix because that transformation would
                // require a non-linear component (perspective division) which would yield a non-gaussian result.
                float s = 1.0 / (viewCenter.z * viewCenter.z);
                J = mat3(
                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,
                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,
                    0., 0., 0.
                );
            }

            // Concatenate the projection approximation with the model-view transformation
            mat3 W = transpose(mat3(transformModelViewMatrix));
            mat3 T = W * J;

            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix
            mat3 cov2Dm = transpose(T) * Vrk * T;
            `;return e?o+=`
                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];
                cov2Dm[0][0] += ${s};
                cov2Dm[1][1] += ${s};
                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];
                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));
                if (vColor.a < minAlpha) return;
            `:o+=`
                cov2Dm[0][0] += ${s};
                cov2Dm[1][1] += ${s};
            `,o+=`

            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because
            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],
            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't
            // need cov2Dm[1][0] because it is a symetric matrix.
            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);

            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix
            // so that we can determine the 2D basis for the splat. This is done using the method described
            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat
            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is
            // equal to scaling them by sqrt(8) standard deviations.
            //
            // This is a different approach than in the original work at INRIA. In that work they compute the
            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle
            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0
            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse
            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by
            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity
            float a = cov2Dv.x;
            float d = cov2Dv.z;
            float b = cov2Dv.y;
            float D = a * d - b * b;
            float trace = a + d;
            float traceOver2 = 0.5 * trace;
            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));
            float eigenValue1 = traceOver2 + term2;
            float eigenValue2 = traceOver2 - term2;

            if (pointCloudModeEnabled == 1) {
                eigenValue1 = eigenValue2 = 0.2;
            }

            if (eigenValue2 <= 0.0) return;

            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));
            // since the eigen vectors are orthogonal, we derive the second one from the first
            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);

            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.
            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(n)}.0);
            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(n)}.0);
            `,t&&(o+=`
                vColor.a *= splatOpacityFromScene;
            `),o+=`
            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *
                             basisViewport * 2.0 * inverseFocalAdjustment;

            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);
            gl_Position = quadPos;

            // Scale the position data we send to the fragment shader
            vPosition *= sqrt8;
        `,o+=Ql.getVertexShaderFadeIn(),o+="}",o}static buildFragmentShader(){let e=`
            precision highp float;
            #include <common>
 
            uniform vec3 debugColor;

            varying vec4 vColor;
            varying vec2 vUv;
            varying vec2 vPosition;
        `;return e+=`
            void main () {
                // Compute the positional squared distance from the center of the splat to the current fragment.
                float A = dot(vPosition, vPosition);
                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be
                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse
                // defined by the rectangle formed by vPosition. It also means it's farther
                // away than sqrt(8) standard deviations from the mean.
                if (A > 8.0) discard;
                vec3 color = vColor.rgb;

                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of
                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),
                // and since 'mean' is zero, we have X * X, which is the same as A:
                float opacity = exp(-0.5 * A) * vColor.a;

                gl_FragColor = vec4(color.rgb, opacity);
            }
        `,e}}class gh{static build(e=!1,t=!1,n=1,s=!1,o=0){let u=Ql.buildVertexShaderBase(e,t,o,`
            uniform vec2 scaleRotationsTextureSize;
            uniform highp sampler2D scaleRotationsTexture;
            varying mat3 vT;
            varying vec2 vQuadCenter;
            varying vec2 vFragCoord;
        `);u+=gh.buildVertexShaderProjection();const f=gh.buildFragmentShader(),d=Ql.getUniforms(e,t,o,n,s);return d.scaleRotationsTexture={type:"t",value:null},d.scaleRotationsTextureSize={type:"v2",value:new vt(1024,1024)},new gs({uniforms:d,vertexShader:u,fragmentShader:f,transparent:!0,alphaTest:1,blending:Ca,depthTest:!0,depthWrite:!1,side:hs})}static buildVertexShaderProjection(){let e=`

            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,
                                                                            oddOffset, scaleRotationsTextureSize));
            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,
                                                                            oddOffset + uint(1), scaleRotationsTextureSize));

            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +
                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;
            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +
                                    vec3(scaleRotationB.gba) * fOddOffset;

            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *
                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);
            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);
            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,
                            0.0, scaleRotation123.g, 0.0,
                            0.0, 0.0, scaleRotation123.b);
            
            mat3 L = R * S;

            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),
                                        vec4(L[1], 0.0),
                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));

            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);

            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),
                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),
                                    vec4(0.0, 0.0, 0.0, 1.0));

            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;
            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));
        `;return e+=`

                mat4 splat2World4 = mat4(vec4(L[0], 0.0),
                                        vec4(L[1], 0.0),
                                        vec4(L[2], 0.0),
                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));

                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);

                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);
                tempPoint1 /= tempPoint1.w;

                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);
                tempPoint2 /= tempPoint2.w;

                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);
                center /= center.w;

                vec2 basisVector1 = tempPoint1.xy - center.xy;
                vec2 basisVector2 = tempPoint2.xy - center.xy;

                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;
                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;

                const float minPix = 1.;
                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {
                    
            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);
            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);
            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);

            vec3 tempPoint = vec3(1.0, 1.0, -1.0);
            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);
            vec3 f = (1.0 / distance) * tempPoint;
            if (abs(distance) < 0.00001) return;

            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);
            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);
            vec2 pointImage = vec2(pointImageX, pointImageY);

            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);
            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);
            vec2 temp = vec2(tempX, tempY);

            vec2 halfExtend = pointImage * pointImage - temp;
            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));
            float radius = max(extent.x, extent.y);

            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);

            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);
            gl_Position = quadPos;

            vT = T;
            vQuadCenter = pointImage;
            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;
        
                } else {
                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;
                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);
                    gl_Position = quadPos;

                    vT = T;
                    vQuadCenter = center.xy;
                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;
                }
            `,e+=Ql.getVertexShaderFadeIn(),e+="}",e}static buildFragmentShader(){return`
            precision highp float;
            #include <common>

            uniform vec3 debugColor;

            varying vec4 vColor;
            varying vec2 vUv;
            varying vec2 vPosition;
            varying mat3 vT;
            varying vec2 vQuadCenter;
            varying vec2 vFragCoord;

            void main () {

                const float FilterInvSquare = 2.0;
                const float near_n = 0.2;
                const float T = 1.0;

                vec2 xy = vQuadCenter;
                vec3 Tu = vT[0];
                vec3 Tv = vT[1];
                vec3 Tw = vT[2];
                vec3 k = vFragCoord.x * Tw - Tu;
                vec3 l = vFragCoord.y * Tw - Tv;
                vec3 p = cross(k, l);
                if (p.z == 0.0) discard;
                vec2 s = vec2(p.x / p.z, p.y / p.z);
                float rho3d = (s.x * s.x + s.y * s.y); 
                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);
                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); 

                // compute intersection and depth
                float rho = min(rho3d, rho2d);
                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; 
                if (depth < near_n) discard;
                //  vec4 nor_o = collected_normal_opacity[j];
                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};
                float opa = vColor.a;

                float power = -0.5f * rho;
                if (power > 0.0f) discard;

                // Eq. (2) from 3D Gaussian splatting paper.
                // Obtain alpha by multiplying with Gaussian opacity
                // and its exponential falloff from mean.
                // Avoid numerical instabilities (see paper appendix). 
                float alpha = min(0.99f, opa * exp(power));
                if (alpha < 1.0f / 255.0f) discard;
                float test_T = T * (1.0 - alpha);
                if (test_T < 0.0001)discard;

                float w = alpha * T;
                gl_FragColor = vec4(vColor.rgb, w);
            }
        `}}class xU{static build(e){const t=new Js;t.setIndex([0,1,2,0,2,3]);const n=new Float32Array(4*3),s=new ms(n,3);t.setAttribute("position",s),s.setXYZ(0,-1,-1,0),s.setXYZ(1,-1,1,0),s.setXYZ(2,1,1,0),s.setXYZ(3,1,-1,0),s.needsUpdate=!0;const o=new fP().copy(t),c=new Uint32Array(e),u=new uP(c,1,!1);return u.setUsage(J1),o.setAttribute("splatIndex",u),o.instanceCount=0,o}}class AU extends yi{constructor(e,t=new ne,n=new En,s=new ne(1,1,1),o=1,c=1,u=!0){super(),this.splatBuffer=e,this.position.copy(t),this.quaternion.copy(n),this.scale.copy(s),this.transform=new Bt,this.minimumAlpha=o,this.opacity=c,this.visible=u}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(e){e?(this.matrixWorldAutoUpdate&&this.updateWorldMatrix(!0,!1),this.transform.copy(this.matrixWorld)):(this.matrixAutoUpdate&&this.updateMatrix(),this.transform.copy(this.matrix))}}const Ah=class Ah{constructor(e,t,n,s){this.min=new ne().copy(e),this.max=new ne().copy(t),this.boundingBox=new qs(this.min,this.max),this.center=new ne().copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=n,this.children=[],this.data=null,this.id=s||Ah.idGen++}};nt(Ah,"idGen",0);let g0=Ah;class Mu{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=new ne,this.sceneMin=new ne,this.sceneMax=new ne,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(e){const t=new ne().fromArray(e.min),n=new ne().fromArray(e.max),s=new g0(t,n,e.depth,e.id);if(e.data.indexes){s.data={indexes:[]};for(let o of e.data.indexes)s.data.indexes.push(o)}if(e.children)for(let o of e.children)s.children.push(Mu.convertWorkerSubTreeNode(o));return s}static convertWorkerSubTree(e,t){const n=new Mu(e.maxDepth,e.maxCentersPerNode);n.sceneMin=new ne().fromArray(e.sceneMin),n.sceneMax=new ne().fromArray(e.sceneMax),n.splatMesh=t,n.rootNode=Mu.convertWorkerSubTreeNode(e.rootNode);const s=(o,c)=>{o.children.length===0&&c(o);for(let u of o.children)s(u,c)};return n.nodesWithIndexes=[],s(n.rootNode,o=>{o.data&&o.data.indexes&&o.data.indexes.length>0&&n.nodesWithIndexes.push(o)}),n}}function yU(r){let e=0;class t{constructor(f,d){this.min=[f[0],f[1],f[2]],this.max=[d[0],d[1],d[2]]}containsPoint(f){return f[0]>=this.min[0]&&f[0]<=this.max[0]&&f[1]>=this.min[1]&&f[1]<=this.max[1]&&f[2]>=this.min[2]&&f[2]<=this.max[2]}}class n{constructor(f,d){this.maxDepth=f,this.maxCentersPerNode=d,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null,this.disposed=!1}}class s{constructor(f,d,p,m){this.min=[f[0],f[1],f[2]],this.max=[d[0],d[1],d[2]],this.center=[(d[0]-f[0])*.5+f[0],(d[1]-f[1])*.5+f[1],(d[2]-f[2])*.5+f[2]],this.depth=p,this.children=[],this.data=null,this.id=m||e++}}processSplatTreeNode=function(u,f,d,p){const m=f.data.indexes.length;if(m<u.maxCentersPerNode||f.depth>u.maxDepth){const b=[];for(let E=0;E<f.data.indexes.length;E++)u.addedIndexes[f.data.indexes[E]]||(b.push(f.data.indexes[E]),u.addedIndexes[f.data.indexes[E]]=!0);f.data.indexes=b,f.data.indexes.sort((E,R)=>E>R?1:-1),u.nodesWithIndexes.push(f);return}const g=[f.max[0]-f.min[0],f.max[1]-f.min[1],f.max[2]-f.min[2]],v=[g[0]*.5,g[1]*.5,g[2]*.5],A=[f.min[0]+v[0],f.min[1]+v[1],f.min[2]+v[2]],y=[new t([A[0]-v[0],A[1],A[2]-v[2]],[A[0],A[1]+v[1],A[2]]),new t([A[0],A[1],A[2]-v[2]],[A[0]+v[0],A[1]+v[1],A[2]]),new t([A[0],A[1],A[2]],[A[0]+v[0],A[1]+v[1],A[2]+v[2]]),new t([A[0]-v[0],A[1],A[2]],[A[0],A[1]+v[1],A[2]+v[2]]),new t([A[0]-v[0],A[1]-v[1],A[2]-v[2]],[A[0],A[1],A[2]]),new t([A[0],A[1]-v[1],A[2]-v[2]],[A[0]+v[0],A[1],A[2]]),new t([A[0],A[1]-v[1],A[2]],[A[0]+v[0],A[1],A[2]+v[2]]),new t([A[0]-v[0],A[1]-v[1],A[2]],[A[0],A[1],A[2]+v[2]])],S=[];for(let b=0;b<y.length;b++)S[b]=[];const _=[0,0,0];for(let b=0;b<m;b++){const E=f.data.indexes[b],R=d[E];_[0]=p[R],_[1]=p[R+1],_[2]=p[R+2];for(let D=0;D<y.length;D++)y[D].containsPoint(_)&&S[D].push(E)}for(let b=0;b<y.length;b++){const E=new s(y[b].min,y[b].max,f.depth+1);E.data={indexes:S[b]},f.children.push(E)}f.data={};for(let b of f.children)processSplatTreeNode(u,b,d,p)};const o=(u,f,d)=>{const p=[0,0,0],m=[0,0,0],g=[],v=Math.floor(u.length/4);for(let y=0;y<v;y++){const S=y*4,_=u[S],b=u[S+1],E=u[S+2],R=Math.round(u[S+3]);(y===0||_<p[0])&&(p[0]=_),(y===0||_>m[0])&&(m[0]=_),(y===0||b<p[1])&&(p[1]=b),(y===0||b>m[1])&&(m[1]=b),(y===0||E<p[2])&&(p[2]=E),(y===0||E>m[2])&&(m[2]=E),g.push(R)}const A=new n(f,d);return A.sceneMin=p,A.sceneMax=m,A.rootNode=new s(A.sceneMin,A.sceneMax,0),A.rootNode.data={indexes:g},A};function c(u,f,d){const p=[];for(let g of u){const v=Math.floor(g.length/4);for(let A=0;A<v;A++){const y=A*4,S=Math.round(g[y+3]);p[S]=y}}const m=[];for(let g of u){const v=o(g,f,d);m.push(v),processSplatTreeNode(v,v.rootNode,p,g)}r.postMessage({subTrees:m})}r.onmessage=u=>{u.data.process&&c(u.data.process.centers,u.data.process.maxDepth,u.data.process.maxCentersPerNode)}}function MU(r,e,t,n,s){r.postMessage({process:{centers:e,maxDepth:n,maxCentersPerNode:s}},t)}function EU(){return new Worker(URL.createObjectURL(new Blob(["(",yU.toString(),")(self)"],{type:"application/javascript"})))}class TU{constructor(e,t){nt(this,"processSplatMesh",function(e,t=()=>!0,n,s){this.splatTreeWorker||(this.splatTreeWorker=EU()),this.splatMesh=e,this.subTrees=[];const o=new ne,c=(u,f)=>{const d=new Float32Array(f*4);let p=0;for(let m=0;m<f;m++){const g=m+u;if(t(g)){e.getSplatCenter(g,o);const v=p*4;d[v]=o.x,d[v+1]=o.y,d[v+2]=o.z,d[v+3]=g,p++}}return d};return new Promise(u=>{const f=()=>this.disposed?(this.diposeSplatTreeWorker(),u(),!0):!1;n&&n(!1),Ki(()=>{if(f())return;const d=[];if(e.dynamicMode){let p=0;for(let m=0;m<e.scenes.length;m++){const v=e.getScene(m).splatBuffer.getSplatCount(),A=c(p,v);d.push(A),p+=v}}else{const p=c(0,e.getSplatCount());d.push(p)}this.splatTreeWorker.onmessage=p=>{f()||p.data.subTrees&&(s&&s(!1),Ki(()=>{if(!f()){for(let m of p.data.subTrees){const g=Mu.convertWorkerSubTree(m,e);this.subTrees.push(g)}this.diposeSplatTreeWorker(),s&&s(!0),Ki(()=>{u()})}}))},Ki(()=>{if(f())return;n&&n(!0);const p=d.map(m=>m.buffer);MU(this.splatTreeWorker,d,p,this.maxDepth,this.maxCentersPerNode)})})})});this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}dispose(){this.diposeSplatTreeWorker(),this.disposed=!0}diposeSplatTreeWorker(){this.splatTreeWorker&&this.splatTreeWorker.terminate(),this.splatTreeWorker=null}countLeaves(){let e=0;return this.visitLeaves(()=>{e++}),e}visitLeaves(e){const t=(n,s)=>{n.children.length===0&&s(n);for(let o of n.children)t(o,s)};for(let n of this.subTrees)t(n.rootNode,e)}}function bU(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let s;switch(n){case"WEBGL_depth_texture":s=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=r.getExtension(n)}return e[n]=s,s}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?(t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance")):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const s=t(n);return s===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function CU(r,e,t){let n;function s(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const w=e.get("EXT_texture_filter_anisotropic");n=r.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function o(w){if(w==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const c=typeof WebGL2RenderingContext<"u"&&r.constructor.name==="WebGL2RenderingContext";let u=t.precision!==void 0?t.precision:"highp";const f=o(u);f!==u&&(console.warn("THREE.WebGLRenderer:",u,"not supported, using",f,"instead."),u=f);const d=c||e.has("WEBGL_draw_buffers"),p=t.logarithmicDepthBuffer===!0,m=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),g=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),v=r.getParameter(r.MAX_TEXTURE_SIZE),A=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),y=r.getParameter(r.MAX_VERTEX_ATTRIBS),S=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),_=r.getParameter(r.MAX_VARYING_VECTORS),b=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),E=g>0,R=c||e.has("OES_texture_float"),D=E&&R,L=c?r.getParameter(r.MAX_SAMPLES):0;return{isWebGL2:c,drawBuffers:d,getMaxAnisotropy:s,getMaxPrecision:o,precision:u,logarithmicDepthBuffer:p,maxTextures:m,maxVertexTextures:g,maxTextureSize:v,maxCubemapSize:A,maxAttributes:y,maxVertexUniforms:S,maxVaryings:_,maxFragmentUniforms:b,vertexTextures:E,floatFragmentTextures:R,floatVertexTextures:D,maxSamples:L}}const Eu={Default:0,Instant:2},Kl={None:0,Info:3},dM=new Js,RU=new bo,Cd=6,wU=4,DU=4,LU=4,PU=6,UU=8,yg=4,Mg=4,hM=1,IU=.012,BU=.003,pM=1,mM=16777216;class oi extends On{constructor(t=Lr.ThreeD,n=!1,s=!1,o=!1,c=1,u=!0,f=!1,d=!1,p=1024,m=Kl.None,g=0,v=1,A=.3){super(dM,RU);nt(this,"buildSplatTree",function(t=[],n,s){return new Promise(o=>{this.disposeSplatTree(),this.baseSplatTree=new TU(8,1e3);const c=performance.now(),u=new ti;this.baseSplatTree.processSplatMesh(this,f=>{this.getSplatColor(f,u);const d=this.getSceneIndexForSplat(f),p=t[d]||1;return u.w>=p},n,s).then(()=>{const f=performance.now()-c;if(this.logLevel>=Kl.Info&&console.log("SplatTree build: "+f+" ms"),this.disposed)o();else{this.splatTree=this.baseSplatTree,this.baseSplatTree=null;let d=0,p=0,m=0;this.splatTree.visitLeaves(g=>{const v=g.data.indexes.length;v>0&&(p+=v,m++,d++)}),this.logLevel>=Kl.Info&&(console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${d}`),p=p/m,console.log(`Avg splat count per node: ${p}`),console.log(`Total splat count: ${this.getSplatCount()}`)),o()}})})});nt(this,"updateUniforms",function(){const t=new vt;return function(n,s,o,c,u,f){if(this.getSplatCount()>0){if(t.set(n.x*this.devicePixelRatio,n.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(t),this.material.uniforms.basisViewport.value.set(1/t.x,1/t.y),this.material.uniforms.focal.value.set(s,o),this.material.uniforms.orthographicMode.value=c?1:0,this.material.uniforms.orthoZoom.value=u,this.material.uniforms.inverseFocalAdjustment.value=f,this.dynamicMode)for(let p=0;p<this.scenes.length;p++)this.material.uniforms.transforms.value[p].copy(this.getScene(p).transform);if(this.enableOptionalEffects)for(let p=0;p<this.scenes.length;p++)this.material.uniforms.sceneOpacity.value[p]=Mn(this.getScene(p).opacity,0,1),this.material.uniforms.sceneVisibility.value[p]=this.getScene(p).visible?1:0,this.material.uniformsNeedUpdate=!0;this.material.uniformsNeedUpdate=!0}}}());nt(this,"setupDistancesComputationTransformFeedback",function(){let t;return function(){const n=this.getMaxSplatCount();if(!this.renderer)return;const s=this.lastRenderer!==this.renderer,o=t!==n;if(!s&&!o)return;s?this.disposeDistancesComputationGPUResources():o&&this.disposeDistancesComputationGPUBufferResources();const c=this.renderer.getContext(),u=(v,A,y)=>{const S=v.createShader(A);if(!S)return console.error("Fatal error: gl could not create a shader object."),null;if(v.shaderSource(S,y),v.compileShader(S),!v.getShaderParameter(S,v.COMPILE_STATUS)){let b="unknown";A===v.VERTEX_SHADER?b="vertex shader":A===v.FRAGMENT_SHADER&&(b="fragement shader");const E=v.getShaderInfoLog(S);return console.error("Failed to compile "+b+" with these errors:"+E),v.deleteShader(S),null}return S};let f;this.integerBasedDistancesComputation?(f=`#version 300 es
                in ivec4 center;
                flat out int distance;`,this.dynamicMode?f+=`
                        in uint sceneIndex;
                        uniform ivec4 transforms[${Xt.MaxScenes}];
                        void main(void) {
                            ivec4 transform = transforms[sceneIndex];
                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;
                        }
                    `:f+=`
                        uniform ivec3 modelViewProj;
                        void main(void) {
                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;
                        }
                    `):(f=`#version 300 es
                in vec4 center;
                flat out float distance;`,this.dynamicMode?f+=`
                        in uint sceneIndex;
                        uniform mat4 transforms[${Xt.MaxScenes}];
                        void main(void) {
                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);
                            distance = transformedCenter.z;
                        }
                    `:f+=`
                        uniform vec3 modelViewProj;
                        void main(void) {
                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;
                        }
                    `);const d=`#version 300 es
                precision lowp float;
                out vec4 fragColor;
                void main(){}
            `,p=c.getParameter(c.VERTEX_ARRAY_BINDING),m=c.getParameter(c.CURRENT_PROGRAM),g=m?c.getProgramParameter(m,c.DELETE_STATUS):!1;if(s&&(this.distancesTransformFeedback.vao=c.createVertexArray()),c.bindVertexArray(this.distancesTransformFeedback.vao),s){const v=c.createProgram(),A=u(c,c.VERTEX_SHADER,f),y=u(c,c.FRAGMENT_SHADER,d);if(!A||!y)throw new Error("Could not compile shaders for distances computation on GPU.");if(c.attachShader(v,A),c.attachShader(v,y),c.transformFeedbackVaryings(v,["distance"],c.SEPARATE_ATTRIBS),c.linkProgram(v),!c.getProgramParameter(v,c.LINK_STATUS)){const _=c.getProgramInfoLog(v);throw console.error("Fatal error: Failed to link program: "+_),c.deleteProgram(v),c.deleteShader(y),c.deleteShader(A),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=v,this.distancesTransformFeedback.vertexShader=A,this.distancesTransformFeedback.vertexShader=y}if(c.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=c.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.sceneIndexesLoc=c.getAttribLocation(this.distancesTransformFeedback.program,"sceneIndex");for(let v=0;v<this.scenes.length;v++)this.distancesTransformFeedback.transformsLocs[v]=c.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${v}]`)}else this.distancesTransformFeedback.modelViewProjLoc=c.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(s||o)&&(this.distancesTransformFeedback.centersBuffer=c.createBuffer(),c.bindBuffer(c.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),c.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?c.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,c.INT,0,0):c.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,c.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.sceneIndexesBuffer=c.createBuffer(),c.bindBuffer(c.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),c.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),c.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,c.UNSIGNED_INT,0,0))),(s||o)&&(this.distancesTransformFeedback.outDistancesBuffer=c.createBuffer()),c.bindBuffer(c.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),c.bufferData(c.ARRAY_BUFFER,n*4,c.STATIC_READ),s&&(this.distancesTransformFeedback.id=c.createTransformFeedback()),c.bindTransformFeedback(c.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),c.bindBufferBase(c.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),m&&g!==!0&&c.useProgram(m),p&&c.bindVertexArray(p),this.lastRenderer=this.renderer,t=n}}());nt(this,"fillTransformsArray",function(){const t=[];return function(n){t.length!==n.length&&(t.length=n.length);for(let s=0;s<this.scenes.length;s++){const c=this.getScene(s).transform.elements;for(let u=0;u<16;u++)t[s*16+u]=c[u]}n.set(t)}}());nt(this,"computeDistancesOnGPU",function(){const t=new Bt;return function(n,s){if(!this.renderer)return;const o=this.renderer.getContext(),c=o.getParameter(o.VERTEX_ARRAY_BINDING),u=o.getParameter(o.CURRENT_PROGRAM),f=u?o.getProgramParameter(u,o.DELETE_STATUS):!1;if(o.bindVertexArray(this.distancesTransformFeedback.vao),o.useProgram(this.distancesTransformFeedback.program),o.enable(o.RASTERIZER_DISCARD),this.dynamicMode)for(let m=0;m<this.scenes.length;m++)if(t.copy(this.getScene(m).transform),t.premultiply(n),this.integerBasedDistancesComputation){const g=oi.getIntegerMatrixArray(t),v=[g[2],g[6],g[10],g[14]];o.uniform4i(this.distancesTransformFeedback.transformsLocs[m],v[0],v[1],v[2],v[3])}else o.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[m],!1,t.elements);else if(this.integerBasedDistancesComputation){const m=oi.getIntegerMatrixArray(n),g=[m[2],m[6],m[10]];o.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,g[0],g[1],g[2])}else{const m=[n.elements[2],n.elements[6],n.elements[10]];o.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,m[0],m[1],m[2])}o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),o.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?o.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,o.INT,0,0):o.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,o.FLOAT,!1,0,0),this.dynamicMode&&(o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),o.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),o.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,o.UNSIGNED_INT,0,0)),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),o.bindBufferBase(o.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),o.beginTransformFeedback(o.POINTS),o.drawArrays(o.POINTS,0,this.getSplatCount()),o.endTransformFeedback(),o.bindBufferBase(o.TRANSFORM_FEEDBACK_BUFFER,0,null),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,null),o.disable(o.RASTERIZER_DISCARD);const d=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);o.flush();const p=new Promise(m=>{const g=()=>{if(this.disposed)m();else switch(o.clientWaitSync(d,0,0)){case o.TIMEOUT_EXPIRED:return this.computeDistancesOnGPUSyncTimeout=setTimeout(g),this.computeDistancesOnGPUSyncTimeout;case o.WAIT_FAILED:throw new Error("should never get here");default:this.computeDistancesOnGPUSyncTimeout=null,o.deleteSync(d);const S=o.getParameter(o.VERTEX_ARRAY_BINDING);o.bindVertexArray(this.distancesTransformFeedback.vao),o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),o.getBufferSubData(o.ARRAY_BUFFER,0,s),o.bindBuffer(o.ARRAY_BUFFER,null),S&&o.bindVertexArray(S),m()}};this.computeDistancesOnGPUSyncTimeout=setTimeout(g)});return u&&f!==!0&&o.useProgram(u),c&&o.bindVertexArray(c),p}}());nt(this,"getSplatCenter",function(){const t={};return function(n,s,o){this.getLocalSplatParameters(n,t,o),t.splatBuffer.getSplatCenter(t.localIndex,s,t.sceneTransform)}}());nt(this,"getSplatScaleAndRotation",function(){const t={},n=new ne;return function(s,o,c,u){this.getLocalSplatParameters(s,t,u),n.x=void 0,n.y=void 0,n.z=void 0,this.splatRenderMode===Lr.TwoD&&(n.z=0),t.splatBuffer.getSplatScaleAndRotation(t.localIndex,o,c,t.sceneTransform,n)}}());nt(this,"getSplatColor",function(){const t={};return function(n,s){this.getLocalSplatParameters(n,t),t.splatBuffer.getSplatColor(t.localIndex,s)}}());this.renderer=void 0,this.splatRenderMode=t,this.dynamicMode=n,this.enableOptionalEffects=s,this.halfPrecisionCovariancesOnGPU=o,this.devicePixelRatio=c,this.enableDistancesComputationOnGPU=u,this.integerBasedDistancesComputation=f,this.antialiased=d,this.kernel2DSize=A,this.maxScreenSpaceSplatSize=p,this.logLevel=m,this.sphericalHarmonicsDegree=g,this.minSphericalHarmonicsDegree=0,this.sceneFadeInRateMultiplier=v,this.scenes=[],this.splatTree=null,this.baseSplatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new qs,this.calculatedSceneCenter=new ne,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!1,this.lastRenderer=null,this.visible=!1}static buildScenes(t,n,s){const o=[];o.length=n.length;for(let c=0;c<n.length;c++){const u=n[c],f=s[c]||{};let d=f.position||[0,0,0],p=f.rotation||[0,0,0,1],m=f.scale||[1,1,1];const g=new ne().fromArray(d),v=new En().fromArray(p),A=new ne().fromArray(m),y=oi.createScene(u,g,v,A,f.splatAlphaRemovalThreshold||1,f.opacity,f.visible);t.add(y),o[c]=y}return o}static createScene(t,n,s,o,c,u=1,f=!0){return new AU(t,n,s,o,c,u,f)}static buildSplatIndexMaps(t){const n=[],s=[];let o=0;for(let c=0;c<t.length;c++){const f=t[c].getMaxSplatCount();for(let d=0;d<f;d++)n[o]=d,s[o]=c,o++}return{localSplatIndexMap:n,sceneIndexMap:s}}build(t,n,s=!0,o=!1,c,u,f=!0){this.sceneOptions=n,this.finalBuild=o;const d=oi.getTotalMaxSplatCountForSplatBuffers(t),p=oi.buildScenes(this,t,n);if(s)for(let S=0;S<this.scenes.length&&S<p.length;S++){const _=p[S],b=this.getScene(S);_.copyTransformData(b)}this.scenes=p;let m=3;for(let S of t){const _=S.getMinSphericalHarmonicsDegree();_<m&&(m=_)}this.minSphericalHarmonicsDegree=Math.min(m,this.sphericalHarmonicsDegree);let g=!1;if(t.length!==this.lastBuildScenes.length)g=!0;else for(let S=0;S<t.length;S++)if(t[S]!==this.lastBuildScenes[S].splatBuffer){g=!0;break}let v=!0;if((this.scenes.length!==1||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==d||g)&&(v=!1),!v){this.boundingBox=new qs,f||(this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1),this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=xU.build(d),this.splatRenderMode===Lr.ThreeD?this.material=mh.build(this.dynamicMode,this.enableOptionalEffects,this.antialiased,this.maxScreenSpaceSplatSize,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree,this.kernel2DSize):this.material=gh.build(this.dynamicMode,this.enableOptionalEffects,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree);const S=oi.buildSplatIndexMaps(t);this.globalSplatIndexToLocalSplatIndexMap=S.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=S.sceneIndexMap}const A=this.getSplatCount(!0);this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback();const y=this.refreshGPUDataFromSplatBuffers(v);for(let S=0;S<this.scenes.length;S++)this.lastBuildScenes[S]=this.scenes[S];return this.lastBuildSplatCount=A,this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,o&&this.scenes.length>0&&this.buildSplatTree(n.map(S=>S.splatAlphaRemovalThreshold||1),c,u).then(()=>{this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree),this.onSplatTreeReadyCallback=null}),this.visible=this.scenes.length>0,y}freeIntermediateSplatData(){const t=n=>{delete n.source.data,delete n.image,n.onUpdate=null};delete this.splatDataTextures.baseData.covariances,delete this.splatDataTextures.baseData.centers,delete this.splatDataTextures.baseData.colors,delete this.splatDataTextures.baseData.sphericalHarmonics,delete this.splatDataTextures.centerColors.data,delete this.splatDataTextures.covariances.data,this.splatDataTextures.sphericalHarmonics&&delete this.splatDataTextures.sphericalHarmonics.data,this.splatDataTextures.sceneIndexes&&delete this.splatDataTextures.sceneIndexes.data,this.splatDataTextures.centerColors.texture.needsUpdate=!0,this.splatDataTextures.centerColors.texture.onUpdate=()=>{t(this.splatDataTextures.centerColors.texture)},this.splatDataTextures.covariances.texture.needsUpdate=!0,this.splatDataTextures.covariances.texture.onUpdate=()=>{t(this.splatDataTextures.covariances.texture)},this.splatDataTextures.sphericalHarmonics&&(this.splatDataTextures.sphericalHarmonics.texture?(this.splatDataTextures.sphericalHarmonics.texture.needsUpdate=!0,this.splatDataTextures.sphericalHarmonics.texture.onUpdate=()=>{t(this.splatDataTextures.sphericalHarmonics.texture)}):this.splatDataTextures.sphericalHarmonics.textures.forEach(n=>{n.needsUpdate=!0,n.onUpdate=()=>{t(n)}})),this.splatDataTextures.sceneIndexes&&(this.splatDataTextures.sceneIndexes.texture.needsUpdate=!0,this.splatDataTextures.sceneIndexes.texture.onUpdate=()=>{t(this.splatDataTextures.sceneIndexes.texture)})}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&(this.computeDistancesOnGPUSyncTimeout&&(clearTimeout(this.computeDistancesOnGPUSyncTimeout),this.computeDistancesOnGPUSyncTimeout=null),this.disposeDistancesComputationGPUResources()),this.scenes=[],this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.renderer=null,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new qs,this.calculatedSceneCenter=new ne,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!0,this.lastRenderer=null,this.visible=!1}disposeMeshData(){this.geometry&&this.geometry!==dM&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let t in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(t)){const n=this.splatDataTextures[t];n.texture&&(n.texture.dispose(),n.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree&&(this.splatTree.dispose(),this.splatTree=null),this.baseSplatTree&&(this.baseSplatTree.dispose(),this.baseSplatTree=null)}getSplatTree(){return this.splatTree}onSplatTreeReady(t){this.onSplatTreeReadyCallback=t}getDataForDistancesComputation(t,n){const s=this.integerBasedDistancesComputation?this.getIntegerCenters(t,n,!0):this.getFloatCenters(t,n,!0),o=this.getSceneIndexes(t,n);return{centers:s,sceneIndexes:o}}refreshGPUDataFromSplatBuffers(t){const n=this.getSplatCount(!0);this.refreshDataTexturesFromSplatBuffers(t);const s=t?this.lastBuildSplatCount:0,{centers:o,sceneIndexes:c}=this.getDataForDistancesComputation(s,n-1);return this.enableDistancesComputationOnGPU&&this.refreshGPUBuffersForDistancesComputation(o,c,t),{from:s,to:n-1,count:n-s,centers:o,sceneIndexes:c}}refreshGPUBuffersForDistancesComputation(t,n,s=!1){const o=s?this.lastBuildSplatCount:0;this.updateGPUCentersBufferForDistancesComputation(s,t,o),this.updateGPUTransformIndexesBufferForDistancesComputation(s,n,o)}refreshDataTexturesFromSplatBuffers(t){const n=this.getSplatCount(!0),s=this.lastBuildSplatCount,o=n-1;t?this.updateBaseDataFromSplatBuffers(s,o):(this.setupDataTextures(),this.updateBaseDataFromSplatBuffers()),this.updateDataTexturesFromBaseData(s,o),this.updateVisibleRegion(t)}setupDataTextures(){const t=this.getMaxSplatCount(),n=this.getSplatCount(!0);this.disposeTextures();const s=(B,C)=>{const T=new vt(4096,1024);for(;T.x*T.y*B<t*C;)T.y*=2;return T},o=B=>B>=1?PU:DU,c=B=>{const C=o(B),T=s(C,6);return{elementsPerTexelStored:C,texSize:T}};let u=this.getTargetCovarianceCompressionLevel();const f=0,d=this.getTargetSphericalHarmonicsCompressionLevel();let p,m,g;if(this.splatRenderMode===Lr.ThreeD){const B=c(u);B.texSize.x*B.texSize.y>mM&&u===0&&(u=1),p=new Float32Array(t*Cd)}else m=new Float32Array(t*3),g=new Float32Array(t*4);const v=new Float32Array(t*3),A=new Uint8Array(t*4);let y=Float32Array;d===1?y=Uint16Array:d===2&&(y=Uint8Array);const S=$l(this.minSphericalHarmonicsDegree),_=this.minSphericalHarmonicsDegree?new y(t*S):void 0,b=s(Mg,4),E=new Uint32Array(b.x*b.y*Mg);oi.updateCenterColorsPaddedData(0,n-1,v,A,E);const R=new _a(E,b.x,b.y,Su,Qi);if(R.internalFormat="RGBA32UI",R.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=R,this.material.uniforms.centersColorsTextureSize.value.copy(b),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:p,scales:m,rotations:g,centers:v,colors:A,sphericalHarmonics:_},centerColors:{data:E,texture:R,size:b}},this.splatRenderMode===Lr.ThreeD){const B=c(u),C=B.elementsPerTexelStored,T=B.texSize;let O=u>=1?Uint32Array:Float32Array;const X=u>=1?UU:LU,$=new O(T.x*T.y*X);u===0?$.set(p):oi.updatePaddedCompressedCovariancesTextureData(p,$,0,0,p.length);let z;if(u>=1)z=new _a($,T.x,T.y,Su,Qi),z.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=z;else{z=new _a($,T.x,T.y,Ai,Xs),this.material.uniforms.covariancesTexture.value=z;const k=new _a(new Uint32Array(32),2,2,Su,Qi);k.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=k,k.needsUpdate=!0}z.needsUpdate=!0,this.material.uniforms.covariancesAreHalfFloat.value=u>=1?1:0,this.material.uniforms.covariancesTextureSize.value.copy(T),this.splatDataTextures.covariances={data:$,texture:z,size:T,compressionLevel:u,elementsPerTexelStored:C,elementsPerTexelAllocated:X}}else{const C=s(yg,6);let T=Float32Array,O=Xs;const X=new T(C.x*C.y*yg);oi.updateScaleRotationsPaddedData(0,n-1,m,g,X);const $=new _a(X,C.x,C.y,Ai,O);$.needsUpdate=!0,this.material.uniforms.scaleRotationsTexture.value=$,this.material.uniforms.scaleRotationsTextureSize.value.copy(C),this.splatDataTextures.scaleRotations={data:X,texture:$,size:C,compressionLevel:f}}if(_){const B=d===2?Or:tc;let C=S;C%2!==0&&C++;const T=4,O=Ai;let X=s(T,C);if(X.x*X.y<=mM){const $=X.x*X.y*T,z=new y($);for(let I=0;I<n;I++){const Y=S*I,q=C*I;for(let J=0;J<S;J++)z[q+J]=_[Y+J]}const k=new _a(z,X.x,X.y,O,B);k.needsUpdate=!0,this.material.uniforms.sphericalHarmonicsTexture.value=k,this.splatDataTextures.sphericalHarmonics={componentCount:S,paddedComponentCount:C,data:z,textureCount:1,texture:k,size:X,compressionLevel:d,elementsPerTexel:T}}else{const $=S/3;C=$,C%2!==0&&C++,X=s(T,C);const z=X.x*X.y*T,k=[this.material.uniforms.sphericalHarmonicsTextureR,this.material.uniforms.sphericalHarmonicsTextureG,this.material.uniforms.sphericalHarmonicsTextureB],I=[],Y=[];for(let q=0;q<3;q++){const J=new y(z);I.push(J);for(let ee=0;ee<n;ee++){const ce=S*ee,ie=C*ee;if($>=3){for(let j=0;j<3;j++)J[ie+j]=_[ce+q*3+j];if($>=8)for(let j=0;j<5;j++)J[ie+3+j]=_[ce+9+q*5+j]}}const F=new _a(J,X.x,X.y,O,B);Y.push(F),F.needsUpdate=!0,k[q].value=F}this.material.uniforms.sphericalHarmonicsMultiTextureMode.value=1,this.splatDataTextures.sphericalHarmonics={componentCount:S,componentCountPerChannel:$,paddedComponentCount:C,data:I,textureCount:3,textures:Y,size:X,compressionLevel:d,elementsPerTexel:T}}this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(X),this.material.uniforms.sphericalHarmonics8BitMode.value=d===2?1:0;for(let $=0;$<this.scenes.length;$++){const z=this.scenes[$].splatBuffer;this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[$]=z.minSphericalHarmonicsCoeff,this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[$]=z.maxSphericalHarmonicsCoeff}this.material.uniformsNeedUpdate=!0}const D=s(hM,4),L=new Uint32Array(D.x*D.y*hM);for(let B=0;B<n;B++)L[B]=this.globalSplatIndexToSceneIndexMap[B];const w=new _a(L,D.x,D.y,a_,Qi);w.internalFormat="R32UI",w.needsUpdate=!0,this.material.uniforms.sceneIndexesTexture.value=w,this.material.uniforms.sceneIndexesTextureSize.value.copy(D),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.sceneIndexes={data:L,texture:w,size:D},this.material.uniforms.sceneCount.value=this.scenes.length}updateBaseDataFromSplatBuffers(t,n){const s=this.splatDataTextures.covariances,o=s?s.compressionLevel:void 0,c=this.splatDataTextures.scaleRotations,u=c?c.compressionLevel:void 0,f=this.splatDataTextures.sphericalHarmonics,d=f?f.compressionLevel:0;this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,this.splatDataTextures.baseData.sphericalHarmonics,void 0,o,u,d,t,n,t)}updateDataTexturesFromBaseData(t,n){const s=this.splatDataTextures.covariances,o=s?s.compressionLevel:void 0,c=this.splatDataTextures.scaleRotations,u=c?c.compressionLevel:void 0,f=this.splatDataTextures.sphericalHarmonics,d=f?f.compressionLevel:0,p=this.splatDataTextures.centerColors,m=p.data,g=p.texture;oi.updateCenterColorsPaddedData(t,n,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,m);const v=this.renderer?this.renderer.properties.get(g):null;if(!v||!v.__webglTexture?g.needsUpdate=!0:this.updateDataTexture(m,p.texture,p.size,v,Mg,wU,4,t,n),s){const E=s.texture,R=t*Cd,D=n*Cd;if(o===0)for(let w=R;w<=D;w++){const B=this.splatDataTextures.baseData.covariances[w];s.data[w]=B}else oi.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,s.data,t*s.elementsPerTexelAllocated,R,D);const L=this.renderer?this.renderer.properties.get(E):null;!L||!L.__webglTexture?E.needsUpdate=!0:o===0?this.updateDataTexture(s.data,s.texture,s.size,L,s.elementsPerTexelStored,Cd,4,t,n):this.updateDataTexture(s.data,s.texture,s.size,L,s.elementsPerTexelAllocated,s.elementsPerTexelAllocated,2,t,n)}if(c){const E=c.data,R=c.texture,D=6,L=u===0?4:2;oi.updateScaleRotationsPaddedData(t,n,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,E);const w=this.renderer?this.renderer.properties.get(R):null;!w||!w.__webglTexture?R.needsUpdate=!0:this.updateDataTexture(E,c.texture,c.size,w,yg,D,L,t,n)}const A=this.splatDataTextures.baseData.sphericalHarmonics;if(A){let E=4;d===1?E=2:d===2&&(E=1);const R=(w,B,C,T,O)=>{const X=this.renderer?this.renderer.properties.get(w):null;!X||!X.__webglTexture?w.needsUpdate=!0:this.updateDataTexture(T,w,B,X,C,O,E,t,n)},D=f.componentCount,L=f.paddedComponentCount;if(f.textureCount===1){const w=f.data;for(let B=t;B<=n;B++){const C=D*B,T=L*B;for(let O=0;O<D;O++)w[T+O]=A[C+O]}R(f.texture,f.size,f.elementsPerTexel,w,L)}else{const w=f.componentCountPerChannel;for(let B=0;B<3;B++){const C=f.data[B];for(let T=t;T<=n;T++){const O=D*T,X=L*T;if(w>=3){for(let $=0;$<3;$++)C[X+$]=A[O+B*3+$];if(w>=8)for(let $=0;$<5;$++)C[X+3+$]=A[O+9+B*5+$]}}R(f.textures[B],f.size,f.elementsPerTexel,C,L)}}}const y=this.splatDataTextures.sceneIndexes,S=y.data;for(let E=this.lastBuildSplatCount;E<=n;E++)S[E]=this.globalSplatIndexToSceneIndexMap[E];const _=y.texture,b=this.renderer?this.renderer.properties.get(_):null;!b||!b.__webglTexture?_.needsUpdate=!0:this.updateDataTexture(S,y.texture,y.size,b,1,1,1,this.lastBuildSplatCount,n)}getTargetCovarianceCompressionLevel(){return this.halfPrecisionCovariancesOnGPU?1:0}getTargetSphericalHarmonicsCompressionLevel(){return Math.max(1,this.getMaximumSplatBufferCompressionLevel())}getMaximumSplatBufferCompressionLevel(){let t;for(let n=0;n<this.scenes.length;n++){const o=this.getScene(n).splatBuffer;(n===0||o.compressionLevel>t)&&(t=o.compressionLevel)}return t}getMinimumSplatBufferCompressionLevel(){let t;for(let n=0;n<this.scenes.length;n++){const o=this.getScene(n).splatBuffer;(n===0||o.compressionLevel<t)&&(t=o.compressionLevel)}return t}static computeTextureUpdateRegion(t,n,s,o,c){const u=c/o,f=t*u,d=Math.floor(f/s),p=d*s*o,m=n*u,g=Math.floor(m/s),v=g*s*o+s*o;return{dataStart:p,dataEnd:v,startRow:d,endRow:g}}updateDataTexture(t,n,s,o,c,u,f,d,p){const m=this.renderer.getContext(),g=oi.computeTextureUpdateRegion(d,p,s.x,c,u),v=g.dataEnd-g.dataStart,A=new t.constructor(t.buffer,g.dataStart*f,v),y=g.endRow-g.startRow+1,S=this.webGLUtils.convert(n.type),_=this.webGLUtils.convert(n.format,n.colorSpace),b=m.getParameter(m.TEXTURE_BINDING_2D);m.bindTexture(m.TEXTURE_2D,o.__webglTexture),m.texSubImage2D(m.TEXTURE_2D,0,0,g.startRow,s.x,y,_,S,A),m.bindTexture(m.TEXTURE_2D,b)}static updatePaddedCompressedCovariancesTextureData(t,n,s,o,c){let u=new DataView(n.buffer),f=s,d=0;for(let p=o;p<=c;p+=2)u.setUint16(f*2,t[p],!0),u.setUint16(f*2+2,t[p+1],!0),f+=2,d++,d>=3&&(f+=2,d=0)}static updateCenterColorsPaddedData(t,n,s,o,c){for(let u=t;u<=n;u++){const f=u*4,d=u*3,p=u*4;c[p]=dP(o,f),c[p+1]=mg(s[d]),c[p+2]=mg(s[d+1]),c[p+3]=mg(s[d+2])}}static updateScaleRotationsPaddedData(t,n,s,o,c){for(let f=t;f<=n;f++){const d=f*3,p=f*4,m=f*6;c[m]=s[d],c[m+1]=s[d+1],c[m+2]=s[d+2],c[m+3]=o[p],c[m+4]=o[p+1],c[m+5]=o[p+2]}}updateVisibleRegion(t){const n=this.getSplatCount(!0),s=new ne;if(!t){const c=new ne;this.scenes.forEach(u=>{c.add(u.splatBuffer.sceneCenter)}),c.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(c),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}const o=t?this.lastBuildSplatCount:0;for(let c=o;c<n;c++){this.getSplatCenter(c,s,!0);const u=s.sub(this.calculatedSceneCenter).length();u>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=u)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>pM&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-pM,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(t=Eu.Default){const n=IU*this.sceneFadeInRateMultiplier,s=BU*this.sceneFadeInRateMultiplier,o=this.finalBuild?n:s,c=t===Eu.Default?o:s;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*c+this.visibleRegionFadeStartRadius;const f=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,d=f||t===Eu.Instant?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=d,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!f}updateRenderIndexes(t,n){const s=this.geometry;s.attributes.splatIndex.set(t),s.attributes.splatIndex.needsUpdate=!0,n>0&&this.firstRenderTime===-1&&(this.firstRenderTime=performance.now()),s.instanceCount=n,s.setDrawRange(0,n)}updateTransforms(){for(let t=0;t<this.scenes.length;t++)this.getScene(t).updateTransform(this.dynamicMode)}setSplatScale(t=1){this.splatScale=t,this.material.uniforms.splatScale.value=t,this.material.uniformsNeedUpdate=!0}getSplatScale(){return this.splatScale}setPointCloudModeEnabled(t){this.pointCloudModeEnabled=t,this.material.uniforms.pointCloudModeEnabled.value=t?1:0,this.material.uniformsNeedUpdate=!0}getPointCloudModeEnabled(){return this.pointCloudModeEnabled}getSplatDataTextures(){return this.splatDataTextures}getSplatCount(t=!1){return t?oi.getTotalSplatCountForScenes(this.scenes):this.lastBuildSplatCount}static getTotalSplatCountForScenes(t){let n=0;for(let s of t)s&&s.splatBuffer&&(n+=s.splatBuffer.getSplatCount());return n}static getTotalSplatCountForSplatBuffers(t){let n=0;for(let s of t)n+=s.getSplatCount();return n}getMaxSplatCount(){return oi.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(t){let n=0;for(let s of t)s&&s.splatBuffer&&(n+=s.splatBuffer.getMaxSplatCount());return n}static getTotalMaxSplatCountForSplatBuffers(t){let n=0;for(let s of t)n+=s.getMaxSplatCount();return n}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const t=this.renderer.getContext();this.distancesTransformFeedback.vao&&(t.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(t.deleteProgram(this.distancesTransformFeedback.program),t.deleteShader(this.distancesTransformFeedback.vertexShader),t.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(t.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const t=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,t.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(t.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(t){if(t!==this.renderer){this.renderer=t;const n=this.renderer.getContext(),s=new bU(n),o=new CU(n,s,{});if(s.init(o),this.webGLUtils=new JE(n,s,o),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0){this.setupDistancesComputationTransformFeedback();const{centers:c,sceneIndexes:u}=this.getDataForDistancesComputation(0,this.getSplatCount()-1);this.refreshGPUBuffersForDistancesComputation(c,u)}}}updateGPUCentersBufferForDistancesComputation(t,n,s){if(!this.renderer)return;const o=this.renderer.getContext(),c=o.getParameter(o.VERTEX_ARRAY_BINDING);o.bindVertexArray(this.distancesTransformFeedback.vao);const u=this.integerBasedDistancesComputation?Uint32Array:Float32Array,f=16,d=s*f;if(o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),t)o.bufferSubData(o.ARRAY_BUFFER,d,n);else{const p=new u(this.getMaxSplatCount()*f);p.set(n),o.bufferData(o.ARRAY_BUFFER,p,o.STATIC_DRAW)}o.bindBuffer(o.ARRAY_BUFFER,null),c&&o.bindVertexArray(c)}updateGPUTransformIndexesBufferForDistancesComputation(t,n,s){if(!this.renderer||!this.dynamicMode)return;const o=this.renderer.getContext(),c=o.getParameter(o.VERTEX_ARRAY_BINDING);o.bindVertexArray(this.distancesTransformFeedback.vao);const u=s*4;if(o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),t)o.bufferSubData(o.ARRAY_BUFFER,u,n);else{const f=new Uint32Array(this.getMaxSplatCount()*4);f.set(n),o.bufferData(o.ARRAY_BUFFER,f,o.STATIC_DRAW)}o.bindBuffer(o.ARRAY_BUFFER,null),c&&o.bindVertexArray(c)}getSceneIndexes(t,n){let s;const o=n-t+1;s=new Uint32Array(o);for(let c=t;c<=n;c++)s[c]=this.globalSplatIndexToSceneIndexMap[c];return s}getLocalSplatParameters(t,n,s){s==null&&(s=!this.dynamicMode),n.splatBuffer=this.getSplatBufferForSplat(t),n.localIndex=this.getSplatLocalIndex(t),n.sceneTransform=s?this.getSceneTransformForSplat(t):null}fillSplatDataArrays(t,n,s,o,c,u,f,d=0,p=0,m=1,g,v,A=0,y){const S=new ne;S.x=void 0,S.y=void 0,this.splatRenderMode===Lr.ThreeD?S.z=void 0:S.z=1;const _=new Bt;let b=0,E=this.scenes.length-1;y!=null&&y>=0&&y<=this.scenes.length&&(b=y,E=y);for(let R=b;R<=E;R++){f==null&&(f=!this.dynamicMode);const D=this.getScene(R),L=D.splatBuffer;let w;if(f&&(this.getSceneTransform(R,_),w=_),t&&L.fillSplatCovarianceArray(t,w,g,v,A,d),n||s){if(!n||!s)throw new Error('SplatMesh::fillSplatDataArrays() -> "scales" and "rotations" must both be valid.');L.fillSplatScaleRotationArray(n,s,w,g,v,A,p,S)}o&&L.fillSplatCenterArray(o,w,g,v,A),c&&L.fillSplatColorArray(c,D.minimumAlpha,g,v,A),u&&L.fillSphericalHarmonicsArray(u,this.minSphericalHarmonicsDegree,w,g,v,A,m),A+=L.getSplatCount()}}getIntegerCenters(t,n,s=!1){const o=n-t+1,c=new Float32Array(o*3);this.fillSplatDataArrays(null,null,null,c,null,null,void 0,void 0,void 0,void 0,t);let u,f=s?4:3;u=new Int32Array(o*f);for(let d=0;d<o;d++){for(let p=0;p<3;p++)u[d*f+p]=Math.round(c[d*3+p]*1e3);s&&(u[d*f+3]=1e3)}return u}getFloatCenters(t,n,s=!1){const o=n-t+1,c=new Float32Array(o*3);if(this.fillSplatDataArrays(null,null,null,c,null,null,void 0,void 0,void 0,void 0,t),!s)return c;let u=new Float32Array(o*4);for(let f=0;f<o;f++){for(let d=0;d<3;d++)u[f*4+d]=c[f*3+d];u[f*4+3]=1}return u}getSceneTransform(t,n){const s=this.getScene(t);s.updateTransform(this.dynamicMode),n.copy(s.transform)}getScene(t){if(t<0||t>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[t]}getSceneCount(){return this.scenes.length}getSplatBufferForSplat(t){return this.getScene(this.globalSplatIndexToSceneIndexMap[t]).splatBuffer}getSceneIndexForSplat(t){return this.globalSplatIndexToSceneIndexMap[t]}getSceneTransformForSplat(t){return this.getScene(this.globalSplatIndexToSceneIndexMap[t]).transform}getSplatLocalIndex(t){return this.globalSplatIndexToLocalSplatIndexMap[t]}static getIntegerMatrixArray(t){const n=t.elements,s=[];for(let o=0;o<16;o++)s[o]=Math.round(n[o]*1e3);return s}computeBoundingBox(t=!1,n){let s=this.getSplatCount();if(n!=null){if(n<0||n>=this.scenes.length)throw new Error("SplatMesh::computeBoundingBox() -> Invalid scene index.");s=this.scenes[n].splatBuffer.getSplatCount()}const o=new Float32Array(s*3);this.fillSplatDataArrays(null,null,null,o,null,null,t,void 0,void 0,void 0,void 0,n);const c=new ne,u=new ne;for(let f=0;f<s;f++){const d=f*3,p=o[d],m=o[d+1],g=o[d+2];(f===0||p<c.x)&&(c.x=p),(f===0||m<c.y)&&(c.y=m),(f===0||g<c.z)&&(c.z=g),(f===0||p>u.x)&&(u.x=p),(f===0||m>u.y)&&(u.y=m),(f===0||g>u.z)&&(u.z=g)}return new qs(c,u)}}var FU="AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEbA2AAAGAQf39/f39/f39/f39/f39/fwBgAAF/AhIBA2VudgZtZW1vcnkCAwCAgAQDBAMAAQIHVAQRX193YXNtX2NhbGxfY3RvcnMAABhfX3dhc21fYXBwbHlfZGF0YV9yZWxvY3MAAAtzb3J0SW5kZXhlcwABE2Vtc2NyaXB0ZW5fdGxzX2luaXQAAgqWEAMDAAELihAEAXwDewN/A30gCyAKayEMAkACQCAOBEAgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQMgDCEBA0AgAyABQQJ0IgVqIAIgACAFaigCAEECdGooAgAiBTYCACAFIAogBSAKSBshCiAFIA0gBSANShshDSABQQFqIgEgC0cNAAsMAwsgDwRAIAsgDE0NAkF/IQ9B+P///wchCkGIgICAeCENIAwhAgNAIA8gByAAIAJBAnQiFWooAgAiFkECdGooAgAiFEcEQAJ/IAX9CQI4IAggFEEGdGoiDv0JAgwgDioCHP0gASAOKgIs/SACIA4qAjz9IAP95gEgBf0JAiggDv0JAgggDioCGP0gASAOKgIo/SACIA4qAjj9IAP95gEgBf0JAgggDv0JAgAgDioCEP0gASAOKgIg/SACIA4qAjD9IAP95gEgBf0JAhggDv0JAgQgDioCFP0gASAOKgIk/SACIA4qAjT9IAP95gH95AH95AH95AEiEf1f/QwAAAAAAECPQAAAAAAAQI9AIhL98gEiE/0hASIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshDgJ/IBP9IQAiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgL/REgDv0cAQJ/IBEgEf0NCAkKCwwNDg8AAAAAAAAAAP1fIBL98gEiEf0hACIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAv9HAICfyAR/SEBIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4C/0cAyESIBQhDwsgAyAVaiABIBZBBHRq/QAAACAS/bUBIhH9GwAgEf0bAWogEf0bAmogEf0bA2oiDjYCACAOIAogCiAOShshCiAOIA0gDSAOSBshDSACQQFqIgIgC0cNAAsMAwsCfyAFKgIIu/0UIAUqAhi7/SIB/QwAAAAAAECPQAAAAAAAQI9A/fIBIhH9IQEiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIQ4CfyAR/SEAIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyECAn8gBSoCKLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEFQfj///8HIQpBiICAgHghDSALIAxNDQIgAv0RIA79HAEgBf0cAiESIAwhBQNAIAMgBUECdCICaiABIAAgAmooAgBBBHRq/QAAACAS/bUBIhH9GwAgEf0bAWogEf0bAmoiAjYCACACIAogAiAKSBshCiACIA0gAiANShshDSAFQQFqIgUgC0cNAAsMAgsgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQIgDCEBA0AgAyABQQJ0IgVqAn8gAiAAIAVqKAIAQQJ0aioCALtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIONgIAIAogDiAKIA5IGyEKIA0gDiANIA5KGyENIAFBAWoiASALRw0ACwwCCyAPRQRAIAsgDE0NASAFKgIoIRcgBSoCGCEYIAUqAgghGUH4////ByEKQYiAgIB4IQ0gDCEFA0ACfyAXIAEgACAFQQJ0IgdqKAIAQQR0aiICKgIIlCAZIAIqAgCUIBggAioCBJSSkrtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEOIAMgB2ogDjYCACAKIA4gCiAOSBshCiANIA4gDSAOShshDSAFQQFqIgUgC0cNAAsMAgsgCyAMTQ0AQX8hD0H4////ByEKQYiAgIB4IQ0gDCECA0AgDyAHIAAgAkECdCIUaigCAEECdCIVaigCACIORwRAIAX9CQI4IAggDkEGdGoiD/0JAgwgDyoCHP0gASAPKgIs/SACIA8qAjz9IAP95gEgBf0JAiggD/0JAgggDyoCGP0gASAPKgIo/SACIA8qAjj9IAP95gEgBf0JAgggD/0JAgAgDyoCEP0gASAPKgIg/SACIA8qAjD9IAP95gEgBf0JAhggD/0JAgQgDyoCFP0gASAPKgIk/SACIA8qAjT9IAP95gH95AH95AH95AEhESAOIQ8LIAMgFGoCfyAR/R8DIAEgFUECdCIOQQxyaioCAJQgEf0fAiABIA5BCHJqKgIAlCAR/R8AIAEgDmoqAgCUIBH9HwEgASAOQQRyaioCAJSSkpK7RAAAAAAAALBAoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAsiDjYCACAKIA4gCiAOSBshCiANIA4gDSAOShshDSACQQFqIgIgC0cNAAsMAQtBiICAgHghDUH4////ByEKCyALIAxLBEAgCUEBa7MgDbIgCrKTlSEXIAwhDQNAAn8gFyADIA1BAnRqIgEoAgAgCmuylCIYi0MAAABPXQRAIBioDAELQYCAgIB4CyEOIAEgDjYCACAEIA5BAnRqIgEgASgCAEEBajYCACANQQFqIg0gC0cNAAsLIAlBAk8EQCAEKAIAIQ1BASEKA0AgBCAKQQJ0aiIBIAEoAgAgDWoiDTYCACAKQQFqIgogCUcNAAsLIAxBAEoEQCAMIQoDQCAGIApBAWsiAUECdCICaiAAIAJqKAIANgIAIApBAUshAiABIQogAg0ACwsgCyAMSgRAIAshCgNAIAYgCyAEIAMgCkEBayIKQQJ0IgFqKAIAQQJ0aiICKAIAIgVrQQJ0aiAAIAFqKAIANgIAIAIgBUEBazYCACAKIAxKDQALCwsEAEEACw==",gM="AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEXAmAAAGAQf39/f39/f39/f39/f39/fwACEgEDZW52Bm1lbW9yeQIDAICABAMDAgABBz4DEV9fd2FzbV9jYWxsX2N0b3JzAAAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAALc29ydEluZGV4ZXMAAQqiDwICAAucDwMBfAd9Bn8gCyAKayEMAkACQCAOBEAgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQMgDCEFA0AgAyAFQQJ0IgFqIAIgACABaigCAEECdGooAgAiATYCACABIAogASAKSBshCiABIA0gASANShshDSAFQQFqIgUgC0cNAAsMAwsgDwRAIAsgDE0NAkF/IQ9B+P///wchCkGIgICAeCENIAwhAgNAIA8gByAAIAJBAnQiGmooAgBBAnQiG2ooAgAiDkcEQAJ/IAUqAjgiESAIIA5BBnRqIg8qAjyUIAUqAigiEiAPKgI4lCAFKgIIIhMgDyoCMJQgBSoCGCIUIA8qAjSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRgCfyARIA8qAiyUIBIgDyoCKJQgEyAPKgIglCAUIA8qAiSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRkCfyARIA8qAhyUIBIgDyoCGJQgEyAPKgIQlCAUIA8qAhSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRwCfyARIA8qAgyUIBIgDyoCCJQgEyAPKgIAlCAUIA8qAgSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIR0gDiEPCyADIBpqIAEgG0ECdGoiDigCBCAcbCAOKAIAIB1saiAOKAIIIBlsaiAOKAIMIBhsaiIONgIAIA4gCiAKIA5KGyEKIA4gDSANIA5IGyENIAJBAWoiAiALRw0ACwwDCwJ/IAUqAii7RAAAAAAAQI9AoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshAgJ/IAUqAhi7RAAAAAAAQI9AoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshByALIAxNAn8gBSoCCLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEPQfj///8HIQpBiICAgHghDQ0CIAwhBQNAIAMgBUECdCIIaiABIAAgCGooAgBBBHRqIggoAgQgB2wgCCgCACAPbGogCCgCCCACbGoiCDYCACAIIAogCCAKSBshCiAIIA0gCCANShshDSAFQQFqIgUgC0cNAAsMAgsgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQIgDCEFA0AgAyAFQQJ0IgFqAn8gAiAAIAFqKAIAQQJ0aioCALtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIONgIAIAogDiAKIA5IGyEKIA0gDiANIA5KGyENIAVBAWoiBSALRw0ACwwCCyAPRQRAIAsgDE0NASAFKgIoIREgBSoCGCESIAUqAgghE0H4////ByEKQYiAgIB4IQ0gDCEFA0ACfyARIAEgACAFQQJ0IgdqKAIAQQR0aiICKgIIlCATIAIqAgCUIBIgAioCBJSSkrtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEOIAMgB2ogDjYCACAKIA4gCiAOSBshCiANIA4gDSAOShshDSAFQQFqIgUgC0cNAAsMAgsgCyAMTQ0AQX8hD0H4////ByEKQYiAgIB4IQ0gDCECA0AgDyAHIAAgAkECdCIYaigCAEECdCIZaigCACIORwRAIAUqAjgiESAIIA5BBnRqIg8qAjyUIAUqAigiEiAPKgI4lCAFKgIIIhMgDyoCMJQgBSoCGCIUIA8qAjSUkpKSIRUgESAPKgIslCASIA8qAiiUIBMgDyoCIJQgFCAPKgIklJKSkiEWIBEgDyoCHJQgEiAPKgIYlCATIA8qAhCUIBQgDyoCFJSSkpIhFyARIA8qAgyUIBIgDyoCCJQgEyAPKgIAlCAUIA8qAgSUkpKSIREgDiEPCyADIBhqAn8gFSABIBlBAnRqIg4qAgyUIBYgDioCCJQgESAOKgIAlCAXIA4qAgSUkpKSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIg42AgAgCiAOIAogDkgbIQogDSAOIA0gDkobIQ0gAkEBaiICIAtHDQALDAELQYiAgIB4IQ1B+P///wchCgsgCyAMSwRAIAlBAWuzIA2yIAqyk5UhESAMIQ0DQAJ/IBEgAyANQQJ0aiIBKAIAIAprspQiEotDAAAAT10EQCASqAwBC0GAgICAeAshDiABIA42AgAgBCAOQQJ0aiIBIAEoAgBBAWo2AgAgDUEBaiINIAtHDQALCyAJQQJPBEAgBCgCACENQQEhCgNAIAQgCkECdGoiASABKAIAIA1qIg02AgAgCkEBaiIKIAlHDQALCyAMQQBKBEAgDCEKA0AgBiAKQQFrIgFBAnQiAmogACACaigCADYCACAKQQFLIAEhCg0ACwsgCyAMSgRAIAshCgNAIAYgCyAEIAMgCkEBayIKQQJ0IgFqKAIAQQJ0aiICKAIAIgVrQQJ0aiAAIAFqKAIANgIAIAIgBUEBazYCACAKIAxKDQALCws=",NU="AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEXAmAAAGAQf39/f39/f39/f39/f39/fwACDwEDZW52Bm1lbW9yeQIAAAMDAgABBz4DEV9fd2FzbV9jYWxsX2N0b3JzAAAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAALc29ydEluZGV4ZXMAAQrrDwICAAvlDwQBfAN7B30DfyALIAprIQwCQAJAIA4EQCANBEBB+P///wchCkGIgICAeCENIAsgDE0NAyAMIQUDQCADIAVBAnQiAWogAiAAIAFqKAIAQQJ0aigCACIBNgIAIAEgCiABIApIGyEKIAEgDSABIA1KGyENIAVBAWoiBSALRw0ACwwDCyAPBEAgCyAMTQ0CQX8hD0H4////ByEKQYiAgIB4IQ0gDCECA0AgDyAHIAAgAkECdCIcaigCACIdQQJ0aigCACIbRwRAAn8gBf0JAjggCCAbQQZ0aiIO/QkCDCAOKgIc/SABIA4qAiz9IAIgDioCPP0gA/3mASAF/QkCKCAO/QkCCCAOKgIY/SABIA4qAij9IAIgDioCOP0gA/3mASAF/QkCCCAO/QkCACAOKgIQ/SABIA4qAiD9IAIgDioCMP0gA/3mASAF/QkCGCAO/QkCBCAOKgIU/SABIA4qAiT9IAIgDioCNP0gA/3mAf3kAf3kAf3kASIR/V/9DAAAAAAAQI9AAAAAAABAj0AiEv3yASIT/SEBIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEOAn8gE/0hACIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAv9ESAO/RwBAn8gESAR/Q0ICQoLDA0ODwABAgMAAQID/V8gEv3yASIR/SEAIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4C/0cAgJ/IBH9IQEiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgL/RwDIRIgGyEPCyADIBxqIAEgHUEEdGr9AAAAIBL9tQEiEf0bACAR/RsBaiAR/RsCaiAR/RsDaiIONgIAIA4gCiAKIA5KGyEKIA4gDSANIA5IGyENIAJBAWoiAiALRw0ACwwDCwJ/IAUqAgi7/RQgBSoCGLv9IgH9DAAAAAAAQI9AAAAAAABAj0D98gEiEf0hASIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshDgJ/IBH9IQAiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLAn8gBSoCKLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEFQfj///8HIQpBiICAgHghDSALIAxNDQL9ESAO/RwBIAX9HAIhEiAMIQUDQCADIAVBAnQiAmogASAAIAJqKAIAQQR0av0AAAAgEv21ASIR/RsAIBH9GwFqIBH9GwJqIgI2AgAgAiAKIAIgCkgbIQogAiANIAIgDUobIQ0gBUEBaiIFIAtHDQALDAILIA0EQEH4////ByEKQYiAgIB4IQ0gCyAMTQ0CIAwhBQNAIAMgBUECdCIBagJ/IAIgACABaigCAEECdGoqAgC7RAAAAAAAALBAoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAsiDjYCACAKIA4gCiAOSBshCiANIA4gDSAOShshDSAFQQFqIgUgC0cNAAsMAgsgD0UEQCALIAxNDQEgBSoCKCEUIAUqAhghFSAFKgIIIRZB+P///wchCkGIgICAeCENIAwhBQNAAn8gFCABIAAgBUECdCIHaigCAEEEdGoiAioCCJQgFiACKgIAlCAVIAIqAgSUkpK7RAAAAAAAALBAoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshDiADIAdqIA42AgAgCiAOIAogDkgbIQogDSAOIA0gDkobIQ0gBUEBaiIFIAtHDQALDAILIAsgDE0NAEF/IQ9B+P///wchCkGIgICAeCENIAwhAgNAIA8gByAAIAJBAnQiG2ooAgBBAnQiHGooAgAiDkcEQCAFKgI4IhQgCCAOQQZ0aiIPKgI8lCAFKgIoIhUgDyoCOJQgBSoCCCIWIA8qAjCUIAUqAhgiFyAPKgI0lJKSkiEYIBQgDyoCLJQgFSAPKgIolCAWIA8qAiCUIBcgDyoCJJSSkpIhGSAUIA8qAhyUIBUgDyoCGJQgFiAPKgIQlCAXIA8qAhSUkpKSIRogFCAPKgIMlCAVIA8qAgiUIBYgDyoCAJQgFyAPKgIElJKSkiEUIA4hDwsgAyAbagJ/IBggASAcQQJ0aiIOKgIMlCAZIA4qAgiUIBQgDioCAJQgGiAOKgIElJKSkrtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIONgIAIAogDiAKIA5IGyEKIA0gDiANIA5KGyENIAJBAWoiAiALRw0ACwwBC0GIgICAeCENQfj///8HIQoLIAsgDEsEQCAJQQFrsyANsiAKspOVIRQgDCENA0ACfyAUIAMgDUECdGoiASgCACAKa7KUIhWLQwAAAE9dBEAgFagMAQtBgICAgHgLIQ4gASAONgIAIAQgDkECdGoiASABKAIAQQFqNgIAIA1BAWoiDSALRw0ACwsgCUECTwRAIAQoAgAhDUEBIQoDQCAEIApBAnRqIgEgASgCACANaiINNgIAIApBAWoiCiAJRw0ACwsgDEEASgRAIAwhCgNAIAYgCkEBayIBQQJ0IgJqIAAgAmooAgA2AgAgCkEBSyABIQoNAAsLIAsgDEoEQCALIQoDQCAGIAsgBCADIApBAWsiCkECdCIBaigCAEECdGoiAigCACIFa0ECdGogACABaigCADYCACACIAVBAWs2AgAgCiAMSg0ACwsL",OU="AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEXAmAAAGAQf39/f39/f39/f39/f39/fwACDwEDZW52Bm1lbW9yeQIAAAMDAgABBz4DEV9fd2FzbV9jYWxsX2N0b3JzAAAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAALc29ydEluZGV4ZXMAAQqiDwICAAucDwMBfAd9Bn8gCyAKayEMAkACQCAOBEAgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQMgDCEFA0AgAyAFQQJ0IgFqIAIgACABaigCAEECdGooAgAiATYCACABIAogASAKSBshCiABIA0gASANShshDSAFQQFqIgUgC0cNAAsMAwsgDwRAIAsgDE0NAkF/IQ9B+P///wchCkGIgICAeCENIAwhAgNAIA8gByAAIAJBAnQiGmooAgBBAnQiG2ooAgAiDkcEQAJ/IAUqAjgiESAIIA5BBnRqIg8qAjyUIAUqAigiEiAPKgI4lCAFKgIIIhMgDyoCMJQgBSoCGCIUIA8qAjSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRgCfyARIA8qAiyUIBIgDyoCKJQgEyAPKgIglCAUIA8qAiSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRkCfyARIA8qAhyUIBIgDyoCGJQgEyAPKgIQlCAUIA8qAhSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIRwCfyARIA8qAgyUIBIgDyoCCJQgEyAPKgIAlCAUIA8qAgSUkpKSu0QAAAAAAECPQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIR0gDiEPCyADIBpqIAEgG0ECdGoiDigCBCAcbCAOKAIAIB1saiAOKAIIIBlsaiAOKAIMIBhsaiIONgIAIA4gCiAKIA5KGyEKIA4gDSANIA5IGyENIAJBAWoiAiALRw0ACwwDCwJ/IAUqAii7RAAAAAAAQI9AoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshAgJ/IAUqAhi7RAAAAAAAQI9AoiIQmUQAAAAAAADgQWMEQCAQqgwBC0GAgICAeAshByALIAxNAn8gBSoCCLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEPQfj///8HIQpBiICAgHghDQ0CIAwhBQNAIAMgBUECdCIIaiABIAAgCGooAgBBBHRqIggoAgQgB2wgCCgCACAPbGogCCgCCCACbGoiCDYCACAIIAogCCAKSBshCiAIIA0gCCANShshDSAFQQFqIgUgC0cNAAsMAgsgDQRAQfj///8HIQpBiICAgHghDSALIAxNDQIgDCEFA0AgAyAFQQJ0IgFqAn8gAiAAIAFqKAIAQQJ0aioCALtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIONgIAIAogDiAKIA5IGyEKIA0gDiANIA5KGyENIAVBAWoiBSALRw0ACwwCCyAPRQRAIAsgDE0NASAFKgIoIREgBSoCGCESIAUqAgghE0H4////ByEKQYiAgIB4IQ0gDCEFA0ACfyARIAEgACAFQQJ0IgdqKAIAQQR0aiICKgIIlCATIAIqAgCUIBIgAioCBJSSkrtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEOIAMgB2ogDjYCACAKIA4gCiAOSBshCiANIA4gDSAOShshDSAFQQFqIgUgC0cNAAsMAgsgCyAMTQ0AQX8hD0H4////ByEKQYiAgIB4IQ0gDCECA0AgDyAHIAAgAkECdCIYaigCAEECdCIZaigCACIORwRAIAUqAjgiESAIIA5BBnRqIg8qAjyUIAUqAigiEiAPKgI4lCAFKgIIIhMgDyoCMJQgBSoCGCIUIA8qAjSUkpKSIRUgESAPKgIslCASIA8qAiiUIBMgDyoCIJQgFCAPKgIklJKSkiEWIBEgDyoCHJQgEiAPKgIYlCATIA8qAhCUIBQgDyoCFJSSkpIhFyARIA8qAgyUIBIgDyoCCJQgEyAPKgIAlCAUIA8qAgSUkpKSIREgDiEPCyADIBhqAn8gFSABIBlBAnRqIg4qAgyUIBYgDioCCJQgESAOKgIAlCAXIA4qAgSUkpKSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIg42AgAgCiAOIAogDkgbIQogDSAOIA0gDkobIQ0gAkEBaiICIAtHDQALDAELQYiAgIB4IQ1B+P///wchCgsgCyAMSwRAIAlBAWuzIA2yIAqyk5UhESAMIQ0DQAJ/IBEgAyANQQJ0aiIBKAIAIAprspQiEotDAAAAT10EQCASqAwBC0GAgICAeAshDiABIA42AgAgBCAOQQJ0aiIBIAEoAgBBAWo2AgAgDUEBaiINIAtHDQALCyAJQQJPBEAgBCgCACENQQEhCgNAIAQgCkECdGoiASABKAIAIA1qIg02AgAgCkEBaiIKIAlHDQALCyAMQQBKBEAgDCEKA0AgBiAKQQFrIgFBAnQiAmogACACaigCADYCACAKQQFLIAEhCg0ACwsgCyAMSgRAIAshCgNAIAYgCyAEIAMgCkEBayIKQQJ0IgFqKAIAQQJ0aiICKAIAIgVrQQJ0aiAAIAFqKAIANgIAIAIgBUEBazYCACAKIAxKDQALCws=";function zU(r){let e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S,_,b,E,R;function D(L,w,B,C,T,O,X){const $=performance.now();if(!n&&(new Uint32Array(t,u,T.byteLength/R.BytesPerInt).set(T),new Float32Array(t,p,X.byteLength/R.BytesPerFloat).set(X),C)){let q;s?q=new Int32Array(t,m,O.byteLength/R.BytesPerInt):q=new Float32Array(t,m,O.byteLength/R.BytesPerFloat),q.set(O)}S||(S=new Uint32Array(b)),new Float32Array(t,y,16).set(B),new Uint32Array(t,v,b).set(S),e.exports.sortIndexes(u,A,m,g,v,y,f,d,p,b,L,w,c,C,s,o);const z={sortDone:!0,splatSortCount:L,splatRenderCount:w,sortTime:0};if(!n){const I=new Uint32Array(t,f,w);(!_||_.length<w)&&(_=new Uint32Array(w)),_.set(I),z.sortedIndexes=_}const k=performance.now();z.sortTime=k-$,r.postMessage(z)}r.onmessage=L=>{if(L.data.centers)centers=L.data.centers,sceneIndexes=L.data.sceneIndexes,s?new Int32Array(t,A+L.data.range.from*R.BytesPerInt*4,L.data.range.count*4).set(new Int32Array(centers)):new Float32Array(t,A+L.data.range.from*R.BytesPerFloat*4,L.data.range.count*4).set(new Float32Array(centers)),o&&new Uint32Array(t,d+L.data.range.from*4,L.data.range.count).set(new Uint32Array(sceneIndexes)),E=L.data.range.from+L.data.range.count;else if(L.data.sort){const w=Math.min(L.data.sort.splatRenderCount||0,E),B=Math.min(L.data.sort.splatSortCount||0,E),C=L.data.sort.usePrecomputedDistances;let T,O,X;n||(T=L.data.sort.indexesToSort,X=L.data.sort.transforms,C&&(O=L.data.sort.precomputedDistances)),D(B,w,L.data.sort.modelViewProj,C,T,O,X)}else if(L.data.init){R=L.data.init.Constants,c=L.data.init.splatCount,n=L.data.init.useSharedMemory,s=L.data.init.integerBasedSort,o=L.data.init.dynamicMode,b=L.data.init.distanceMapRange,E=0;const w=s?R.BytesPerInt*4:R.BytesPerFloat*4,B=new Uint8Array(L.data.init.sorterWasmBytes),C=16*R.BytesPerFloat,T=c*R.BytesPerInt,O=c*w,X=C,$=s?c*R.BytesPerInt:c*R.BytesPerFloat,z=c*R.BytesPerInt,k=c*R.BytesPerInt,I=s?b*R.BytesPerInt*2:b*R.BytesPerFloat*2,Y=o?c*R.BytesPerInt:0,q=o?R.MaxScenes*C:0,J=R.MemoryPageSize*32,F=T+O+X+$+z+I+k+Y+q+J,ee=Math.floor(F/R.MemoryPageSize)+1,ce={module:{},env:{memory:new WebAssembly.Memory({initial:ee,maximum:ee,shared:!0})}};WebAssembly.compile(B).then(ie=>WebAssembly.instantiate(ie,ce)).then(ie=>{e=ie,u=0,A=u+T,y=A+O,m=y+X,g=m+$,v=g+z,f=v+I,d=f+k,p=d+Y,t=ce.env.memory.buffer,n?r.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:t,indexesToSortOffset:u,sortedIndexesBuffer:t,sortedIndexesOffset:f,precomputedDistancesBuffer:t,precomputedDistancesOffset:m,transformsBuffer:t,transformsOffset:p}):r.postMessage({sortSetupPhase1Complete:!0})})}}}function HU(r,e,t,n,s,o=Xt.DefaultSplatSortDistanceMapPrecision){const c=new Worker(URL.createObjectURL(new Blob(["(",zU.toString(),")(self)"],{type:"application/javascript"})));let u=FU;const f=p_()?nT():null;!t&&!e?(u=gM,f&&f.major<=16&&f.minor<4&&(u=OU)):t?e||f&&f.major<=16&&f.minor<4&&(u=NU):u=gM;const d=atob(u),p=new Uint8Array(d.length);for(let m=0;m<d.length;m++)p[m]=d.charCodeAt(m);return c.postMessage({init:{sorterWasmBytes:p.buffer,splatCount:r,useSharedMemory:e,integerBasedSort:n,dynamicMode:s,distanceMapRange:1<<o,Constants:{BytesPerFloat:Xt.BytesPerFloat,BytesPerInt:Xt.BytesPerInt,MemoryPageSize:Xt.MemoryPageSize,MaxScenes:Xt.MaxScenes}}}),c}const uo={None:0,VR:1,AR:2};class sc{static createButton(e,t={}){const n=document.createElement("button");function s(){let d=null;async function p(v){v.addEventListener("end",m),await e.xr.setSession(v),n.textContent="EXIT VR",d=v}function m(){d.removeEventListener("end",m),n.textContent="ENTER VR",d=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="ENTER VR";const g={...t,optionalFeatures:["local-floor","bounded-floor","layers",...t.optionalFeatures||[]]};n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){d===null?navigator.xr.requestSession("immersive-vr",g).then(p):(d.end(),navigator.xr.offerSession!==void 0&&navigator.xr.offerSession("immersive-vr",g).then(p).catch(v=>{console.warn(v)}))},navigator.xr.offerSession!==void 0&&navigator.xr.offerSession("immersive-vr",g).then(p).catch(v=>{console.warn(v)})}function o(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function c(){o(),n.textContent="VR NOT SUPPORTED"}function u(d){o(),console.warn("Exception when trying to call xr.isSessionSupported",d),n.textContent="VR NOT ALLOWED"}function f(d){d.style.position="absolute",d.style.bottom="20px",d.style.padding="12px 6px",d.style.border="1px solid #fff",d.style.borderRadius="4px",d.style.background="rgba(0,0,0,0.1)",d.style.color="#fff",d.style.font="normal 13px sans-serif",d.style.textAlign="center",d.style.opacity="0.5",d.style.outline="none",d.style.zIndex="999"}if("xr"in navigator)return n.id="VRButton",n.style.display="none",f(n),navigator.xr.isSessionSupported("immersive-vr").then(function(d){d?s():c(),d&&sc.xrSessionIsGranted&&n.click()}).catch(u),n;{const d=document.createElement("a");return window.isSecureContext===!1?(d.href=document.location.href.replace(/^http:/,"https:"),d.innerHTML="WEBXR NEEDS HTTPS"):(d.href="https://immersiveweb.dev/",d.innerHTML="WEBXR NOT AVAILABLE"),d.style.left="calc(50% - 90px)",d.style.width="180px",d.style.textDecoration="none",f(d),d}}static registerSessionGrantedListener(){if(typeof navigator<"u"&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",()=>{sc.xrSessionIsGranted=!0})}}}sc.xrSessionIsGranted=!1;sc.registerSessionGrantedListener();class GU{static createButton(e,t={}){const n=document.createElement("button");function s(){if(t.domOverlay===void 0){const g=document.createElement("div");g.style.display="none",document.body.appendChild(g);const v=document.createElementNS("http://www.w3.org/2000/svg","svg");v.setAttribute("width",38),v.setAttribute("height",38),v.style.position="absolute",v.style.right="20px",v.style.top="20px",v.addEventListener("click",function(){d.end()}),g.appendChild(v);const A=document.createElementNS("http://www.w3.org/2000/svg","path");A.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),A.setAttribute("stroke","#fff"),A.setAttribute("stroke-width",2),v.appendChild(A),t.optionalFeatures===void 0&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:g}}let d=null;async function p(g){g.addEventListener("end",m),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(g),n.textContent="STOP AR",t.domOverlay.root.style.display="",d=g}function m(){d.removeEventListener("end",m),n.textContent="START AR",t.domOverlay.root.style.display="none",d=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="START AR",n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){d===null?navigator.xr.requestSession("immersive-ar",t).then(p):(d.end(),navigator.xr.offerSession!==void 0&&navigator.xr.offerSession("immersive-ar",t).then(p).catch(g=>{console.warn(g)}))},navigator.xr.offerSession!==void 0&&navigator.xr.offerSession("immersive-ar",t).then(p).catch(g=>{console.warn(g)})}function o(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function c(){o(),n.textContent="AR NOT SUPPORTED"}function u(d){o(),console.warn("Exception when trying to call xr.isSessionSupported",d),n.textContent="AR NOT ALLOWED"}function f(d){d.style.position="absolute",d.style.bottom="20px",d.style.padding="12px 6px",d.style.border="1px solid #fff",d.style.borderRadius="4px",d.style.background="rgba(0,0,0,0.1)",d.style.color="#fff",d.style.font="normal 13px sans-serif",d.style.textAlign="center",d.style.opacity="0.5",d.style.outline="none",d.style.zIndex="999"}if("xr"in navigator)return n.id="ARButton",n.style.display="none",f(n),navigator.xr.isSessionSupported("immersive-ar").then(function(d){d?s():c()}).catch(u),n;{const d=document.createElement("a");return window.isSecureContext===!1?(d.href=document.location.href.replace(/^http:/,"https:"),d.innerHTML="WEBXR NEEDS HTTPS"):(d.href="https://immersiveweb.dev/",d.innerHTML="WEBXR NOT AVAILABLE"),d.style.left="calc(50% - 90px)",d.style.width="180px",d.style.textDecoration="none",f(d),d}}}const Eg={Always:0,Never:2},VU=50,kU=.75,WU=15e5,XU=10,qU=2.5,YU=60;var Us;let $U=(Us=class{constructor(e={}){nt(this,"onKeyDown",function(){const e=new ne,t=new Bt,n=new Bt;return function(s){switch(e.set(0,0,-1),e.transformDirection(this.camera.matrixWorld),t.makeRotationAxis(e,Math.PI/128),n.makeRotationAxis(e,-Math.PI/128),s.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"ArrowLeft":this.camera.up.transformDirection(t);break;case"ArrowRight":this.camera.up.transformDirection(n);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyU":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide();break;case"KeyO":this.usingExternalCamera||this.setOrthographicMode(!this.camera.isOrthographicCamera);break;case"KeyP":this.usingExternalCamera||this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());break;case"Equal":this.usingExternalCamera||this.splatMesh.setSplatScale(this.splatMesh.getSplatScale()+.05);break;case"Minus":this.usingExternalCamera||this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale()-.05,0));break}}}());nt(this,"onMouseUp",function(){const e=new vt;return function(t){e.copy(this.mousePosition).sub(this.mouseDownPosition),bl()-this.mouseDownTime<.5&&e.length()<2&&this.onMouseClick(t)}}());nt(this,"checkForFocalPointChange",function(){const e=new vt,t=new ne,n=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(e),n.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,e),this.raycaster.intersectSplatMesh(this.splatMesh,n),n.length>0)){const o=n[0].origin;t.copy(o).sub(this.camera.position),t.length()>kU&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(o),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=bl())}}}());nt(this,"updateSplatMesh",function(){const e=new vt;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.splatMesh.updateTransforms(),this.getRenderDimensions(e);const n=this.camera.projectionMatrix.elements[0]*.5*this.devicePixelRatio*e.x,s=this.camera.projectionMatrix.elements[5]*.5*this.devicePixelRatio*e.y,o=this.camera.isOrthographicCamera?1/this.devicePixelRatio:1,c=this.focalAdjustment*o,u=1/c;this.adjustForWebXRStereo(e),this.splatMesh.updateUniforms(e,n*c,s*c,this.camera.isOrthographicCamera,this.camera.zoom||1,u)}}}());nt(this,"addSplatBuffers",function(){return function(e,t=[],n=!0,s=!0,o=!0,c=!1,u=!1,f=!0){if(this.isDisposingOrDisposed())return Promise.resolve();let d=null;const p=()=>{d!==null&&(this.loadingSpinner.removeTask(d),d=null)};return this.splatRenderReady=!1,new Promise(m=>{s&&(d=this.loadingSpinner.addTask("Processing splats...")),Ki(()=>{if(this.isDisposingOrDisposed())m();else{const g=this.addSplatBuffersToMesh(e,t,n,o,c,f),v=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==v&&this.disposeSortWorker(),this.gpuAcceleratedSort||this.preSortMessages.push({centers:g.centers.buffer,sceneIndexes:g.sceneIndexes.buffer,range:{from:g.from,to:g.to,count:g.count}}),(!this.sortWorker&&v>0?this.setupSortWorker(this.splatMesh):Promise.resolve()).then(()=>{this.isDisposingOrDisposed()||this.runSplatSort(!0,!0).then(y=>{!this.sortWorker||!y?(this.splatRenderReady=!0,p(),m()):(u?this.splatRenderReady=!0:this.runAfterNextSort.push(()=>{this.splatRenderReady=!0}),this.runAfterNextSort.push(()=>{p(),m()}))})})}},!0)})}}());nt(this,"addSplatBuffersToMesh",function(){let e;return function(t,n,s=!0,o=!1,c=!1,u=!0){if(this.isDisposingOrDisposed())return;let f=[],d=[];c||(f=this.splatMesh.scenes.map(v=>v.splatBuffer)||[],d=this.splatMesh.sceneOptions?this.splatMesh.sceneOptions.map(v=>v):[]),f.push(...t),d.push(...n),this.renderer&&this.splatMesh.setRenderer(this.renderer);const p=v=>{if(this.isDisposingOrDisposed())return;const A=this.splatMesh.getSplatCount();o&&A>=WU&&!v&&!e&&(this.loadingSpinner.setMinimized(!0,!0),e=this.loadingSpinner.addTask("Optimizing data structures..."))},m=v=>{this.isDisposingOrDisposed()||v&&e&&(this.loadingSpinner.removeTask(e),e=null)},g=this.splatMesh.build(f,d,!0,s,p,m,u);return s&&this.freeIntermediateSplatData&&this.splatMesh.freeIntermediateSplatData(),g}}());nt(this,"shouldRender",function(){let e=0;const t=new ne,n=new En,s=1e-4;return function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return!1;let o=!1,c=!1;if(this.camera){const u=this.camera.position,f=this.camera.quaternion;c=Math.abs(u.x-t.x)>s||Math.abs(u.y-t.y)>s||Math.abs(u.z-t.z)>s||Math.abs(f.x-n.x)>s||Math.abs(f.y-n.y)>s||Math.abs(f.z-n.z)>s||Math.abs(f.w-n.w)>s}return o=this.renderMode!==Eg.Never&&(e===0||this.splatMesh.visibleRegionChanging||c||this.renderMode===Eg.Always||this.dynamicMode===!0||this.renderNextFrame),this.camera&&(t.copy(this.camera.position),n.copy(this.camera.quaternion)),e++,o}}());nt(this,"render",function(){return function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return;const e=n=>{for(let s of n.children)if(s.visible)return!0;return!1},t=this.renderer.autoClear;e(this.threeScene)&&(this.renderer.render(this.threeScene,this.camera),this.renderer.autoClear=!1),this.renderer.render(this.splatMesh,this.camera),this.renderer.autoClear=!1,this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=t}}());nt(this,"updateFPS",function(){let e=bl(),t=0;return function(){if(this.consecutiveRenderFrames>YU){const n=bl();n-e>=1?(this.currentFPS=t,t=0,e=n):t++}else this.currentFPS=null}}());nt(this,"updateForRendererSizeChanges",function(){const e=new vt,t=new vt;let n;return function(){this.usingExternalCamera||(this.renderer.getSize(t),(n===void 0||n!==this.camera.isOrthographicCamera||t.x!==e.x||t.y!==e.y)&&(this.camera.isOrthographicCamera?(this.camera.left=-t.x/2,this.camera.right=t.x/2,this.camera.top=t.y/2,this.camera.bottom=-t.y/2):this.camera.aspect=t.x/t.y,this.camera.updateProjectionMatrix(),e.copy(t),n=this.camera.isOrthographicCamera))}}());nt(this,"timingSensitiveUpdates",function(){let e;return function(){const t=bl();e||(e=t);const n=t-e;this.updateCameraTransition(t),this.updateFocusMarker(n),e=t}}());nt(this,"updateCameraTransition",function(){let e=new ne,t=new ne,n=new ne;return function(s){if(this.transitioningCameraTarget){t.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),n.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const o=Math.acos(t.dot(n)),u=(o/(Math.PI/3)*.65+.3)/o*(s-this.transitioningCameraTargetStartTime);e.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,u),this.camera.lookAt(e),this.controls.target.copy(e),u>=1&&(this.transitioningCameraTarget=!1)}}}());nt(this,"updateFocusMarker",function(){const e=new vt;let t=!1;return function(n){if(this.getRenderDimensions(e),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const s=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let o=Math.min(s+XU*n,1);this.sceneHelper.setFocusMarkerOpacity(o),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e),t=!0,this.forceRenderNextFrame()}else{let s;if(t?s=1:s=Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),s>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e);let o=Math.max(s-qU*n,0);this.sceneHelper.setFocusMarkerOpacity(o),o===0&&this.sceneHelper.setFocusMarkerVisibility(!1)}s>0&&this.forceRenderNextFrame(),t=!1}}}());nt(this,"updateMeshCursor",function(){const e=[],t=new vt;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(t),e.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,e),e.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(e[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}());nt(this,"updateInfoPanel",function(){const e=new vt;return function(){if(!this.showInfo)return;const t=this.splatMesh.getSplatCount();this.getRenderDimensions(e);const n=this.controls?this.controls.target:null,s=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,o=t>0?this.splatRenderCount/t*100:0;this.infoPanel.update(e,this.camera.position,n,this.camera.up,this.camera.isOrthographicCamera,s,this.currentFPS||"N/A",t,this.splatRenderCount,o,this.lastSortTime,this.focalAdjustment,this.splatMesh.getSplatScale(),this.splatMesh.getPointCloudModeEnabled())}}());nt(this,"runSplatSort",function(){const e=new Bt,t=[],n=new ne(0,0,-1),s=new ne(0,0,-1),o=new ne,c=new ne,u=[],f=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return function(d=!1,p=!1){if(!this.initialized)return Promise.resolve(!1);if(this.sortRunning)return Promise.resolve(!0);if(this.splatMesh.getSplatCount()<=0)return this.splatRenderCount=0,Promise.resolve(!1);let m=0,g=0,v=!1,A=!1;if(s.set(0,0,-1).applyQuaternion(this.camera.quaternion),m=s.dot(n),g=c.copy(this.camera.position).sub(o).length(),!d&&!this.splatMesh.dynamicMode&&u.length===0&&(m<=.99&&(v=!0),g>=1&&(A=!0),!v&&!A))return Promise.resolve(!1);this.sortRunning=!0;let{splatRenderCount:y,shouldSortAll:S}=this.gatherSceneNodesForSort();S=S||p,this.splatRenderCount=y,e.copy(this.camera.matrixWorld).invert();const _=this.perspectiveCamera||this.camera;e.premultiply(_.projectionMatrix),this.splatMesh.dynamicMode||e.multiply(this.splatMesh.matrixWorld);let b=Promise.resolve(!0);return this.gpuAcceleratedSort&&(u.length<=1||u.length%2===0)&&(b=this.splatMesh.computeDistancesOnGPU(e,this.sortWorkerPrecomputedDistances)),b.then(()=>{if(u.length===0)if(this.splatMesh.dynamicMode||S)u.push(this.splatRenderCount);else{for(let D of f)if(m<D.angleThreshold){for(let L of D.sortFractions)u.push(Math.floor(this.splatRenderCount*L));break}u.push(this.splatRenderCount)}let E=Math.min(u.shift(),this.splatRenderCount);this.splatSortCount=E,t[0]=this.camera.position.x,t[1]=this.camera.position.y,t[2]=this.camera.position.z;const R={modelViewProj:e.elements,cameraPosition:t,splatRenderCount:this.splatRenderCount,splatSortCount:E,usePrecomputedDistances:this.gpuAcceleratedSort};return this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(R.indexesToSort=this.sortWorkerIndexesToSort,R.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(R.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortPromise=new Promise(D=>{this.sortPromiseResolver=D}),this.preSortMessages.length>0&&(this.preSortMessages.forEach(D=>{this.sortWorker.postMessage(D)}),this.preSortMessages=[]),this.sortWorker.postMessage({sort:R}),u.length===0&&(o.copy(this.camera.position),n.copy(s)),!0}),b}}());nt(this,"gatherSceneNodesForSort",function(){const e=[];let t=null;const n=new ne,s=new ne,o=new ne,c=new Bt,u=new Bt,f=new Bt,d=new ne,p=new ne(0,0,-1),m=new ne,g=v=>m.copy(v.max).sub(v.min).length();return function(v=!1){this.getRenderDimensions(d);const A=d.y/2/Math.tan(this.camera.fov/2*EE.DEG2RAD),y=Math.atan(d.x/2/A),S=Math.atan(d.y/2/A),_=Math.cos(y),b=Math.cos(S),E=this.splatMesh.getSplatTree();if(E){u.copy(this.camera.matrixWorld).invert(),this.splatMesh.dynamicMode||u.multiply(this.splatMesh.matrixWorld);let R=0,D=0;for(let w=0;w<E.subTrees.length;w++){const B=E.subTrees[w];c.copy(u),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(w,f),c.multiply(f));const C=B.nodesWithIndexes.length;for(let T=0;T<C;T++){const O=B.nodesWithIndexes[T];if(!O.data||!O.data.indexes||O.data.indexes.length===0)continue;o.copy(O.center).applyMatrix4(c);const X=o.length();o.normalize(),n.copy(o).setX(0).normalize(),s.copy(o).setY(0).normalize();const $=p.dot(s),z=p.dot(n),k=g(O),I=z<b-.6,Y=$<_-.6;!v&&(Y||I)&&X>k||(D+=O.data.indexes.length,e[R]=O,O.data.distanceToNode=X,R++)}}e.length=R,e.sort((w,B)=>w.data.distanceToNode<B.data.distanceToNode?-1:1);let L=D*Xt.BytesPerInt;for(let w=0;w<R;w++){const B=e[w],C=B.data.indexes.length,T=C*Xt.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,L-T,C).set(B.data.indexes),L-=T}return{splatRenderCount:D,shouldSortAll:!1}}else{const R=this.splatMesh.getSplatCount();if(!t||t.length!==R){t=new Uint32Array(R);for(let D=0;D<R;D++)t[D]=D}return this.sortWorkerIndexesToSort.set(t),{splatRenderCount:R,shouldSortAll:!0}}}}());if(e.cameraUp||(e.cameraUp=[0,1,0]),this.cameraUp=new ne().fromArray(e.cameraUp),e.initialCameraPosition||(e.initialCameraPosition=[0,10,15]),this.initialCameraPosition=new ne().fromArray(e.initialCameraPosition),e.initialCameraLookAt||(e.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=new ne().fromArray(e.initialCameraLookAt),this.dropInMode=e.dropInMode||!1,(e.selfDrivenMode===void 0||e.selfDrivenMode===null)&&(e.selfDrivenMode=!0),this.selfDrivenMode=e.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),e.useBuiltInControls===void 0&&(e.useBuiltInControls=!0),this.useBuiltInControls=e.useBuiltInControls,this.rootElement=e.rootElement,this.ignoreDevicePixelRatio=e.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio||1,this.halfPrecisionCovariancesOnGPU=e.halfPrecisionCovariancesOnGPU||!1,this.threeScene=e.threeScene,this.renderer=e.renderer,this.camera=e.camera,this.gpuAcceleratedSort=e.gpuAcceleratedSort||!1,(e.integerBasedSort===void 0||e.integerBasedSort===null)&&(e.integerBasedSort=!0),this.integerBasedSort=e.integerBasedSort,(e.sharedMemoryForWorkers===void 0||e.sharedMemoryForWorkers===null)&&(e.sharedMemoryForWorkers=!0),this.sharedMemoryForWorkers=e.sharedMemoryForWorkers,this.dynamicScene=!!e.dynamicScene,this.antialiased=e.antialiased||!1,this.kernel2DSize=e.kernel2DSize===void 0?.3:e.kernel2DSize,this.webXRMode=e.webXRMode||uo.None,this.webXRMode!==uo.None&&(this.gpuAcceleratedSort=!1),this.webXRActive=!1,this.webXRSessionInit=e.webXRSessionInit||{},this.renderMode=e.renderMode||Eg.Always,this.sceneRevealMode=e.sceneRevealMode||Eu.Default,this.focalAdjustment=e.focalAdjustment||1,this.maxScreenSpaceSplatSize=e.maxScreenSpaceSplatSize||1024,this.logLevel=e.logLevel||Kl.None,this.sphericalHarmonicsDegree=e.sphericalHarmonicsDegree||0,this.enableOptionalEffects=e.enableOptionalEffects||!1,(e.enableSIMDInSort===void 0||e.enableSIMDInSort===null)&&(e.enableSIMDInSort=!0),this.enableSIMDInSort=e.enableSIMDInSort,(e.inMemoryCompressionLevel===void 0||e.inMemoryCompressionLevel===null)&&(e.inMemoryCompressionLevel=0),this.inMemoryCompressionLevel=e.inMemoryCompressionLevel,(e.optimizeSplatData===void 0||e.optimizeSplatData===null)&&(e.optimizeSplatData=!0),this.optimizeSplatData=e.optimizeSplatData,(e.freeIntermediateSplatData===void 0||e.freeIntermediateSplatData===null)&&(e.freeIntermediateSplatData=!1),this.freeIntermediateSplatData=e.freeIntermediateSplatData,p_()){const n=nT();n.major<17&&(this.enableSIMDInSort=!1),n.major<16&&(this.sharedMemoryForWorkers=!1)}(e.splatRenderMode===void 0||e.splatRenderMode===null)&&(e.splatRenderMode=Lr.ThreeD),this.splatRenderMode=e.splatRenderMode,this.sceneFadeInRateMultiplier=e.sceneFadeInRateMultiplier||1,this.splatSortDistanceMapPrecision=e.splatSortDistanceMapPrecision||Xt.DefaultSplatSortDistanceMapPrecision;const t=this.integerBasedSort?20:24;this.splatSortDistanceMapPrecision=Mn(this.splatSortDistanceMapPrecision,10,t),this.onSplatMeshChangedCallback=null,this.createSplatMesh(),this.controls=null,this.perspectiveControls=null,this.orthographicControls=null,this.orthographicCamera=null,this.perspectiveCamera=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.splatSortCount=0,this.lastSplatSortCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.preSortMessages=[],this.runAfterNextSort=[],this.selfDrivenModeRunning=!1,this.splatRenderReady=!1,this.raycaster=new SU,this.infoPanel=null,this.startInOrthographicMode=!1,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new ne,this.nextCameraTarget=new ne,this.mousePosition=new vt,this.mouseDownPosition=new vt,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.splatSceneDownloadPromises={},this.splatSceneDownloadAndBuildPromise=null,this.splatSceneRemovalPromise=null,this.loadingSpinner=new m0(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new hU(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new pU(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!!(this.dropInMode||this.camera),this.usingExternalRenderer=!!(this.dropInMode||this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.disposePromise=null,this.dropInMode||this.init()}createSplatMesh(){this.splatMesh=new oi(this.splatRenderMode,this.dynamicScene,this.enableOptionalEffects,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,this.antialiased,this.maxScreenSpaceSplatSize,this.logLevel,this.sphericalHarmonicsDegree,this.sceneFadeInRateMultiplier,this.kernel2DSize),this.splatMesh.frustumCulled=!1,this.onSplatMeshChangedCallback&&this.onSplatMeshChangedCallback()}init(){this.initialized||(this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement))),this.setupCamera(),this.setupRenderer(),this.setupWebXR(this.webXRSessionInit),this.setupControls(),this.setupEventHandlers(),this.threeScene=this.threeScene||new cP,this.sceneHelper=new yu(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0)}setupCamera(){if(!this.usingExternalCamera){const e=new vt;this.getRenderDimensions(e),this.perspectiveCamera=new ds(VU,e.x/e.y,.1,1e3),this.orthographicCamera=new c_(e.x/-2,e.x/2,e.y/2,e.y/-2,.1,1e3),this.camera=this.startInOrthographicMode?this.orthographicCamera:this.perspectiveCamera,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)}}setupRenderer(){if(!this.usingExternalRenderer){const e=new vt;this.getRenderDimensions(e),this.renderer=new eT({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new jt(0),0),this.renderer.setSize(e.x,e.y),this.resizeObserver=new ResizeObserver(()=>{this.getRenderDimensions(e),this.renderer.setSize(e.x,e.y),this.forceRenderNextFrame()}),this.resizeObserver.observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}}setupWebXR(e){this.webXRMode&&(this.webXRMode===uo.VR?this.rootElement.appendChild(sc.createButton(this.renderer,e)):this.webXRMode===uo.AR&&this.rootElement.appendChild(GU.createButton(this.renderer,e)),this.renderer.xr.addEventListener("sessionstart",t=>{this.webXRActive=!0}),this.renderer.xr.addEventListener("sessionend",t=>{this.webXRActive=!1}),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt))}setupControls(){if(this.useBuiltInControls&&this.webXRMode===uo.None){this.usingExternalCamera?this.camera.isOrthographicCamera?this.orthographicControls=new bd(this.camera,this.renderer.domElement):this.perspectiveControls=new bd(this.camera,this.renderer.domElement):(this.perspectiveControls=new bd(this.perspectiveCamera,this.renderer.domElement),this.orthographicControls=new bd(this.orthographicCamera,this.renderer.domElement));for(let e of[this.orthographicControls,this.perspectiveControls])e&&(e.listenToKeyEvents(window),e.rotateSpeed=.5,e.maxPolarAngle=Math.PI*.75,e.minPolarAngle=.1,e.enableDamping=!0,e.dampingFactor=.05,e.target.copy(this.initialCameraLookAt),e.update());this.controls=this.camera.isOrthographicCamera?this.orthographicControls:this.perspectiveControls,this.controls.update()}}setupEventHandlers(){this.useBuiltInControls&&this.webXRMode===uo.None&&(this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1))}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}setActiveSphericalHarmonicsDegrees(e){this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value=e,this.splatMesh.material.uniformsNeedUpdate=!0}onSplatMeshChanged(e){this.onSplatMeshChangedCallback=e}onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=bl()}onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY),this.checkForFocalPointChange()}getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setOrthographicMode(e){if(e===this.camera.isOrthographicCamera)return;const t=this.camera,n=e?this.orthographicCamera:this.perspectiveCamera;if(n.position.copy(t.position),n.up.copy(t.up),n.rotation.copy(t.rotation),n.quaternion.copy(t.quaternion),n.matrix.copy(t.matrix),this.camera=n,this.controls){const s=u=>{u.saveState(),u.reset()},o=this.controls,c=e?this.orthographicControls:this.perspectiveControls;s(c),s(o),c.target.copy(o.target),e?Us.setCameraZoomFromPosition(n,t,o):Us.setCameraPositionFromZoom(n,t,c),this.controls=c,this.camera.lookAt(this.controls.target)}}adjustForWebXRStereo(e){if(this.camera&&this.webXRActive){const n=this.renderer.xr.getCamera().projectionMatrix.elements[0],s=this.camera.projectionMatrix.elements[0];e.x*=s/n}}isLoadingOrUnloading(){return Object.keys(this.splatSceneDownloadPromises).length>0||this.splatSceneDownloadAndBuildPromise!==null||this.splatSceneRemovalPromise!==null}isDisposingOrDisposed(){return this.disposing||this.disposed}addSplatSceneDownloadPromise(e){this.splatSceneDownloadPromises[e.id]=e}removeSplatSceneDownloadPromise(e){delete this.splatSceneDownloadPromises[e.id]}setSplatSceneDownloadAndBuildPromise(e){this.splatSceneDownloadAndBuildPromise=e}clearSplatSceneDownloadAndBuildPromise(){this.splatSceneDownloadAndBuildPromise=null}addSplatScene(e,t={}){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");t.progressiveLoad&&this.splatMesh.scenes&&this.splatMesh.scenes.length>0&&(console.log('addSplatScene(): "progressiveLoad" option ignore because there are multiple splat scenes'),t.progressiveLoad=!1);const n=t.format!==void 0&&t.format!==null?t.format:oM(e),s=Us.isProgressivelyLoadable(n)&&t.progressiveLoad,o=t.showLoadingUI!==void 0&&t.showLoadingUI!==null?t.showLoadingUI:!0;let c=null;o&&(this.loadingSpinner.removeAllTasks(),c=this.loadingSpinner.addTask("Downloading..."));const u=()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()},f=(y,S,_)=>{if(o)if(_===Pn.Downloading)if(y==100)this.loadingSpinner.setMessageForTask(c,"Download complete!");else if(s)this.loadingSpinner.setMessageForTask(c,"Downloading splats...");else{const b=S?`: ${S}`:"...";this.loadingSpinner.setMessageForTask(c,`Downloading${b}`)}else _===Pn.Processing&&this.loadingSpinner.setMessageForTask(c,"Processing splats...")};let d=!1,p=0;const m=(y,S)=>{o&&((y&&s||S&&!s)&&(this.loadingSpinner.removeTask(c),!S&&!d&&this.loadingProgressBar.show()),s&&(S?(d=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(p)))},g=(y,S,_)=>{p=y,f(y,S,_),t.onProgress&&t.onProgress(y,S,_)},v=(y,S,_)=>{!s&&t.onProgress&&t.onProgress(0,"0%",Pn.Processing);const b={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};return this.addSplatBuffers([y],[b],_,S&&o,o,s,s).then(()=>{!s&&t.onProgress&&t.onProgress(100,"100%",Pn.Processing),m(S,_)})};return(s?this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this):this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this))(e,n,t.splatAlphaRemovalThreshold,v.bind(this),g,u.bind(this),t.headers)}downloadAndBuildSingleSplatSceneStandardLoad(e,t,n,s,o,c,u){const f=this.downloadSplatSceneToSplatBuffer(e,n,o,!1,void 0,t,u),d=gg(f.abortHandler);return f.then(p=>(this.removeSplatSceneDownloadPromise(f),s(p,!0,!0).then(()=>{d.resolve(),this.clearSplatSceneDownloadAndBuildPromise()}))).catch(p=>{c&&c(),this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(f),d.reject(this.updateError(p,`Viewer::addSplatScene -> Could not load file ${e}`))}),this.addSplatSceneDownloadPromise(f),this.setSplatSceneDownloadAndBuildPromise(d.promise),d.promise}downloadAndBuildSingleSplatSceneProgressiveLoad(e,t,n,s,o,c,u){let f=0,d=!1;const p=[],m=()=>{if(p.length>0&&!d&&!this.isDisposingOrDisposed()){d=!0;const S=p.shift();s(S.splatBuffer,S.firstBuild,S.finalBuild).then(()=>{d=!1,S.firstBuild?A.resolve():S.finalBuild&&(y.resolve(),this.clearSplatSceneDownloadAndBuildPromise()),p.length>0&&Ki(()=>m())})}},g=(S,_)=>{this.isDisposingOrDisposed()||(_||p.length===0||S.getSplatCount()>p[0].splatBuffer.getSplatCount())&&(p.push({splatBuffer:S,firstBuild:f===0,finalBuild:_}),f++,m())},v=this.downloadSplatSceneToSplatBuffer(e,n,o,!0,g,t,u),A=gg(v.abortHandler),y=gg();return this.addSplatSceneDownloadPromise(v),this.setSplatSceneDownloadAndBuildPromise(y.promise),v.then(()=>{this.removeSplatSceneDownloadPromise(v)}).catch(S=>{this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(v);const _=this.updateError(S,"Viewer::addSplatScene -> Could not load one or more scenes");A.reject(_),c&&c(_)}),A.promise}addSplatScenes(e,t=!0,n=void 0){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const s=e.length,o=[];let c;t&&(this.loadingSpinner.removeAllTasks(),c=this.loadingSpinner.addTask("Downloading..."));const u=(m,g,v,A)=>{o[m]=g;let y=0;for(let S=0;S<s;S++)y+=o[S]||0;y=y/s,v=`${y.toFixed(2)}%`,t&&A===Pn.Downloading&&this.loadingSpinner.setMessageForTask(c,y==100?"Download complete!":`Downloading: ${v}`),n&&n(y,v,A)},f=[],d=[];for(let m=0;m<e.length;m++){const g=e[m],v=g.format!==void 0&&g.format!==null?g.format:oM(g.path),A=this.downloadSplatSceneToSplatBuffer(g.path,g.splatAlphaRemovalThreshold,u.bind(this,m),!1,void 0,v,g.headers);f.push(A),d.push(A.promise)}const p=new Lu((m,g)=>{Promise.all(d).then(v=>{t&&this.loadingSpinner.removeTask(c),n&&n(0,"0%",Pn.Processing),this.addSplatBuffers(v,e,!0,t,t,!1,!1).then(()=>{n&&n(100,"100%",Pn.Processing),this.clearSplatSceneDownloadAndBuildPromise(),m()})}).catch(v=>{t&&this.loadingSpinner.removeTask(c),this.clearSplatSceneDownloadAndBuildPromise(),g(this.updateError(v,"Viewer::addSplatScenes -> Could not load one or more splat scenes."))}).finally(()=>{this.removeSplatSceneDownloadPromise(p)})},m=>{for(let g of f)g.abort(m)});return this.addSplatSceneDownloadPromise(p),this.setSplatSceneDownloadAndBuildPromise(p),p}downloadSplatSceneToSplatBuffer(e,t=1,n=void 0,s=!1,o=void 0,c,u){try{if(c===Pi.Splat||c===Pi.KSplat||c===Pi.Ply){const f=s?!1:this.optimizeSplatData;if(c===Pi.Splat)return b_.loadFromURL(e,n,s,o,t,this.inMemoryCompressionLevel,f,u);if(c===Pi.KSplat)return p0.loadFromURL(e,n,s,o,u);if(c===Pi.Ply)return E_.loadFromURL(e,n,s,o,t,this.inMemoryCompressionLevel,f,this.sphericalHarmonicsDegree,u)}else if(c===Pi.Spz)return T_.loadFromURL(e,n,t,this.inMemoryCompressionLevel,this.optimizeSplatData,this.sphericalHarmonicsDegree,u)}catch(f){throw this.updateError(f,null)}throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${e}`)}static isProgressivelyLoadable(e){return e===Pi.Splat||e===Pi.KSplat||e===Pi.Ply}setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise(t=>{const n=this.integerBasedSort?Int32Array:Float32Array,s=e.getSplatCount(),o=e.getMaxSplatCount();this.sortWorker=HU(o,this.sharedMemoryForWorkers,this.enableSIMDInSort,this.integerBasedSort,this.splatMesh.dynamicMode,this.splatSortDistanceMapPrecision),this.sortWorker.onmessage=c=>{if(c.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,c.data.splatRenderCount);else{const u=new Uint32Array(c.data.sortedIndexes.buffer,0,c.data.splatRenderCount);this.splatMesh.updateRenderIndexes(u,c.data.splatRenderCount)}this.lastSplatSortCount=this.splatSortCount,this.lastSortTime=c.data.sortTime,this.sortPromiseResolver(),this.sortPromiseResolver=null,this.forceRenderNextFrame(),this.runAfterNextSort.length>0&&(this.runAfterNextSort.forEach(u=>{u()}),this.runAfterNextSort.length=0)}else if(c.data.sortCanceled)this.sortRunning=!1;else if(c.data.sortSetupPhase1Complete){this.logLevel>=Kl.Info&&console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(c.data.sortedIndexesBuffer,c.data.sortedIndexesOffset,o),this.sortWorkerIndexesToSort=new Uint32Array(c.data.indexesToSortBuffer,c.data.indexesToSortOffset,o),this.sortWorkerPrecomputedDistances=new n(c.data.precomputedDistancesBuffer,c.data.precomputedDistancesOffset,o),this.sortWorkerTransforms=new Float32Array(c.data.transformsBuffer,c.data.transformsOffset,Xt.MaxScenes*16)):(this.sortWorkerIndexesToSort=new Uint32Array(o),this.sortWorkerPrecomputedDistances=new n(o),this.sortWorkerTransforms=new Float32Array(Xt.MaxScenes*16));for(let u=0;u<s;u++)this.sortWorkerIndexesToSort[u]=u;if(this.sortWorker.maxSplatCount=o,this.logLevel>=Kl.Info){console.log("Sorting web worker ready.");const u=this.splatMesh.getSplatDataTextures(),f=u.covariances.size,d=u.centerColors.size;console.log("Covariances texture size: "+f.x+" x "+f.y),console.log("Centers/colors texture size: "+d.x+" x "+d.y)}t()}}})}updateError(e,t){return e instanceof tT?e:e instanceof ph?new Error("File type or server does not support progressive loading."):t?new Error(t):e}disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortPromise=null,this.sortPromiseResolver&&(this.sortPromiseResolver(),this.sortPromiseResolver=null),this.preSortMessages=[],this.sortRunning=!1}removeSplatScene(e,t=!0){return this.removeSplatScenes([e],t)}removeSplatScenes(e,t=!0){if(this.isLoadingOrUnloading())throw new Error("Cannot remove splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot remove splat scene after dispose() is called.");let n;return this.splatSceneRemovalPromise=new Promise((s,o)=>{let c;t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show(),c=this.loadingSpinner.addTask("Removing splat scene..."));const u=()=>{t&&(this.loadingSpinner.hide(),this.loadingSpinner.removeTask(c))},f=p=>{u(),this.splatSceneRemovalPromise=null,p?o(p):s()},d=()=>this.isDisposingOrDisposed()?(f(),!0):!1;n=this.sortPromise||Promise.resolve(),n.then(()=>{if(d())return;const p=[],m=[],g=[];for(let v=0;v<this.splatMesh.scenes.length;v++){let A=!1;for(let y of e)if(y===v){A=!0;break}if(!A){const y=this.splatMesh.scenes[v];p.push(y.splatBuffer),m.push(this.splatMesh.sceneOptions[v]),g.push({position:y.position.clone(),quaternion:y.quaternion.clone(),scale:y.scale.clone()})}}this.disposeSortWorker(),this.splatMesh.dispose(),this.sceneRevealMode=Eu.Instant,this.createSplatMesh(),this.addSplatBuffers(p,m,!0,!1,!0).then(()=>{d()||(u(),this.splatMesh.scenes.forEach((v,A)=>{v.position.copy(g[A].position),v.quaternion.copy(g[A].quaternion),v.scale.copy(g[A].scale)}),this.splatMesh.updateTransforms(),this.splatRenderReady=!1,this.runSplatSort(!0).then(()=>{if(d()){this.splatRenderReady=!0;return}n=this.sortPromise||Promise.resolve(),n.then(()=>{this.splatRenderReady=!0,f()})}))}).catch(v=>{f(v)})})}),this.splatSceneRemovalPromise}start(){if(this.selfDrivenMode)this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0;else throw new Error("Cannot start viewer unless it is in self driven mode.")}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode?this.renderer.setAnimationLoop(null):cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){if(this.isDisposingOrDisposed())return this.disposePromise;let e=[],t=[];for(let n in this.splatSceneDownloadPromises)if(this.splatSceneDownloadPromises.hasOwnProperty(n)){const s=this.splatSceneDownloadPromises[n];t.push(s),e.push(s.promise)}return this.sortPromise&&e.push(this.sortPromise),this.disposing=!0,this.disposePromise=Promise.all(e).finally(()=>{this.stop(),this.orthographicControls&&(this.orthographicControls.dispose(),this.orthographicControls=null),this.perspectiveControls&&(this.perspectiveControls.dispose(),this.perspectiveControls=null),this.controls=null,this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderReady=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1,this.disposePromise=null}),t.forEach(n=>{n.abort("Scene disposed")}),this.disposePromise}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),!(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())&&(this.controls&&(this.controls.update(),this.camera.isOrthographicCamera&&!this.usingExternalCamera&&Us.setCameraPositionFromZoom(this.camera,this.camera,this.controls)),this.runSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}getSceneCount(){return this.splatMesh.getSceneCount()}isMobile(){return navigator.userAgent.includes("Mobi")}},nt(Us,"setCameraPositionFromZoom",function(){const e=new ne;return function(t,n,s){const o=1/(n.zoom*.001);e.copy(s.target).sub(t.position).normalize().multiplyScalar(o).negate(),t.position.copy(s.target).add(e)}}()),nt(Us,"setCameraZoomFromPosition",function(){const e=new ne;return function(t,n,s){const o=e.copy(s.target).sub(n.position).length();t.zoom=1/(o*.001)}}()),Us);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const R_="176",QU=0,_M=1,KU=2,uT=1,jU=2,Dr=3,Ua=0,Bi=1,Ir=2,Da=0,jl=1,vM=2,SM=3,xM=4,ZU=5,_o=100,JU=101,eI=102,tI=103,nI=104,iI=200,sI=201,rI=202,aI=203,_0=204,v0=205,oI=206,lI=207,cI=208,uI=209,fI=210,dI=211,hI=212,pI=213,mI=214,S0=0,x0=1,A0=2,rc=3,y0=4,M0=5,E0=6,T0=7,fT=0,gI=1,_I=2,La=0,vI=1,SI=2,xI=3,AI=4,yI=5,MI=6,EI=7,dT=300,ac=301,oc=302,_h=303,b0=304,Rh=306,C0=1e3,Ao=1001,R0=1002,Bs=1003,TI=1004,Rd=1005,$s=1006,Tg=1007,yo=1008,Vr=1009,hT=1010,pT=1011,Pu=1012,w_=1013,Co=1014,Fr=1015,zu=1016,D_=1017,L_=1018,Uu=1020,mT=35902,gT=1021,_T=1022,Is=1023,Iu=1026,Bu=1027,vT=1028,P_=1029,ST=1030,U_=1031,I_=1033,eh=33776,th=33777,nh=33778,ih=33779,w0=35840,D0=35841,L0=35842,P0=35843,U0=36196,I0=37492,B0=37496,F0=37808,N0=37809,O0=37810,z0=37811,H0=37812,G0=37813,V0=37814,k0=37815,W0=37816,X0=37817,q0=37818,Y0=37819,$0=37820,Q0=37821,sh=36492,K0=36494,j0=36495,xT=36283,Z0=36284,J0=36285,e_=36286,bI=3200,CI=3201,RI=0,wI=1,Ta="",$i="srgb",lc="srgb-linear",vh="linear",fn="srgb",Rl=7680,AM=519,DI=512,LI=513,PI=514,AT=515,UI=516,II=517,BI=518,FI=519,yM=35044,MM="300 es",Nr=2e3,Sh=2001;class fc{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n===void 0?!1:n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const n=this._listeners;if(n===void 0)return;const s=n[e];if(s!==void 0){const o=s.indexOf(t);o!==-1&&s.splice(o,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const n=t[e.type];if(n!==void 0){e.target=this;const s=n.slice(0);for(let o=0,c=s.length;o<c;o++)s[o].call(this,e);e.target=null}}}const pi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],bg=Math.PI/180,t_=180/Math.PI;function Hu(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(pi[r&255]+pi[r>>8&255]+pi[r>>16&255]+pi[r>>24&255]+"-"+pi[e&255]+pi[e>>8&255]+"-"+pi[e>>16&15|64]+pi[e>>24&255]+"-"+pi[t&63|128]+pi[t>>8&255]+"-"+pi[t>>16&255]+pi[t>>24&255]+pi[n&255]+pi[n>>8&255]+pi[n>>16&255]+pi[n>>24&255]).toLowerCase()}function Yt(r,e,t){return Math.max(e,Math.min(t,r))}function NI(r,e){return(r%e+e)%e}function Cg(r,e,t){return(1-t)*r+t*e}function hu(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function wi(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}class mn{constructor(e=0,t=0){mn.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6],this.y=s[1]*t+s[4]*n+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Yt(this.x,e.x,t.x),this.y=Yt(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=Yt(this.x,e,t),this.y=Yt(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Yt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),o=this.x-e.x,c=this.y-e.y;return this.x=o*n-c*s+e.x,this.y=o*s+c*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class It{constructor(e,t,n,s,o,c,u,f,d){It.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,s,o,c,u,f,d)}set(e,t,n,s,o,c,u,f,d){const p=this.elements;return p[0]=e,p[1]=s,p[2]=u,p[3]=t,p[4]=o,p[5]=f,p[6]=n,p[7]=c,p[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,c=n[0],u=n[3],f=n[6],d=n[1],p=n[4],m=n[7],g=n[2],v=n[5],A=n[8],y=s[0],S=s[3],_=s[6],b=s[1],E=s[4],R=s[7],D=s[2],L=s[5],w=s[8];return o[0]=c*y+u*b+f*D,o[3]=c*S+u*E+f*L,o[6]=c*_+u*R+f*w,o[1]=d*y+p*b+m*D,o[4]=d*S+p*E+m*L,o[7]=d*_+p*R+m*w,o[2]=g*y+v*b+A*D,o[5]=g*S+v*E+A*L,o[8]=g*_+v*R+A*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8];return t*c*p-t*u*d-n*o*p+n*u*f+s*o*d-s*c*f}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8],m=p*c-u*d,g=u*f-p*o,v=d*o-c*f,A=t*m+n*g+s*v;if(A===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/A;return e[0]=m*y,e[1]=(s*d-p*n)*y,e[2]=(u*n-s*c)*y,e[3]=g*y,e[4]=(p*t-s*f)*y,e[5]=(s*o-u*t)*y,e[6]=v*y,e[7]=(n*f-d*t)*y,e[8]=(c*t-n*o)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,o,c,u){const f=Math.cos(o),d=Math.sin(o);return this.set(n*f,n*d,-n*(f*c+d*u)+c+e,-s*d,s*f,-s*(-d*c+f*u)+u+t,0,0,1),this}scale(e,t){return this.premultiply(Rg.makeScale(e,t)),this}rotate(e){return this.premultiply(Rg.makeRotation(-e)),this}translate(e,t){return this.premultiply(Rg.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<9;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const Rg=new It;function yT(r){for(let e=r.length-1;e>=0;--e)if(r[e]>=65535)return!0;return!1}function Fu(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function OI(){const r=Fu("canvas");return r.style.display="block",r}const EM={};function rh(r){r in EM||(EM[r]=!0,console.warn(r))}function zI(r,e,t){return new Promise(function(n,s){function o(){switch(r.clientWaitSync(e,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:s();break;case r.TIMEOUT_EXPIRED:setTimeout(o,t);break;default:n()}}setTimeout(o,t)})}function HI(r){const e=r.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function GI(r){const e=r.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const TM=new It().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),bM=new It().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function VI(){const r={enabled:!0,workingColorSpace:lc,spaces:{},convert:function(s,o,c){return this.enabled===!1||o===c||!o||!c||(this.spaces[o].transfer===fn&&(s.r=Hr(s.r),s.g=Hr(s.g),s.b=Hr(s.b)),this.spaces[o].primaries!==this.spaces[c].primaries&&(s.applyMatrix3(this.spaces[o].toXYZ),s.applyMatrix3(this.spaces[c].fromXYZ)),this.spaces[c].transfer===fn&&(s.r=Zl(s.r),s.g=Zl(s.g),s.b=Zl(s.b))),s},fromWorkingColorSpace:function(s,o){return this.convert(s,this.workingColorSpace,o)},toWorkingColorSpace:function(s,o){return this.convert(s,o,this.workingColorSpace)},getPrimaries:function(s){return this.spaces[s].primaries},getTransfer:function(s){return s===Ta?vh:this.spaces[s].transfer},getLuminanceCoefficients:function(s,o=this.workingColorSpace){return s.fromArray(this.spaces[o].luminanceCoefficients)},define:function(s){Object.assign(this.spaces,s)},_getMatrix:function(s,o,c){return s.copy(this.spaces[o].toXYZ).multiply(this.spaces[c].fromXYZ)},_getDrawingBufferColorSpace:function(s){return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(s=this.workingColorSpace){return this.spaces[s].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return r.define({[lc]:{primaries:e,whitePoint:n,transfer:vh,toXYZ:TM,fromXYZ:bM,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:$i},outputColorSpaceConfig:{drawingBufferColorSpace:$i}},[$i]:{primaries:e,whitePoint:n,transfer:fn,toXYZ:TM,fromXYZ:bM,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:$i}}}),r}const Kt=VI();function Hr(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Zl(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let wl;class kI{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{wl===void 0&&(wl=Fu("canvas")),wl.width=e.width,wl.height=e.height;const s=wl.getContext("2d");e instanceof ImageData?s.putImageData(e,0,0):s.drawImage(e,0,0,e.width,e.height),n=wl}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Fu("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const s=n.getImageData(0,0,e.width,e.height),o=s.data;for(let c=0;c<o.length;c++)o[c]=Hr(o[c]/255)*255;return n.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Hr(t[n]/255)*255):t[n]=Hr(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let WI=0;class B_{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:WI++}),this.uuid=Hu(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},s=this.data;if(s!==null){let o;if(Array.isArray(s)){o=[];for(let c=0,u=s.length;c<u;c++)s[c].isDataTexture?o.push(wg(s[c].image)):o.push(wg(s[c]))}else o=wg(s);n.url=o}return t||(e.images[this.uuid]=n),n}}function wg(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?kI.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let XI=0;class Mi extends fc{constructor(e=Mi.DEFAULT_IMAGE,t=Mi.DEFAULT_MAPPING,n=Ao,s=Ao,o=$s,c=yo,u=Is,f=Vr,d=Mi.DEFAULT_ANISOTROPY,p=Ta){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:XI++}),this.uuid=Hu(),this.name="",this.source=new B_(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=o,this.minFilter=c,this.anisotropy=d,this.format=u,this.internalFormat=null,this.type=f,this.offset=new mn(0,0),this.repeat=new mn(1,1),this.center=new mn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new It,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=p,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isTextureArray=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isTextureArray=e.isTextureArray,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==dT)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case C0:e.x=e.x-Math.floor(e.x);break;case Ao:e.x=e.x<0?0:1;break;case R0:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case C0:e.y=e.y-Math.floor(e.y);break;case Ao:e.y=e.y<0?0:1;break;case R0:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}Mi.DEFAULT_IMAGE=null;Mi.DEFAULT_MAPPING=dT;Mi.DEFAULT_ANISOTROPY=1;class Un{constructor(e=0,t=0,n=0,s=1){Un.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,o=this.w,c=e.elements;return this.x=c[0]*t+c[4]*n+c[8]*s+c[12]*o,this.y=c[1]*t+c[5]*n+c[9]*s+c[13]*o,this.z=c[2]*t+c[6]*n+c[10]*s+c[14]*o,this.w=c[3]*t+c[7]*n+c[11]*s+c[15]*o,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,s,o;const f=e.elements,d=f[0],p=f[4],m=f[8],g=f[1],v=f[5],A=f[9],y=f[2],S=f[6],_=f[10];if(Math.abs(p-g)<.01&&Math.abs(m-y)<.01&&Math.abs(A-S)<.01){if(Math.abs(p+g)<.1&&Math.abs(m+y)<.1&&Math.abs(A+S)<.1&&Math.abs(d+v+_-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const E=(d+1)/2,R=(v+1)/2,D=(_+1)/2,L=(p+g)/4,w=(m+y)/4,B=(A+S)/4;return E>R&&E>D?E<.01?(n=0,s=.707106781,o=.707106781):(n=Math.sqrt(E),s=L/n,o=w/n):R>D?R<.01?(n=.707106781,s=0,o=.707106781):(s=Math.sqrt(R),n=L/s,o=B/s):D<.01?(n=.707106781,s=.707106781,o=0):(o=Math.sqrt(D),n=w/o,s=B/o),this.set(n,s,o,t),this}let b=Math.sqrt((S-A)*(S-A)+(m-y)*(m-y)+(g-p)*(g-p));return Math.abs(b)<.001&&(b=1),this.x=(S-A)/b,this.y=(m-y)/b,this.z=(g-p)/b,this.w=Math.acos((d+v+_-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Yt(this.x,e.x,t.x),this.y=Yt(this.y,e.y,t.y),this.z=Yt(this.z,e.z,t.z),this.w=Yt(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=Yt(this.x,e,t),this.y=Yt(this.y,e,t),this.z=Yt(this.z,e,t),this.w=Yt(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class qI extends fc{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth?n.depth:1,this.scissor=new Un(0,0,e,t),this.scissorTest=!1,this.viewport=new Un(0,0,e,t);const s={width:e,height:t,depth:this.depth};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:$s,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,multiview:!1},n);const o=new Mi(s,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);o.flipY=!1,o.generateMipmaps=n.generateMipmaps,o.internalFormat=n.internalFormat,this.textures=[];const c=n.count;for(let u=0;u<c;u++)this.textures[u]=o.clone(),this.textures[u].isRenderTargetTexture=!0,this.textures[u].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let s=0,o=this.textures.length;s<o;s++)this.textures[s].image.width=e,this.textures[s].image.height=t,this.textures[s].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const s=Object.assign({},e.textures[t].image);this.textures[t].source=new B_(s)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Ro extends qI{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class MT extends Mi{constructor(e=null,t=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=Bs,this.minFilter=Bs,this.wrapR=Ao,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class YI extends Mi{constructor(e=null,t=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:s},this.magFilter=Bs,this.minFilter=Bs,this.wrapR=Ao,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Gu{constructor(e=0,t=0,n=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=s}static slerpFlat(e,t,n,s,o,c,u){let f=n[s+0],d=n[s+1],p=n[s+2],m=n[s+3];const g=o[c+0],v=o[c+1],A=o[c+2],y=o[c+3];if(u===0){e[t+0]=f,e[t+1]=d,e[t+2]=p,e[t+3]=m;return}if(u===1){e[t+0]=g,e[t+1]=v,e[t+2]=A,e[t+3]=y;return}if(m!==y||f!==g||d!==v||p!==A){let S=1-u;const _=f*g+d*v+p*A+m*y,b=_>=0?1:-1,E=1-_*_;if(E>Number.EPSILON){const D=Math.sqrt(E),L=Math.atan2(D,_*b);S=Math.sin(S*L)/D,u=Math.sin(u*L)/D}const R=u*b;if(f=f*S+g*R,d=d*S+v*R,p=p*S+A*R,m=m*S+y*R,S===1-u){const D=1/Math.sqrt(f*f+d*d+p*p+m*m);f*=D,d*=D,p*=D,m*=D}}e[t]=f,e[t+1]=d,e[t+2]=p,e[t+3]=m}static multiplyQuaternionsFlat(e,t,n,s,o,c){const u=n[s],f=n[s+1],d=n[s+2],p=n[s+3],m=o[c],g=o[c+1],v=o[c+2],A=o[c+3];return e[t]=u*A+p*m+f*v-d*g,e[t+1]=f*A+p*g+d*m-u*v,e[t+2]=d*A+p*v+u*g-f*m,e[t+3]=p*A-u*m-f*g-d*v,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,s=e._y,o=e._z,c=e._order,u=Math.cos,f=Math.sin,d=u(n/2),p=u(s/2),m=u(o/2),g=f(n/2),v=f(s/2),A=f(o/2);switch(c){case"XYZ":this._x=g*p*m+d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m-g*v*A;break;case"YXZ":this._x=g*p*m+d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m+g*v*A;break;case"ZXY":this._x=g*p*m-d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m-g*v*A;break;case"ZYX":this._x=g*p*m-d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m+g*v*A;break;case"YZX":this._x=g*p*m+d*v*A,this._y=d*v*m+g*p*A,this._z=d*p*A-g*v*m,this._w=d*p*m-g*v*A;break;case"XZY":this._x=g*p*m-d*v*A,this._y=d*v*m-g*p*A,this._z=d*p*A+g*v*m,this._w=d*p*m+g*v*A;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+c)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,s=Math.sin(n);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],s=t[4],o=t[8],c=t[1],u=t[5],f=t[9],d=t[2],p=t[6],m=t[10],g=n+u+m;if(g>0){const v=.5/Math.sqrt(g+1);this._w=.25/v,this._x=(p-f)*v,this._y=(o-d)*v,this._z=(c-s)*v}else if(n>u&&n>m){const v=2*Math.sqrt(1+n-u-m);this._w=(p-f)/v,this._x=.25*v,this._y=(s+c)/v,this._z=(o+d)/v}else if(u>m){const v=2*Math.sqrt(1+u-n-m);this._w=(o-d)/v,this._x=(s+c)/v,this._y=.25*v,this._z=(f+p)/v}else{const v=2*Math.sqrt(1+m-n-u);this._w=(c-s)/v,this._x=(o+d)/v,this._y=(f+p)/v,this._z=.25*v}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Yt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,o=e._z,c=e._w,u=t._x,f=t._y,d=t._z,p=t._w;return this._x=n*p+c*u+s*d-o*f,this._y=s*p+c*f+o*u-n*d,this._z=o*p+c*d+n*f-s*u,this._w=c*p-n*u-s*f-o*d,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,s=this._y,o=this._z,c=this._w;let u=c*e._w+n*e._x+s*e._y+o*e._z;if(u<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,u=-u):this.copy(e),u>=1)return this._w=c,this._x=n,this._y=s,this._z=o,this;const f=1-u*u;if(f<=Number.EPSILON){const v=1-t;return this._w=v*c+t*this._w,this._x=v*n+t*this._x,this._y=v*s+t*this._y,this._z=v*o+t*this._z,this.normalize(),this}const d=Math.sqrt(f),p=Math.atan2(d,u),m=Math.sin((1-t)*p)/d,g=Math.sin(t*p)/d;return this._w=c*m+this._w*g,this._x=n*m+this._x*g,this._y=s*m+this._y*g,this._z=o*m+this._z*g,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),s=Math.sqrt(1-n),o=Math.sqrt(n);return this.set(s*Math.sin(e),s*Math.cos(e),o*Math.sin(t),o*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Ne{constructor(e=0,t=0,n=0){Ne.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(CM.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(CM.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,s=this.z,o=e.elements;return this.x=o[0]*t+o[3]*n+o[6]*s,this.y=o[1]*t+o[4]*n+o[7]*s,this.z=o[2]*t+o[5]*n+o[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,s=this.z,o=e.elements,c=1/(o[3]*t+o[7]*n+o[11]*s+o[15]);return this.x=(o[0]*t+o[4]*n+o[8]*s+o[12])*c,this.y=(o[1]*t+o[5]*n+o[9]*s+o[13])*c,this.z=(o[2]*t+o[6]*n+o[10]*s+o[14])*c,this}applyQuaternion(e){const t=this.x,n=this.y,s=this.z,o=e.x,c=e.y,u=e.z,f=e.w,d=2*(c*s-u*n),p=2*(u*t-o*s),m=2*(o*n-c*t);return this.x=t+f*d+c*m-u*p,this.y=n+f*p+u*d-o*m,this.z=s+f*m+o*p-c*d,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,s=this.z,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*s,this.y=o[1]*t+o[5]*n+o[9]*s,this.z=o[2]*t+o[6]*n+o[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Yt(this.x,e.x,t.x),this.y=Yt(this.y,e.y,t.y),this.z=Yt(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=Yt(this.x,e,t),this.y=Yt(this.y,e,t),this.z=Yt(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yt(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,o=e.z,c=t.x,u=t.y,f=t.z;return this.x=s*f-o*u,this.y=o*c-n*f,this.z=n*u-s*c,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Dg.copy(this).projectOnVector(e),this.sub(Dg)}reflect(e){return this.sub(Dg.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Yt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Dg=new Ne,CM=new Gu;class Vu{constructor(e=new Ne(1/0,1/0,1/0),t=new Ne(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Cs.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Cs.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Cs.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const o=n.getAttribute("position");if(t===!0&&o!==void 0&&e.isInstancedMesh!==!0)for(let c=0,u=o.count;c<u;c++)e.isMesh===!0?e.getVertexPosition(c,Cs):Cs.fromBufferAttribute(o,c),Cs.applyMatrix4(e.matrixWorld),this.expandByPoint(Cs);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),wd.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),wd.copy(n.boundingBox)),wd.applyMatrix4(e.matrixWorld),this.union(wd)}const s=e.children;for(let o=0,c=s.length;o<c;o++)this.expandByObject(s[o],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Cs),Cs.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(pu),Dd.subVectors(this.max,pu),Dl.subVectors(e.a,pu),Ll.subVectors(e.b,pu),Pl.subVectors(e.c,pu),va.subVectors(Ll,Dl),Sa.subVectors(Pl,Ll),no.subVectors(Dl,Pl);let t=[0,-va.z,va.y,0,-Sa.z,Sa.y,0,-no.z,no.y,va.z,0,-va.x,Sa.z,0,-Sa.x,no.z,0,-no.x,-va.y,va.x,0,-Sa.y,Sa.x,0,-no.y,no.x,0];return!Lg(t,Dl,Ll,Pl,Dd)||(t=[1,0,0,0,1,0,0,0,1],!Lg(t,Dl,Ll,Pl,Dd))?!1:(Ld.crossVectors(va,Sa),t=[Ld.x,Ld.y,Ld.z],Lg(t,Dl,Ll,Pl,Dd))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Cs).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Cs).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Er[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Er[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Er[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Er[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Er[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Er[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Er[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Er[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Er),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Er=[new Ne,new Ne,new Ne,new Ne,new Ne,new Ne,new Ne,new Ne],Cs=new Ne,wd=new Vu,Dl=new Ne,Ll=new Ne,Pl=new Ne,va=new Ne,Sa=new Ne,no=new Ne,pu=new Ne,Dd=new Ne,Ld=new Ne,io=new Ne;function Lg(r,e,t,n,s){for(let o=0,c=r.length-3;o<=c;o+=3){io.fromArray(r,o);const u=s.x*Math.abs(io.x)+s.y*Math.abs(io.y)+s.z*Math.abs(io.z),f=e.dot(io),d=t.dot(io),p=n.dot(io);if(Math.max(-Math.max(f,d,p),Math.min(f,d,p))>u)return!1}return!0}const $I=new Vu,mu=new Ne,Pg=new Ne;class F_{constructor(e=new Ne,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):$I.setFromPoints(e).getCenter(n);let s=0;for(let o=0,c=e.length;o<c;o++)s=Math.max(s,n.distanceToSquared(e[o]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;mu.subVectors(e,this.center);const t=mu.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),s=(n-this.radius)*.5;this.center.addScaledVector(mu,s/n),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Pg.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(mu.copy(e.center).add(Pg)),this.expandByPoint(mu.copy(e.center).sub(Pg))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Tr=new Ne,Ug=new Ne,Pd=new Ne,xa=new Ne,Ig=new Ne,Ud=new Ne,Bg=new Ne;class QI{constructor(e=new Ne,t=new Ne(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Tr)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Tr.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Tr.copy(this.origin).addScaledVector(this.direction,t),Tr.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){Ug.copy(e).add(t).multiplyScalar(.5),Pd.copy(t).sub(e).normalize(),xa.copy(this.origin).sub(Ug);const o=e.distanceTo(t)*.5,c=-this.direction.dot(Pd),u=xa.dot(this.direction),f=-xa.dot(Pd),d=xa.lengthSq(),p=Math.abs(1-c*c);let m,g,v,A;if(p>0)if(m=c*f-u,g=c*u-f,A=o*p,m>=0)if(g>=-A)if(g<=A){const y=1/p;m*=y,g*=y,v=m*(m+c*g+2*u)+g*(c*m+g+2*f)+d}else g=o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;else g=-o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;else g<=-A?(m=Math.max(0,-(-c*o+u)),g=m>0?-o:Math.min(Math.max(-o,-f),o),v=-m*m+g*(g+2*f)+d):g<=A?(m=0,g=Math.min(Math.max(-o,-f),o),v=g*(g+2*f)+d):(m=Math.max(0,-(c*o+u)),g=m>0?o:Math.min(Math.max(-o,-f),o),v=-m*m+g*(g+2*f)+d);else g=c>0?-o:o,m=Math.max(0,-(c*g+u)),v=-m*m+g*(g+2*f)+d;return n&&n.copy(this.origin).addScaledVector(this.direction,m),s&&s.copy(Ug).addScaledVector(Pd,g),v}intersectSphere(e,t){Tr.subVectors(e.center,this.origin);const n=Tr.dot(this.direction),s=Tr.dot(Tr)-n*n,o=e.radius*e.radius;if(s>o)return null;const c=Math.sqrt(o-s),u=n-c,f=n+c;return f<0?null:u<0?this.at(f,t):this.at(u,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,s,o,c,u,f;const d=1/this.direction.x,p=1/this.direction.y,m=1/this.direction.z,g=this.origin;return d>=0?(n=(e.min.x-g.x)*d,s=(e.max.x-g.x)*d):(n=(e.max.x-g.x)*d,s=(e.min.x-g.x)*d),p>=0?(o=(e.min.y-g.y)*p,c=(e.max.y-g.y)*p):(o=(e.max.y-g.y)*p,c=(e.min.y-g.y)*p),n>c||o>s||((o>n||isNaN(n))&&(n=o),(c<s||isNaN(s))&&(s=c),m>=0?(u=(e.min.z-g.z)*m,f=(e.max.z-g.z)*m):(u=(e.max.z-g.z)*m,f=(e.min.z-g.z)*m),n>f||u>s)||((u>n||n!==n)&&(n=u),(f<s||s!==s)&&(s=f),s<0)?null:this.at(n>=0?n:s,t)}intersectsBox(e){return this.intersectBox(e,Tr)!==null}intersectTriangle(e,t,n,s,o){Ig.subVectors(t,e),Ud.subVectors(n,e),Bg.crossVectors(Ig,Ud);let c=this.direction.dot(Bg),u;if(c>0){if(s)return null;u=1}else if(c<0)u=-1,c=-c;else return null;xa.subVectors(this.origin,e);const f=u*this.direction.dot(Ud.crossVectors(xa,Ud));if(f<0)return null;const d=u*this.direction.dot(Ig.cross(xa));if(d<0||f+d>c)return null;const p=-u*xa.dot(Bg);return p<0?null:this.at(p/c,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class zn{constructor(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S){zn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S)}set(e,t,n,s,o,c,u,f,d,p,m,g,v,A,y,S){const _=this.elements;return _[0]=e,_[4]=t,_[8]=n,_[12]=s,_[1]=o,_[5]=c,_[9]=u,_[13]=f,_[2]=d,_[6]=p,_[10]=m,_[14]=g,_[3]=v,_[7]=A,_[11]=y,_[15]=S,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new zn().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/Ul.setFromMatrixColumn(e,0).length(),o=1/Ul.setFromMatrixColumn(e,1).length(),c=1/Ul.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*c,t[9]=n[9]*c,t[10]=n[10]*c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,s=e.y,o=e.z,c=Math.cos(n),u=Math.sin(n),f=Math.cos(s),d=Math.sin(s),p=Math.cos(o),m=Math.sin(o);if(e.order==="XYZ"){const g=c*p,v=c*m,A=u*p,y=u*m;t[0]=f*p,t[4]=-f*m,t[8]=d,t[1]=v+A*d,t[5]=g-y*d,t[9]=-u*f,t[2]=y-g*d,t[6]=A+v*d,t[10]=c*f}else if(e.order==="YXZ"){const g=f*p,v=f*m,A=d*p,y=d*m;t[0]=g+y*u,t[4]=A*u-v,t[8]=c*d,t[1]=c*m,t[5]=c*p,t[9]=-u,t[2]=v*u-A,t[6]=y+g*u,t[10]=c*f}else if(e.order==="ZXY"){const g=f*p,v=f*m,A=d*p,y=d*m;t[0]=g-y*u,t[4]=-c*m,t[8]=A+v*u,t[1]=v+A*u,t[5]=c*p,t[9]=y-g*u,t[2]=-c*d,t[6]=u,t[10]=c*f}else if(e.order==="ZYX"){const g=c*p,v=c*m,A=u*p,y=u*m;t[0]=f*p,t[4]=A*d-v,t[8]=g*d+y,t[1]=f*m,t[5]=y*d+g,t[9]=v*d-A,t[2]=-d,t[6]=u*f,t[10]=c*f}else if(e.order==="YZX"){const g=c*f,v=c*d,A=u*f,y=u*d;t[0]=f*p,t[4]=y-g*m,t[8]=A*m+v,t[1]=m,t[5]=c*p,t[9]=-u*p,t[2]=-d*p,t[6]=v*m+A,t[10]=g-y*m}else if(e.order==="XZY"){const g=c*f,v=c*d,A=u*f,y=u*d;t[0]=f*p,t[4]=-m,t[8]=d*p,t[1]=g*m+y,t[5]=c*p,t[9]=v*m-A,t[2]=A*m-v,t[6]=u*p,t[10]=y*m+g}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(KI,e,jI)}lookAt(e,t,n){const s=this.elements;return qi.subVectors(e,t),qi.lengthSq()===0&&(qi.z=1),qi.normalize(),Aa.crossVectors(n,qi),Aa.lengthSq()===0&&(Math.abs(n.z)===1?qi.x+=1e-4:qi.z+=1e-4,qi.normalize(),Aa.crossVectors(n,qi)),Aa.normalize(),Id.crossVectors(qi,Aa),s[0]=Aa.x,s[4]=Id.x,s[8]=qi.x,s[1]=Aa.y,s[5]=Id.y,s[9]=qi.y,s[2]=Aa.z,s[6]=Id.z,s[10]=qi.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,c=n[0],u=n[4],f=n[8],d=n[12],p=n[1],m=n[5],g=n[9],v=n[13],A=n[2],y=n[6],S=n[10],_=n[14],b=n[3],E=n[7],R=n[11],D=n[15],L=s[0],w=s[4],B=s[8],C=s[12],T=s[1],O=s[5],X=s[9],$=s[13],z=s[2],k=s[6],I=s[10],Y=s[14],q=s[3],J=s[7],F=s[11],ee=s[15];return o[0]=c*L+u*T+f*z+d*q,o[4]=c*w+u*O+f*k+d*J,o[8]=c*B+u*X+f*I+d*F,o[12]=c*C+u*$+f*Y+d*ee,o[1]=p*L+m*T+g*z+v*q,o[5]=p*w+m*O+g*k+v*J,o[9]=p*B+m*X+g*I+v*F,o[13]=p*C+m*$+g*Y+v*ee,o[2]=A*L+y*T+S*z+_*q,o[6]=A*w+y*O+S*k+_*J,o[10]=A*B+y*X+S*I+_*F,o[14]=A*C+y*$+S*Y+_*ee,o[3]=b*L+E*T+R*z+D*q,o[7]=b*w+E*O+R*k+D*J,o[11]=b*B+E*X+R*I+D*F,o[15]=b*C+E*$+R*Y+D*ee,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],o=e[12],c=e[1],u=e[5],f=e[9],d=e[13],p=e[2],m=e[6],g=e[10],v=e[14],A=e[3],y=e[7],S=e[11],_=e[15];return A*(+o*f*m-s*d*m-o*u*g+n*d*g+s*u*v-n*f*v)+y*(+t*f*v-t*d*g+o*c*g-s*c*v+s*d*p-o*f*p)+S*(+t*d*m-t*u*v-o*c*m+n*c*v+o*u*p-n*d*p)+_*(-s*u*p-t*f*m+t*u*g+s*c*m-n*c*g+n*f*p)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],c=e[4],u=e[5],f=e[6],d=e[7],p=e[8],m=e[9],g=e[10],v=e[11],A=e[12],y=e[13],S=e[14],_=e[15],b=m*S*d-y*g*d+y*f*v-u*S*v-m*f*_+u*g*_,E=A*g*d-p*S*d-A*f*v+c*S*v+p*f*_-c*g*_,R=p*y*d-A*m*d+A*u*v-c*y*v-p*u*_+c*m*_,D=A*m*f-p*y*f-A*u*g+c*y*g+p*u*S-c*m*S,L=t*b+n*E+s*R+o*D;if(L===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/L;return e[0]=b*w,e[1]=(y*g*o-m*S*o-y*s*v+n*S*v+m*s*_-n*g*_)*w,e[2]=(u*S*o-y*f*o+y*s*d-n*S*d-u*s*_+n*f*_)*w,e[3]=(m*f*o-u*g*o-m*s*d+n*g*d+u*s*v-n*f*v)*w,e[4]=E*w,e[5]=(p*S*o-A*g*o+A*s*v-t*S*v-p*s*_+t*g*_)*w,e[6]=(A*f*o-c*S*o-A*s*d+t*S*d+c*s*_-t*f*_)*w,e[7]=(c*g*o-p*f*o+p*s*d-t*g*d-c*s*v+t*f*v)*w,e[8]=R*w,e[9]=(A*m*o-p*y*o-A*n*v+t*y*v+p*n*_-t*m*_)*w,e[10]=(c*y*o-A*u*o+A*n*d-t*y*d-c*n*_+t*u*_)*w,e[11]=(p*u*o-c*m*o-p*n*d+t*m*d+c*n*v-t*u*v)*w,e[12]=D*w,e[13]=(p*y*s-A*m*s+A*n*g-t*y*g-p*n*S+t*m*S)*w,e[14]=(A*u*s-c*y*s-A*n*f+t*y*f+c*n*S-t*u*S)*w,e[15]=(c*m*s-p*u*s+p*n*f-t*m*f-c*n*g+t*u*g)*w,this}scale(e){const t=this.elements,n=e.x,s=e.y,o=e.z;return t[0]*=n,t[4]*=s,t[8]*=o,t[1]*=n,t[5]*=s,t[9]*=o,t[2]*=n,t[6]*=s,t[10]*=o,t[3]*=n,t[7]*=s,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),s=Math.sin(t),o=1-n,c=e.x,u=e.y,f=e.z,d=o*c,p=o*u;return this.set(d*c+n,d*u-s*f,d*f+s*u,0,d*u+s*f,p*u+n,p*f-s*c,0,d*f-s*u,p*f+s*c,o*f*f+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,o,c){return this.set(1,n,o,0,e,1,c,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,o=t._x,c=t._y,u=t._z,f=t._w,d=o+o,p=c+c,m=u+u,g=o*d,v=o*p,A=o*m,y=c*p,S=c*m,_=u*m,b=f*d,E=f*p,R=f*m,D=n.x,L=n.y,w=n.z;return s[0]=(1-(y+_))*D,s[1]=(v+R)*D,s[2]=(A-E)*D,s[3]=0,s[4]=(v-R)*L,s[5]=(1-(g+_))*L,s[6]=(S+b)*L,s[7]=0,s[8]=(A+E)*w,s[9]=(S-b)*w,s[10]=(1-(g+y))*w,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let o=Ul.set(s[0],s[1],s[2]).length();const c=Ul.set(s[4],s[5],s[6]).length(),u=Ul.set(s[8],s[9],s[10]).length();this.determinant()<0&&(o=-o),e.x=s[12],e.y=s[13],e.z=s[14],Rs.copy(this);const d=1/o,p=1/c,m=1/u;return Rs.elements[0]*=d,Rs.elements[1]*=d,Rs.elements[2]*=d,Rs.elements[4]*=p,Rs.elements[5]*=p,Rs.elements[6]*=p,Rs.elements[8]*=m,Rs.elements[9]*=m,Rs.elements[10]*=m,t.setFromRotationMatrix(Rs),n.x=o,n.y=c,n.z=u,this}makePerspective(e,t,n,s,o,c,u=Nr){const f=this.elements,d=2*o/(t-e),p=2*o/(n-s),m=(t+e)/(t-e),g=(n+s)/(n-s);let v,A;if(u===Nr)v=-(c+o)/(c-o),A=-2*c*o/(c-o);else if(u===Sh)v=-c/(c-o),A=-c*o/(c-o);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+u);return f[0]=d,f[4]=0,f[8]=m,f[12]=0,f[1]=0,f[5]=p,f[9]=g,f[13]=0,f[2]=0,f[6]=0,f[10]=v,f[14]=A,f[3]=0,f[7]=0,f[11]=-1,f[15]=0,this}makeOrthographic(e,t,n,s,o,c,u=Nr){const f=this.elements,d=1/(t-e),p=1/(n-s),m=1/(c-o),g=(t+e)*d,v=(n+s)*p;let A,y;if(u===Nr)A=(c+o)*m,y=-2*m;else if(u===Sh)A=o*m,y=-1*m;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+u);return f[0]=2*d,f[4]=0,f[8]=0,f[12]=-g,f[1]=0,f[5]=2*p,f[9]=0,f[13]=-v,f[2]=0,f[6]=0,f[10]=y,f[14]=-A,f[3]=0,f[7]=0,f[11]=0,f[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let s=0;s<16;s++)if(t[s]!==n[s])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Ul=new Ne,Rs=new zn,KI=new Ne(0,0,0),jI=new Ne(1,1,1),Aa=new Ne,Id=new Ne,qi=new Ne,RM=new zn,wM=new Gu;class kr{constructor(e=0,t=0,n=0,s=kr.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,o=s[0],c=s[4],u=s[8],f=s[1],d=s[5],p=s[9],m=s[2],g=s[6],v=s[10];switch(t){case"XYZ":this._y=Math.asin(Yt(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-p,v),this._z=Math.atan2(-c,o)):(this._x=Math.atan2(g,d),this._z=0);break;case"YXZ":this._x=Math.asin(-Yt(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(u,v),this._z=Math.atan2(f,d)):(this._y=Math.atan2(-m,o),this._z=0);break;case"ZXY":this._x=Math.asin(Yt(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(-m,v),this._z=Math.atan2(-c,d)):(this._y=0,this._z=Math.atan2(f,o));break;case"ZYX":this._y=Math.asin(-Yt(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(g,v),this._z=Math.atan2(f,o)):(this._x=0,this._z=Math.atan2(-c,d));break;case"YZX":this._z=Math.asin(Yt(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(-p,d),this._y=Math.atan2(-m,o)):(this._x=0,this._y=Math.atan2(u,v));break;case"XZY":this._z=Math.asin(-Yt(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(g,d),this._y=Math.atan2(u,o)):(this._x=Math.atan2(-p,v),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return RM.makeRotationFromQuaternion(e),this.setFromRotationMatrix(RM,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return wM.setFromEuler(this),this.setFromQuaternion(wM,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}kr.DEFAULT_ORDER="XYZ";class ET{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let ZI=0;const DM=new Ne,Il=new Gu,br=new zn,Bd=new Ne,gu=new Ne,JI=new Ne,e3=new Gu,LM=new Ne(1,0,0),PM=new Ne(0,1,0),UM=new Ne(0,0,1),IM={type:"added"},t3={type:"removed"},Bl={type:"childadded",child:null},Fg={type:"childremoved",child:null};class Zi extends fc{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:ZI++}),this.uuid=Hu(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Zi.DEFAULT_UP.clone();const e=new Ne,t=new kr,n=new Gu,s=new Ne(1,1,1);function o(){n.setFromEuler(t,!1)}function c(){t.setFromQuaternion(n,void 0,!1)}t._onChange(o),n._onChange(c),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new zn},normalMatrix:{value:new It}}),this.matrix=new zn,this.matrixWorld=new zn,this.matrixAutoUpdate=Zi.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Zi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new ET,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Il.setFromAxisAngle(e,t),this.quaternion.multiply(Il),this}rotateOnWorldAxis(e,t){return Il.setFromAxisAngle(e,t),this.quaternion.premultiply(Il),this}rotateX(e){return this.rotateOnAxis(LM,e)}rotateY(e){return this.rotateOnAxis(PM,e)}rotateZ(e){return this.rotateOnAxis(UM,e)}translateOnAxis(e,t){return DM.copy(e).applyQuaternion(this.quaternion),this.position.add(DM.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(LM,e)}translateY(e){return this.translateOnAxis(PM,e)}translateZ(e){return this.translateOnAxis(UM,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(br.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Bd.copy(e):Bd.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),gu.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?br.lookAt(gu,Bd,this.up):br.lookAt(Bd,gu,this.up),this.quaternion.setFromRotationMatrix(br),s&&(br.extractRotation(s.matrixWorld),Il.setFromRotationMatrix(br),this.quaternion.premultiply(Il.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(IM),Bl.child=e,this.dispatchEvent(Bl),Bl.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(t3),Fg.child=e,this.dispatchEvent(Fg),Fg.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),br.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),br.multiply(e.parent.matrixWorld)),e.applyMatrix4(br),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(IM),Bl.child=e,this.dispatchEvent(Bl),Bl.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,s=this.children.length;n<s;n++){const c=this.children[n].getObjectByProperty(e,t);if(c!==void 0)return c}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const s=this.children;for(let o=0,c=s.length;o<c;o++)s[o].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(gu,e,JI),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(gu,e3,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const s=this.children;for(let o=0,c=s.length;o<c;o++)s[o].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.geometryInfo=this._geometryInfo.map(u=>({...u,boundingBox:u.boundingBox?{min:u.boundingBox.min.toArray(),max:u.boundingBox.max.toArray()}:void 0,boundingSphere:u.boundingSphere?{radius:u.boundingSphere.radius,center:u.boundingSphere.center.toArray()}:void 0})),s.instanceInfo=this._instanceInfo.map(u=>({...u})),s.availableInstanceIds=this._availableInstanceIds.slice(),s.availableGeometryIds=this._availableGeometryIds.slice(),s.nextIndexStart=this._nextIndexStart,s.nextVertexStart=this._nextVertexStart,s.geometryCount=this._geometryCount,s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.matricesTexture=this._matricesTexture.toJSON(e),s.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(s.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(s.boundingSphere={center:this.boundingSphere.center.toArray(),radius:this.boundingSphere.radius}),this.boundingBox!==null&&(s.boundingBox={min:this.boundingBox.min.toArray(),max:this.boundingBox.max.toArray()}));function o(u,f){return u[f.uuid]===void 0&&(u[f.uuid]=f.toJSON(e)),f.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=o(e.geometries,this.geometry);const u=this.geometry.parameters;if(u!==void 0&&u.shapes!==void 0){const f=u.shapes;if(Array.isArray(f))for(let d=0,p=f.length;d<p;d++){const m=f[d];o(e.shapes,m)}else o(e.shapes,f)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(o(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const u=[];for(let f=0,d=this.material.length;f<d;f++)u.push(o(e.materials,this.material[f]));s.material=u}else s.material=o(e.materials,this.material);if(this.children.length>0){s.children=[];for(let u=0;u<this.children.length;u++)s.children.push(this.children[u].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let u=0;u<this.animations.length;u++){const f=this.animations[u];s.animations.push(o(e.animations,f))}}if(t){const u=c(e.geometries),f=c(e.materials),d=c(e.textures),p=c(e.images),m=c(e.shapes),g=c(e.skeletons),v=c(e.animations),A=c(e.nodes);u.length>0&&(n.geometries=u),f.length>0&&(n.materials=f),d.length>0&&(n.textures=d),p.length>0&&(n.images=p),m.length>0&&(n.shapes=m),g.length>0&&(n.skeletons=g),v.length>0&&(n.animations=v),A.length>0&&(n.nodes=A)}return n.object=s,n;function c(u){const f=[];for(const d in u){const p=u[d];delete p.metadata,f.push(p)}return f}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const s=e.children[n];this.add(s.clone())}return this}}Zi.DEFAULT_UP=new Ne(0,1,0);Zi.DEFAULT_MATRIX_AUTO_UPDATE=!0;Zi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const ws=new Ne,Cr=new Ne,Ng=new Ne,Rr=new Ne,Fl=new Ne,Nl=new Ne,BM=new Ne,Og=new Ne,zg=new Ne,Hg=new Ne,Gg=new Un,Vg=new Un,kg=new Un;class Ps{constructor(e=new Ne,t=new Ne,n=new Ne){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,s){s.subVectors(n,t),ws.subVectors(e,t),s.cross(ws);const o=s.lengthSq();return o>0?s.multiplyScalar(1/Math.sqrt(o)):s.set(0,0,0)}static getBarycoord(e,t,n,s,o){ws.subVectors(s,t),Cr.subVectors(n,t),Ng.subVectors(e,t);const c=ws.dot(ws),u=ws.dot(Cr),f=ws.dot(Ng),d=Cr.dot(Cr),p=Cr.dot(Ng),m=c*d-u*u;if(m===0)return o.set(0,0,0),null;const g=1/m,v=(d*f-u*p)*g,A=(c*p-u*f)*g;return o.set(1-v-A,A,v)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,Rr)===null?!1:Rr.x>=0&&Rr.y>=0&&Rr.x+Rr.y<=1}static getInterpolation(e,t,n,s,o,c,u,f){return this.getBarycoord(e,t,n,s,Rr)===null?(f.x=0,f.y=0,"z"in f&&(f.z=0),"w"in f&&(f.w=0),null):(f.setScalar(0),f.addScaledVector(o,Rr.x),f.addScaledVector(c,Rr.y),f.addScaledVector(u,Rr.z),f)}static getInterpolatedAttribute(e,t,n,s,o,c){return Gg.setScalar(0),Vg.setScalar(0),kg.setScalar(0),Gg.fromBufferAttribute(e,t),Vg.fromBufferAttribute(e,n),kg.fromBufferAttribute(e,s),c.setScalar(0),c.addScaledVector(Gg,o.x),c.addScaledVector(Vg,o.y),c.addScaledVector(kg,o.z),c}static isFrontFacing(e,t,n,s){return ws.subVectors(n,t),Cr.subVectors(e,t),ws.cross(Cr).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return ws.subVectors(this.c,this.b),Cr.subVectors(this.a,this.b),ws.cross(Cr).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Ps.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Ps.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,s,o){return Ps.getInterpolation(e,this.a,this.b,this.c,t,n,s,o)}containsPoint(e){return Ps.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Ps.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,s=this.b,o=this.c;let c,u;Fl.subVectors(s,n),Nl.subVectors(o,n),Og.subVectors(e,n);const f=Fl.dot(Og),d=Nl.dot(Og);if(f<=0&&d<=0)return t.copy(n);zg.subVectors(e,s);const p=Fl.dot(zg),m=Nl.dot(zg);if(p>=0&&m<=p)return t.copy(s);const g=f*m-p*d;if(g<=0&&f>=0&&p<=0)return c=f/(f-p),t.copy(n).addScaledVector(Fl,c);Hg.subVectors(e,o);const v=Fl.dot(Hg),A=Nl.dot(Hg);if(A>=0&&v<=A)return t.copy(o);const y=v*d-f*A;if(y<=0&&d>=0&&A<=0)return u=d/(d-A),t.copy(n).addScaledVector(Nl,u);const S=p*A-v*m;if(S<=0&&m-p>=0&&v-A>=0)return BM.subVectors(o,s),u=(m-p)/(m-p+(v-A)),t.copy(s).addScaledVector(BM,u);const _=1/(S+y+g);return c=y*_,u=g*_,t.copy(n).addScaledVector(Fl,c).addScaledVector(Nl,u)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const TT={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ya={h:0,s:0,l:0},Fd={h:0,s:0,l:0};function Wg(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}class hn{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=$i){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Kt.toWorkingColorSpace(this,t),this}setRGB(e,t,n,s=Kt.workingColorSpace){return this.r=e,this.g=t,this.b=n,Kt.toWorkingColorSpace(this,s),this}setHSL(e,t,n,s=Kt.workingColorSpace){if(e=NI(e,1),t=Yt(t,0,1),n=Yt(n,0,1),t===0)this.r=this.g=this.b=n;else{const o=n<=.5?n*(1+t):n+t-n*t,c=2*n-o;this.r=Wg(c,o,e+1/3),this.g=Wg(c,o,e),this.b=Wg(c,o,e-1/3)}return Kt.toWorkingColorSpace(this,s),this}setStyle(e,t=$i){function n(o){o!==void 0&&parseFloat(o)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let o;const c=s[1],u=s[2];switch(c){case"rgb":case"rgba":if(o=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setRGB(Math.min(255,parseInt(o[1],10))/255,Math.min(255,parseInt(o[2],10))/255,Math.min(255,parseInt(o[3],10))/255,t);if(o=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setRGB(Math.min(100,parseInt(o[1],10))/100,Math.min(100,parseInt(o[2],10))/100,Math.min(100,parseInt(o[3],10))/100,t);break;case"hsl":case"hsla":if(o=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(u))return n(o[4]),this.setHSL(parseFloat(o[1])/360,parseFloat(o[2])/100,parseFloat(o[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const o=s[1],c=o.length;if(c===3)return this.setRGB(parseInt(o.charAt(0),16)/15,parseInt(o.charAt(1),16)/15,parseInt(o.charAt(2),16)/15,t);if(c===6)return this.setHex(parseInt(o,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=$i){const n=TT[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Hr(e.r),this.g=Hr(e.g),this.b=Hr(e.b),this}copyLinearToSRGB(e){return this.r=Zl(e.r),this.g=Zl(e.g),this.b=Zl(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=$i){return Kt.fromWorkingColorSpace(mi.copy(this),e),Math.round(Yt(mi.r*255,0,255))*65536+Math.round(Yt(mi.g*255,0,255))*256+Math.round(Yt(mi.b*255,0,255))}getHexString(e=$i){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Kt.workingColorSpace){Kt.fromWorkingColorSpace(mi.copy(this),t);const n=mi.r,s=mi.g,o=mi.b,c=Math.max(n,s,o),u=Math.min(n,s,o);let f,d;const p=(u+c)/2;if(u===c)f=0,d=0;else{const m=c-u;switch(d=p<=.5?m/(c+u):m/(2-c-u),c){case n:f=(s-o)/m+(s<o?6:0);break;case s:f=(o-n)/m+2;break;case o:f=(n-s)/m+4;break}f/=6}return e.h=f,e.s=d,e.l=p,e}getRGB(e,t=Kt.workingColorSpace){return Kt.fromWorkingColorSpace(mi.copy(this),t),e.r=mi.r,e.g=mi.g,e.b=mi.b,e}getStyle(e=$i){Kt.fromWorkingColorSpace(mi.copy(this),e);const t=mi.r,n=mi.g,s=mi.b;return e!==$i?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(e,t,n){return this.getHSL(ya),this.setHSL(ya.h+e,ya.s+t,ya.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ya),e.getHSL(Fd);const n=Cg(ya.h,Fd.h,t),s=Cg(ya.s,Fd.s,t),o=Cg(ya.l,Fd.l,t);return this.setHSL(n,s,o),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,s=this.b,o=e.elements;return this.r=o[0]*t+o[3]*n+o[6]*s,this.g=o[1]*t+o[4]*n+o[7]*s,this.b=o[2]*t+o[5]*n+o[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const mi=new hn;hn.NAMES=TT;let n3=0;class wh extends fc{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:n3++}),this.uuid=Hu(),this.name="",this.type="Material",this.blending=jl,this.side=Ua,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=_0,this.blendDst=v0,this.blendEquation=_o,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new hn(0,0,0),this.blendAlpha=0,this.depthFunc=rc,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=AM,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Rl,this.stencilZFail=Rl,this.stencilZPass=Rl,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(n):s&&s.isVector3&&n&&n.isVector3?s.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==jl&&(n.blending=this.blending),this.side!==Ua&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==_0&&(n.blendSrc=this.blendSrc),this.blendDst!==v0&&(n.blendDst=this.blendDst),this.blendEquation!==_o&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==rc&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==AM&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Rl&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Rl&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Rl&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function s(o){const c=[];for(const u in o){const f=o[u];delete f.metadata,c.push(f)}return c}if(t){const o=s(e.textures),c=s(e.images);o.length>0&&(n.textures=o),c.length>0&&(n.images=c)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const s=t.length;n=new Array(s);for(let o=0;o!==s;++o)n[o]=t[o].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class N_ extends wh{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new hn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new kr,this.combine=fT,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Nn=new Ne,Nd=new mn;let i3=0;class Ks{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:i3++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=yM,this.updateRanges=[],this.gpuType=Fr,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,o=this.itemSize;s<o;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Nd.fromBufferAttribute(this,t),Nd.applyMatrix3(e),this.setXY(t,Nd.x,Nd.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyMatrix3(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyMatrix4(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.applyNormalMatrix(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Nn.fromBufferAttribute(this,t),Nn.transformDirection(e),this.setXYZ(t,Nn.x,Nn.y,Nn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=hu(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=wi(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=hu(t,this.array)),t}setX(e,t){return this.normalized&&(t=wi(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=hu(t,this.array)),t}setY(e,t){return this.normalized&&(t=wi(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=hu(t,this.array)),t}setZ(e,t){return this.normalized&&(t=wi(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=hu(t,this.array)),t}setW(e,t){return this.normalized&&(t=wi(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=wi(t,this.array),n=wi(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.normalized&&(t=wi(t,this.array),n=wi(n,this.array),s=wi(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.normalized&&(t=wi(t,this.array),n=wi(n,this.array),s=wi(s,this.array),o=wi(o,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==yM&&(e.usage=this.usage),e}}class bT extends Ks{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class CT extends Ks{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class To extends Ks{constructor(e,t,n){super(new Float32Array(e),t,n)}}let s3=0;const cs=new zn,Xg=new Zi,Ol=new Ne,Yi=new Vu,_u=new Vu,ei=new Ne;class Do extends fc{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:s3++}),this.uuid=Hu(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(yT(e)?CT:bT)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const o=new It().getNormalMatrix(e);n.applyNormalMatrix(o),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return cs.makeRotationFromQuaternion(e),this.applyMatrix4(cs),this}rotateX(e){return cs.makeRotationX(e),this.applyMatrix4(cs),this}rotateY(e){return cs.makeRotationY(e),this.applyMatrix4(cs),this}rotateZ(e){return cs.makeRotationZ(e),this.applyMatrix4(cs),this}translate(e,t,n){return cs.makeTranslation(e,t,n),this.applyMatrix4(cs),this}scale(e,t,n){return cs.makeScale(e,t,n),this.applyMatrix4(cs),this}lookAt(e){return Xg.lookAt(e),Xg.updateMatrix(),this.applyMatrix4(Xg.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ol).negate(),this.translate(Ol.x,Ol.y,Ol.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let s=0,o=e.length;s<o;s++){const c=e[s];n.push(c.x,c.y,c.z||0)}this.setAttribute("position",new To(n,3))}else{const n=Math.min(e.length,t.count);for(let s=0;s<n;s++){const o=e[s];t.setXYZ(s,o.x,o.y,o.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Vu);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new Ne(-1/0,-1/0,-1/0),new Ne(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,s=t.length;n<s;n++){const o=t[n];Yi.setFromBufferAttribute(o),this.morphTargetsRelative?(ei.addVectors(this.boundingBox.min,Yi.min),this.boundingBox.expandByPoint(ei),ei.addVectors(this.boundingBox.max,Yi.max),this.boundingBox.expandByPoint(ei)):(this.boundingBox.expandByPoint(Yi.min),this.boundingBox.expandByPoint(Yi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new F_);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new Ne,1/0);return}if(e){const n=this.boundingSphere.center;if(Yi.setFromBufferAttribute(e),t)for(let o=0,c=t.length;o<c;o++){const u=t[o];_u.setFromBufferAttribute(u),this.morphTargetsRelative?(ei.addVectors(Yi.min,_u.min),Yi.expandByPoint(ei),ei.addVectors(Yi.max,_u.max),Yi.expandByPoint(ei)):(Yi.expandByPoint(_u.min),Yi.expandByPoint(_u.max))}Yi.getCenter(n);let s=0;for(let o=0,c=e.count;o<c;o++)ei.fromBufferAttribute(e,o),s=Math.max(s,n.distanceToSquared(ei));if(t)for(let o=0,c=t.length;o<c;o++){const u=t[o],f=this.morphTargetsRelative;for(let d=0,p=u.count;d<p;d++)ei.fromBufferAttribute(u,d),f&&(Ol.fromBufferAttribute(e,d),ei.add(Ol)),s=Math.max(s,n.distanceToSquared(ei))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,s=t.normal,o=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Ks(new Float32Array(4*n.count),4));const c=this.getAttribute("tangent"),u=[],f=[];for(let B=0;B<n.count;B++)u[B]=new Ne,f[B]=new Ne;const d=new Ne,p=new Ne,m=new Ne,g=new mn,v=new mn,A=new mn,y=new Ne,S=new Ne;function _(B,C,T){d.fromBufferAttribute(n,B),p.fromBufferAttribute(n,C),m.fromBufferAttribute(n,T),g.fromBufferAttribute(o,B),v.fromBufferAttribute(o,C),A.fromBufferAttribute(o,T),p.sub(d),m.sub(d),v.sub(g),A.sub(g);const O=1/(v.x*A.y-A.x*v.y);isFinite(O)&&(y.copy(p).multiplyScalar(A.y).addScaledVector(m,-v.y).multiplyScalar(O),S.copy(m).multiplyScalar(v.x).addScaledVector(p,-A.x).multiplyScalar(O),u[B].add(y),u[C].add(y),u[T].add(y),f[B].add(S),f[C].add(S),f[T].add(S))}let b=this.groups;b.length===0&&(b=[{start:0,count:e.count}]);for(let B=0,C=b.length;B<C;++B){const T=b[B],O=T.start,X=T.count;for(let $=O,z=O+X;$<z;$+=3)_(e.getX($+0),e.getX($+1),e.getX($+2))}const E=new Ne,R=new Ne,D=new Ne,L=new Ne;function w(B){D.fromBufferAttribute(s,B),L.copy(D);const C=u[B];E.copy(C),E.sub(D.multiplyScalar(D.dot(C))).normalize(),R.crossVectors(L,C);const O=R.dot(f[B])<0?-1:1;c.setXYZW(B,E.x,E.y,E.z,O)}for(let B=0,C=b.length;B<C;++B){const T=b[B],O=T.start,X=T.count;for(let $=O,z=O+X;$<z;$+=3)w(e.getX($+0)),w(e.getX($+1)),w(e.getX($+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Ks(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let g=0,v=n.count;g<v;g++)n.setXYZ(g,0,0,0);const s=new Ne,o=new Ne,c=new Ne,u=new Ne,f=new Ne,d=new Ne,p=new Ne,m=new Ne;if(e)for(let g=0,v=e.count;g<v;g+=3){const A=e.getX(g+0),y=e.getX(g+1),S=e.getX(g+2);s.fromBufferAttribute(t,A),o.fromBufferAttribute(t,y),c.fromBufferAttribute(t,S),p.subVectors(c,o),m.subVectors(s,o),p.cross(m),u.fromBufferAttribute(n,A),f.fromBufferAttribute(n,y),d.fromBufferAttribute(n,S),u.add(p),f.add(p),d.add(p),n.setXYZ(A,u.x,u.y,u.z),n.setXYZ(y,f.x,f.y,f.z),n.setXYZ(S,d.x,d.y,d.z)}else for(let g=0,v=t.count;g<v;g+=3)s.fromBufferAttribute(t,g+0),o.fromBufferAttribute(t,g+1),c.fromBufferAttribute(t,g+2),p.subVectors(c,o),m.subVectors(s,o),p.cross(m),n.setXYZ(g+0,p.x,p.y,p.z),n.setXYZ(g+1,p.x,p.y,p.z),n.setXYZ(g+2,p.x,p.y,p.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)ei.fromBufferAttribute(e,t),ei.normalize(),e.setXYZ(t,ei.x,ei.y,ei.z)}toNonIndexed(){function e(u,f){const d=u.array,p=u.itemSize,m=u.normalized,g=new d.constructor(f.length*p);let v=0,A=0;for(let y=0,S=f.length;y<S;y++){u.isInterleavedBufferAttribute?v=f[y]*u.data.stride+u.offset:v=f[y]*p;for(let _=0;_<p;_++)g[A++]=d[v++]}return new Ks(g,p,m)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Do,n=this.index.array,s=this.attributes;for(const u in s){const f=s[u],d=e(f,n);t.setAttribute(u,d)}const o=this.morphAttributes;for(const u in o){const f=[],d=o[u];for(let p=0,m=d.length;p<m;p++){const g=d[p],v=e(g,n);f.push(v)}t.morphAttributes[u]=f}t.morphTargetsRelative=this.morphTargetsRelative;const c=this.groups;for(let u=0,f=c.length;u<f;u++){const d=c[u];t.addGroup(d.start,d.count,d.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const f=this.parameters;for(const d in f)f[d]!==void 0&&(e[d]=f[d]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const f in n){const d=n[f];e.data.attributes[f]=d.toJSON(e.data)}const s={};let o=!1;for(const f in this.morphAttributes){const d=this.morphAttributes[f],p=[];for(let m=0,g=d.length;m<g;m++){const v=d[m];p.push(v.toJSON(e.data))}p.length>0&&(s[f]=p,o=!0)}o&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const c=this.groups;c.length>0&&(e.data.groups=JSON.parse(JSON.stringify(c)));const u=this.boundingSphere;return u!==null&&(e.data.boundingSphere={center:u.center.toArray(),radius:u.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const s=e.attributes;for(const d in s){const p=s[d];this.setAttribute(d,p.clone(t))}const o=e.morphAttributes;for(const d in o){const p=[],m=o[d];for(let g=0,v=m.length;g<v;g++)p.push(m[g].clone(t));this.morphAttributes[d]=p}this.morphTargetsRelative=e.morphTargetsRelative;const c=e.groups;for(let d=0,p=c.length;d<p;d++){const m=c[d];this.addGroup(m.start,m.count,m.materialIndex)}const u=e.boundingBox;u!==null&&(this.boundingBox=u.clone());const f=e.boundingSphere;return f!==null&&(this.boundingSphere=f.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const FM=new zn,so=new QI,Od=new F_,NM=new Ne,zd=new Ne,Hd=new Ne,Gd=new Ne,qg=new Ne,Vd=new Ne,OM=new Ne,kd=new Ne;class Qs extends Zi{constructor(e=new Do,t=new N_){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const s=t[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,c=s.length;o<c;o++){const u=s[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[u]=o}}}}getVertexPosition(e,t){const n=this.geometry,s=n.attributes.position,o=n.morphAttributes.position,c=n.morphTargetsRelative;t.fromBufferAttribute(s,e);const u=this.morphTargetInfluences;if(o&&u){Vd.set(0,0,0);for(let f=0,d=o.length;f<d;f++){const p=u[f],m=o[f];p!==0&&(qg.fromBufferAttribute(m,e),c?Vd.addScaledVector(qg,p):Vd.addScaledVector(qg.sub(t),p))}t.add(Vd)}return t}raycast(e,t){const n=this.geometry,s=this.material,o=this.matrixWorld;s!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Od.copy(n.boundingSphere),Od.applyMatrix4(o),so.copy(e.ray).recast(e.near),!(Od.containsPoint(so.origin)===!1&&(so.intersectSphere(Od,NM)===null||so.origin.distanceToSquared(NM)>(e.far-e.near)**2))&&(FM.copy(o).invert(),so.copy(e.ray).applyMatrix4(FM),!(n.boundingBox!==null&&so.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,so)))}_computeIntersections(e,t,n){let s;const o=this.geometry,c=this.material,u=o.index,f=o.attributes.position,d=o.attributes.uv,p=o.attributes.uv1,m=o.attributes.normal,g=o.groups,v=o.drawRange;if(u!==null)if(Array.isArray(c))for(let A=0,y=g.length;A<y;A++){const S=g[A],_=c[S.materialIndex],b=Math.max(S.start,v.start),E=Math.min(u.count,Math.min(S.start+S.count,v.start+v.count));for(let R=b,D=E;R<D;R+=3){const L=u.getX(R),w=u.getX(R+1),B=u.getX(R+2);s=Wd(this,_,e,n,d,p,m,L,w,B),s&&(s.faceIndex=Math.floor(R/3),s.face.materialIndex=S.materialIndex,t.push(s))}}else{const A=Math.max(0,v.start),y=Math.min(u.count,v.start+v.count);for(let S=A,_=y;S<_;S+=3){const b=u.getX(S),E=u.getX(S+1),R=u.getX(S+2);s=Wd(this,c,e,n,d,p,m,b,E,R),s&&(s.faceIndex=Math.floor(S/3),t.push(s))}}else if(f!==void 0)if(Array.isArray(c))for(let A=0,y=g.length;A<y;A++){const S=g[A],_=c[S.materialIndex],b=Math.max(S.start,v.start),E=Math.min(f.count,Math.min(S.start+S.count,v.start+v.count));for(let R=b,D=E;R<D;R+=3){const L=R,w=R+1,B=R+2;s=Wd(this,_,e,n,d,p,m,L,w,B),s&&(s.faceIndex=Math.floor(R/3),s.face.materialIndex=S.materialIndex,t.push(s))}}else{const A=Math.max(0,v.start),y=Math.min(f.count,v.start+v.count);for(let S=A,_=y;S<_;S+=3){const b=S,E=S+1,R=S+2;s=Wd(this,c,e,n,d,p,m,b,E,R),s&&(s.faceIndex=Math.floor(S/3),t.push(s))}}}}function r3(r,e,t,n,s,o,c,u){let f;if(e.side===Bi?f=n.intersectTriangle(c,o,s,!0,u):f=n.intersectTriangle(s,o,c,e.side===Ua,u),f===null)return null;kd.copy(u),kd.applyMatrix4(r.matrixWorld);const d=t.ray.origin.distanceTo(kd);return d<t.near||d>t.far?null:{distance:d,point:kd.clone(),object:r}}function Wd(r,e,t,n,s,o,c,u,f,d){r.getVertexPosition(u,zd),r.getVertexPosition(f,Hd),r.getVertexPosition(d,Gd);const p=r3(r,e,t,n,zd,Hd,Gd,OM);if(p){const m=new Ne;Ps.getBarycoord(OM,zd,Hd,Gd,m),s&&(p.uv=Ps.getInterpolatedAttribute(s,u,f,d,m,new mn)),o&&(p.uv1=Ps.getInterpolatedAttribute(o,u,f,d,m,new mn)),c&&(p.normal=Ps.getInterpolatedAttribute(c,u,f,d,m,new Ne),p.normal.dot(n.direction)>0&&p.normal.multiplyScalar(-1));const g={a:u,b:f,c:d,normal:new Ne,materialIndex:0};Ps.getNormal(zd,Hd,Gd,g.normal),p.face=g,p.barycoord=m}return p}class dc extends Do{constructor(e=1,t=1,n=1,s=1,o=1,c=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:s,heightSegments:o,depthSegments:c};const u=this;s=Math.floor(s),o=Math.floor(o),c=Math.floor(c);const f=[],d=[],p=[],m=[];let g=0,v=0;A("z","y","x",-1,-1,n,t,e,c,o,0),A("z","y","x",1,-1,n,t,-e,c,o,1),A("x","z","y",1,1,e,n,t,s,c,2),A("x","z","y",1,-1,e,n,-t,s,c,3),A("x","y","z",1,-1,e,t,n,s,o,4),A("x","y","z",-1,-1,e,t,-n,s,o,5),this.setIndex(f),this.setAttribute("position",new To(d,3)),this.setAttribute("normal",new To(p,3)),this.setAttribute("uv",new To(m,2));function A(y,S,_,b,E,R,D,L,w,B,C){const T=R/w,O=D/B,X=R/2,$=D/2,z=L/2,k=w+1,I=B+1;let Y=0,q=0;const J=new Ne;for(let F=0;F<I;F++){const ee=F*O-$;for(let ce=0;ce<k;ce++){const ie=ce*T-X;J[y]=ie*b,J[S]=ee*E,J[_]=z,d.push(J.x,J.y,J.z),J[y]=0,J[S]=0,J[_]=L>0?1:-1,p.push(J.x,J.y,J.z),m.push(ce/w),m.push(1-F/B),Y+=1}}for(let F=0;F<B;F++)for(let ee=0;ee<w;ee++){const ce=g+ee+k*F,ie=g+ee+k*(F+1),j=g+(ee+1)+k*(F+1),ue=g+(ee+1)+k*F;f.push(ce,ie,ue),f.push(ie,j,ue),q+=6}u.addGroup(v,q,C),v+=q,g+=Y}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new dc(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function cc(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const s=r[t][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=s.clone():Array.isArray(s)?e[t][n]=s.slice():e[t][n]=s}}return e}function Si(r){const e={};for(let t=0;t<r.length;t++){const n=cc(r[t]);for(const s in n)e[s]=n[s]}return e}function a3(r){const e=[];for(let t=0;t<r.length;t++)e.push(r[t].clone());return e}function RT(r){const e=r.getRenderTarget();return e===null?r.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:Kt.workingColorSpace}const o3={clone:cc,merge:Si};var l3=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,c3=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Ia extends wh{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=l3,this.fragmentShader=c3,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=cc(e.uniforms),this.uniformsGroups=a3(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const c=this.uniforms[s].value;c&&c.isTexture?t.uniforms[s]={type:"t",value:c.toJSON(e).uuid}:c&&c.isColor?t.uniforms[s]={type:"c",value:c.getHex()}:c&&c.isVector2?t.uniforms[s]={type:"v2",value:c.toArray()}:c&&c.isVector3?t.uniforms[s]={type:"v3",value:c.toArray()}:c&&c.isVector4?t.uniforms[s]={type:"v4",value:c.toArray()}:c&&c.isMatrix3?t.uniforms[s]={type:"m3",value:c.toArray()}:c&&c.isMatrix4?t.uniforms[s]={type:"m4",value:c.toArray()}:t.uniforms[s]={value:c}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const s in this.extensions)this.extensions[s]===!0&&(n[s]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class wT extends Zi{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new zn,this.projectionMatrix=new zn,this.projectionMatrixInverse=new zn,this.coordinateSystem=Nr}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Ma=new Ne,zM=new mn,HM=new mn;class Ds extends wT{constructor(e=50,t=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=t_*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(bg*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return t_*2*Math.atan(Math.tan(bg*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Ma.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(Ma.x,Ma.y).multiplyScalar(-e/Ma.z),Ma.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Ma.x,Ma.y).multiplyScalar(-e/Ma.z)}getViewSize(e,t){return this.getViewBounds(e,zM,HM),t.subVectors(HM,zM)}setViewOffset(e,t,n,s,o,c){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(bg*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,o=-.5*s;const c=this.view;if(this.view!==null&&this.view.enabled){const f=c.fullWidth,d=c.fullHeight;o+=c.offsetX*s/f,t-=c.offsetY*n/d,s*=c.width/f,n*=c.height/d}const u=this.filmOffset;u!==0&&(o+=e*u/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const zl=-90,Hl=1;class u3 extends Zi{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Ds(zl,Hl,e,t);s.layers=this.layers,this.add(s);const o=new Ds(zl,Hl,e,t);o.layers=this.layers,this.add(o);const c=new Ds(zl,Hl,e,t);c.layers=this.layers,this.add(c);const u=new Ds(zl,Hl,e,t);u.layers=this.layers,this.add(u);const f=new Ds(zl,Hl,e,t);f.layers=this.layers,this.add(f);const d=new Ds(zl,Hl,e,t);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,s,o,c,u,f]=t;for(const d of t)this.remove(d);if(e===Nr)n.up.set(0,1,0),n.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),o.up.set(0,0,-1),o.lookAt(0,1,0),c.up.set(0,0,1),c.lookAt(0,-1,0),u.up.set(0,1,0),u.lookAt(0,0,1),f.up.set(0,1,0),f.lookAt(0,0,-1);else if(e===Sh)n.up.set(0,-1,0),n.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),o.up.set(0,0,1),o.lookAt(0,1,0),c.up.set(0,0,-1),c.lookAt(0,-1,0),u.up.set(0,-1,0),u.lookAt(0,0,1),f.up.set(0,-1,0),f.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const d of t)this.add(d),d.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[o,c,u,f,d,p]=this.children,m=e.getRenderTarget(),g=e.getActiveCubeFace(),v=e.getActiveMipmapLevel(),A=e.xr.enabled;e.xr.enabled=!1;const y=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,s),e.render(t,o),e.setRenderTarget(n,1,s),e.render(t,c),e.setRenderTarget(n,2,s),e.render(t,u),e.setRenderTarget(n,3,s),e.render(t,f),e.setRenderTarget(n,4,s),e.render(t,d),n.texture.generateMipmaps=y,e.setRenderTarget(n,5,s),e.render(t,p),e.setRenderTarget(m,g,v),e.xr.enabled=A,n.texture.needsPMREMUpdate=!0}}class DT extends Mi{constructor(e=[],t=ac,n,s,o,c,u,f,d,p){super(e,t,n,s,o,c,u,f,d,p),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class f3 extends Ro{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];this.texture=new DT(s,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:$s}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new dc(5,5,5),o=new Ia({name:"CubemapFromEquirect",uniforms:cc(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Bi,blending:Da});o.uniforms.tEquirect.value=t;const c=new Qs(s,o),u=t.minFilter;return t.minFilter===yo&&(t.minFilter=$s),new u3(1,10,this).update(e,c),t.minFilter=u,c.geometry.dispose(),c.material.dispose(),this}clear(e,t=!0,n=!0,s=!0){const o=e.getRenderTarget();for(let c=0;c<6;c++)e.setRenderTarget(this,c),e.clear(t,n,s);e.setRenderTarget(o)}}class Xd extends Zi{constructor(){super(),this.isGroup=!0,this.type="Group"}}const d3={type:"move"};class Yg{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Xd,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Xd,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ne,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ne),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Xd,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ne,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ne),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let s=null,o=null,c=null;const u=this._targetRay,f=this._grip,d=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(d&&e.hand){c=!0;for(const y of e.hand.values()){const S=t.getJointPose(y,n),_=this._getHandJoint(d,y);S!==null&&(_.matrix.fromArray(S.transform.matrix),_.matrix.decompose(_.position,_.rotation,_.scale),_.matrixWorldNeedsUpdate=!0,_.jointRadius=S.radius),_.visible=S!==null}const p=d.joints["index-finger-tip"],m=d.joints["thumb-tip"],g=p.position.distanceTo(m.position),v=.02,A=.005;d.inputState.pinching&&g>v+A?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!d.inputState.pinching&&g<=v-A&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else f!==null&&e.gripSpace&&(o=t.getPose(e.gripSpace,n),o!==null&&(f.matrix.fromArray(o.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,o.linearVelocity?(f.hasLinearVelocity=!0,f.linearVelocity.copy(o.linearVelocity)):f.hasLinearVelocity=!1,o.angularVelocity?(f.hasAngularVelocity=!0,f.angularVelocity.copy(o.angularVelocity)):f.hasAngularVelocity=!1));u!==null&&(s=t.getPose(e.targetRaySpace,n),s===null&&o!==null&&(s=o),s!==null&&(u.matrix.fromArray(s.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,s.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(s.linearVelocity)):u.hasLinearVelocity=!1,s.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(s.angularVelocity)):u.hasAngularVelocity=!1,this.dispatchEvent(d3)))}return u!==null&&(u.visible=s!==null),f!==null&&(f.visible=o!==null),d!==null&&(d.visible=c!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Xd;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class h3 extends Zi{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new kr,this.environmentIntensity=1,this.environmentRotation=new kr,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}const $g=new Ne,p3=new Ne,m3=new It;class fo{constructor(e=new Ne(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=$g.subVectors(n,t).cross(p3.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta($g),s=this.normal.dot(n);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const o=-(e.start.dot(this.normal)+this.constant)/s;return o<0||o>1?null:t.copy(e.start).addScaledVector(n,o)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||m3.getNormalMatrix(e),s=this.coplanarPoint($g).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ro=new F_,qd=new Ne;class LT{constructor(e=new fo,t=new fo,n=new fo,s=new fo,o=new fo,c=new fo){this.planes=[e,t,n,s,o,c]}set(e,t,n,s,o,c){const u=this.planes;return u[0].copy(e),u[1].copy(t),u[2].copy(n),u[3].copy(s),u[4].copy(o),u[5].copy(c),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Nr){const n=this.planes,s=e.elements,o=s[0],c=s[1],u=s[2],f=s[3],d=s[4],p=s[5],m=s[6],g=s[7],v=s[8],A=s[9],y=s[10],S=s[11],_=s[12],b=s[13],E=s[14],R=s[15];if(n[0].setComponents(f-o,g-d,S-v,R-_).normalize(),n[1].setComponents(f+o,g+d,S+v,R+_).normalize(),n[2].setComponents(f+c,g+p,S+A,R+b).normalize(),n[3].setComponents(f-c,g-p,S-A,R-b).normalize(),n[4].setComponents(f-u,g-m,S-y,R-E).normalize(),t===Nr)n[5].setComponents(f+u,g+m,S+y,R+E).normalize();else if(t===Sh)n[5].setComponents(u,m,y,E).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),ro.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),ro.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ro)}intersectsSprite(e){return ro.center.set(0,0,0),ro.radius=.7071067811865476,ro.applyMatrix4(e.matrixWorld),this.intersectsSphere(ro)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let o=0;o<6;o++)if(t[o].distanceToPoint(n)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const s=t[n];if(qd.x=s.normal.x>0?e.max.x:e.min.x,qd.y=s.normal.y>0?e.max.y:e.min.y,qd.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(qd)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class PT extends Mi{constructor(e,t,n=Co,s,o,c,u=Bs,f=Bs,d,p=Iu){if(p!==Iu&&p!==Bu)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");super(null,s,o,c,u,f,p,n,d),this.isDepthTexture=!0,this.image={width:e,height:t},this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new B_(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class Dh extends Do{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const o=e/2,c=t/2,u=Math.floor(n),f=Math.floor(s),d=u+1,p=f+1,m=e/u,g=t/f,v=[],A=[],y=[],S=[];for(let _=0;_<p;_++){const b=_*g-c;for(let E=0;E<d;E++){const R=E*m-o;A.push(R,-b,0),y.push(0,0,1),S.push(E/u),S.push(1-_/f)}}for(let _=0;_<f;_++)for(let b=0;b<u;b++){const E=b+d*_,R=b+d*(_+1),D=b+1+d*(_+1),L=b+1+d*_;v.push(E,R,L),v.push(R,D,L)}this.setIndex(v),this.setAttribute("position",new To(A,3)),this.setAttribute("normal",new To(y,3)),this.setAttribute("uv",new To(S,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Dh(e.width,e.height,e.widthSegments,e.heightSegments)}}class g3 extends wh{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=bI,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class _3 extends wh{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const GM={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class v3{constructor(e,t,n){const s=this;let o=!1,c=0,u=0,f;const d=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(p){u++,o===!1&&s.onStart!==void 0&&s.onStart(p,c,u),o=!0},this.itemEnd=function(p){c++,s.onProgress!==void 0&&s.onProgress(p,c,u),c===u&&(o=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(p){s.onError!==void 0&&s.onError(p)},this.resolveURL=function(p){return f?f(p):p},this.setURLModifier=function(p){return f=p,this},this.addHandler=function(p,m){return d.push(p,m),this},this.removeHandler=function(p){const m=d.indexOf(p);return m!==-1&&d.splice(m,2),this},this.getHandler=function(p){for(let m=0,g=d.length;m<g;m+=2){const v=d[m],A=d[m+1];if(v.global&&(v.lastIndex=0),v.test(p))return A}return null}}}const S3=new v3;class O_{constructor(e){this.manager=e!==void 0?e:S3,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,o){n.load(e,s,t,o)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}O_.DEFAULT_MATERIAL_NAME="__DEFAULT";class x3 extends O_{constructor(e){super(e)}load(e,t,n,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,c=GM.get(e);if(c!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(c),o.manager.itemEnd(e)},0),c;const u=Fu("img");function f(){p(),GM.add(e,this),t&&t(this),o.manager.itemEnd(e)}function d(m){p(),s&&s(m),o.manager.itemError(e),o.manager.itemEnd(e)}function p(){u.removeEventListener("load",f,!1),u.removeEventListener("error",d,!1)}return u.addEventListener("load",f,!1),u.addEventListener("error",d,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(u.crossOrigin=this.crossOrigin),o.manager.itemStart(e),u.src=e,u}}class A3 extends O_{constructor(e){super(e)}load(e,t,n,s){const o=new Mi,c=new x3(this.manager);return c.setCrossOrigin(this.crossOrigin),c.setPath(this.path),c.load(e,function(u){o.image=u,o.needsUpdate=!0,t!==void 0&&t(o)},n,s),o}}class y3 extends wT{constructor(e=-1,t=1,n=1,s=-1,o=.1,c=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=o,this.far=c,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,o,c){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let o=n-e,c=n+e,u=s+t,f=s-t;if(this.view!==null&&this.view.enabled){const d=(this.right-this.left)/this.view.fullWidth/this.zoom,p=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=d*this.view.offsetX,c=o+d*this.view.width,u-=p*this.view.offsetY,f=u-p*this.view.height}this.projectionMatrix.makeOrthographic(o,c,u,f,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class M3 extends Ds{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}}function VM(r,e,t,n){const s=E3(n);switch(t){case gT:return r*e;case vT:return r*e/s.components*s.byteLength;case P_:return r*e/s.components*s.byteLength;case ST:return r*e*2/s.components*s.byteLength;case U_:return r*e*2/s.components*s.byteLength;case _T:return r*e*3/s.components*s.byteLength;case Is:return r*e*4/s.components*s.byteLength;case I_:return r*e*4/s.components*s.byteLength;case eh:case th:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case nh:case ih:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case D0:case P0:return Math.max(r,16)*Math.max(e,8)/4;case w0:case L0:return Math.max(r,8)*Math.max(e,8)/2;case U0:case I0:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case B0:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case F0:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case N0:return Math.floor((r+4)/5)*Math.floor((e+3)/4)*16;case O0:return Math.floor((r+4)/5)*Math.floor((e+4)/5)*16;case z0:return Math.floor((r+5)/6)*Math.floor((e+4)/5)*16;case H0:return Math.floor((r+5)/6)*Math.floor((e+5)/6)*16;case G0:return Math.floor((r+7)/8)*Math.floor((e+4)/5)*16;case V0:return Math.floor((r+7)/8)*Math.floor((e+5)/6)*16;case k0:return Math.floor((r+7)/8)*Math.floor((e+7)/8)*16;case W0:return Math.floor((r+9)/10)*Math.floor((e+4)/5)*16;case X0:return Math.floor((r+9)/10)*Math.floor((e+5)/6)*16;case q0:return Math.floor((r+9)/10)*Math.floor((e+7)/8)*16;case Y0:return Math.floor((r+9)/10)*Math.floor((e+9)/10)*16;case $0:return Math.floor((r+11)/12)*Math.floor((e+9)/10)*16;case Q0:return Math.floor((r+11)/12)*Math.floor((e+11)/12)*16;case sh:case K0:case j0:return Math.ceil(r/4)*Math.ceil(e/4)*16;case xT:case Z0:return Math.ceil(r/4)*Math.ceil(e/4)*8;case J0:case e_:return Math.ceil(r/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function E3(r){switch(r){case Vr:case hT:return{byteLength:1,components:1};case Pu:case pT:case zu:return{byteLength:2,components:1};case D_:case L_:return{byteLength:2,components:4};case Co:case w_:case Fr:return{byteLength:4,components:1};case mT:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:R_}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=R_);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function UT(){let r=null,e=!1,t=null,n=null;function s(o,c){t(o,c),n=r.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(s),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(o){t=o},setContext:function(o){r=o}}}function T3(r){const e=new WeakMap;function t(u,f){const d=u.array,p=u.usage,m=d.byteLength,g=r.createBuffer();r.bindBuffer(f,g),r.bufferData(f,d,p),u.onUploadCallback();let v;if(d instanceof Float32Array)v=r.FLOAT;else if(d instanceof Uint16Array)u.isFloat16BufferAttribute?v=r.HALF_FLOAT:v=r.UNSIGNED_SHORT;else if(d instanceof Int16Array)v=r.SHORT;else if(d instanceof Uint32Array)v=r.UNSIGNED_INT;else if(d instanceof Int32Array)v=r.INT;else if(d instanceof Int8Array)v=r.BYTE;else if(d instanceof Uint8Array)v=r.UNSIGNED_BYTE;else if(d instanceof Uint8ClampedArray)v=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+d);return{buffer:g,type:v,bytesPerElement:d.BYTES_PER_ELEMENT,version:u.version,size:m}}function n(u,f,d){const p=f.array,m=f.updateRanges;if(r.bindBuffer(d,u),m.length===0)r.bufferSubData(d,0,p);else{m.sort((v,A)=>v.start-A.start);let g=0;for(let v=1;v<m.length;v++){const A=m[g],y=m[v];y.start<=A.start+A.count+1?A.count=Math.max(A.count,y.start+y.count-A.start):(++g,m[g]=y)}m.length=g+1;for(let v=0,A=m.length;v<A;v++){const y=m[v];r.bufferSubData(d,y.start*p.BYTES_PER_ELEMENT,p,y.start,y.count)}f.clearUpdateRanges()}f.onUploadCallback()}function s(u){return u.isInterleavedBufferAttribute&&(u=u.data),e.get(u)}function o(u){u.isInterleavedBufferAttribute&&(u=u.data);const f=e.get(u);f&&(r.deleteBuffer(f.buffer),e.delete(u))}function c(u,f){if(u.isInterleavedBufferAttribute&&(u=u.data),u.isGLBufferAttribute){const p=e.get(u);(!p||p.version<u.version)&&e.set(u,{buffer:u.buffer,type:u.type,bytesPerElement:u.elementSize,version:u.version});return}const d=e.get(u);if(d===void 0)e.set(u,t(u,f));else if(d.version<u.version){if(d.size!==u.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(d.buffer,u,f),d.version=u.version}}return{get:s,remove:o,update:c}}var b3=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,C3=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,R3=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,w3=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,D3=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,L3=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,P3=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,U3=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,I3=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,B3=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,F3=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,N3=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,O3=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,z3=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,H3=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,G3=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,V3=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,k3=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,W3=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,X3=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,q3=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Y3=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,$3=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,Q3=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,K3=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,j3=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Z3=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,J3=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,eB=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,tB=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,nB="gl_FragColor = linearToOutputTexel( gl_FragColor );",iB=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,sB=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,rB=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,aB=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,oB=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,lB=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,cB=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,uB=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,fB=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,dB=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,hB=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,pB=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,mB=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,gB=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,_B=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,vB=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,SB=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,xB=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,AB=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,yB=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,MB=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,EB=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,TB=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,bB=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,CB=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,RB=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,wB=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,DB=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,LB=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,PB=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,UB=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,IB=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,BB=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,FB=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,NB=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,OB=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,zB=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,HB=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,GB=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,VB=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,kB=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,WB=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,XB=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,qB=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,YB=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,$B=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,QB=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,KB=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,jB=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,ZB=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,JB=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,eF=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,tF=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,nF=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,iF=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,sF=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,rF=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,aF=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,oF=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,lF=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,cF=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,uF=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,fF=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,dF=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,hF=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,pF=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,mF=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,gF=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,_F=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,vF=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,SF=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,xF=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,AF=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,yF=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,MF=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,EF=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const TF=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,bF=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,CF=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,RF=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,wF=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,DF=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,LF=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,PF=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,UF=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,IF=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,BF=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,FF=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,NF=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,OF=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,zF=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,HF=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,GF=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,VF=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,kF=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,WF=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,XF=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,qF=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,YF=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,$F=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,QF=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,KF=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,jF=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,ZF=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,JF=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,eN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,tN=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,nN=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,iN=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sN=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Nt={alphahash_fragment:b3,alphahash_pars_fragment:C3,alphamap_fragment:R3,alphamap_pars_fragment:w3,alphatest_fragment:D3,alphatest_pars_fragment:L3,aomap_fragment:P3,aomap_pars_fragment:U3,batching_pars_vertex:I3,batching_vertex:B3,begin_vertex:F3,beginnormal_vertex:N3,bsdfs:O3,iridescence_fragment:z3,bumpmap_pars_fragment:H3,clipping_planes_fragment:G3,clipping_planes_pars_fragment:V3,clipping_planes_pars_vertex:k3,clipping_planes_vertex:W3,color_fragment:X3,color_pars_fragment:q3,color_pars_vertex:Y3,color_vertex:$3,common:Q3,cube_uv_reflection_fragment:K3,defaultnormal_vertex:j3,displacementmap_pars_vertex:Z3,displacementmap_vertex:J3,emissivemap_fragment:eB,emissivemap_pars_fragment:tB,colorspace_fragment:nB,colorspace_pars_fragment:iB,envmap_fragment:sB,envmap_common_pars_fragment:rB,envmap_pars_fragment:aB,envmap_pars_vertex:oB,envmap_physical_pars_fragment:vB,envmap_vertex:lB,fog_vertex:cB,fog_pars_vertex:uB,fog_fragment:fB,fog_pars_fragment:dB,gradientmap_pars_fragment:hB,lightmap_pars_fragment:pB,lights_lambert_fragment:mB,lights_lambert_pars_fragment:gB,lights_pars_begin:_B,lights_toon_fragment:SB,lights_toon_pars_fragment:xB,lights_phong_fragment:AB,lights_phong_pars_fragment:yB,lights_physical_fragment:MB,lights_physical_pars_fragment:EB,lights_fragment_begin:TB,lights_fragment_maps:bB,lights_fragment_end:CB,logdepthbuf_fragment:RB,logdepthbuf_pars_fragment:wB,logdepthbuf_pars_vertex:DB,logdepthbuf_vertex:LB,map_fragment:PB,map_pars_fragment:UB,map_particle_fragment:IB,map_particle_pars_fragment:BB,metalnessmap_fragment:FB,metalnessmap_pars_fragment:NB,morphinstance_vertex:OB,morphcolor_vertex:zB,morphnormal_vertex:HB,morphtarget_pars_vertex:GB,morphtarget_vertex:VB,normal_fragment_begin:kB,normal_fragment_maps:WB,normal_pars_fragment:XB,normal_pars_vertex:qB,normal_vertex:YB,normalmap_pars_fragment:$B,clearcoat_normal_fragment_begin:QB,clearcoat_normal_fragment_maps:KB,clearcoat_pars_fragment:jB,iridescence_pars_fragment:ZB,opaque_fragment:JB,packing:eF,premultiplied_alpha_fragment:tF,project_vertex:nF,dithering_fragment:iF,dithering_pars_fragment:sF,roughnessmap_fragment:rF,roughnessmap_pars_fragment:aF,shadowmap_pars_fragment:oF,shadowmap_pars_vertex:lF,shadowmap_vertex:cF,shadowmask_pars_fragment:uF,skinbase_vertex:fF,skinning_pars_vertex:dF,skinning_vertex:hF,skinnormal_vertex:pF,specularmap_fragment:mF,specularmap_pars_fragment:gF,tonemapping_fragment:_F,tonemapping_pars_fragment:vF,transmission_fragment:SF,transmission_pars_fragment:xF,uv_pars_fragment:AF,uv_pars_vertex:yF,uv_vertex:MF,worldpos_vertex:EF,background_vert:TF,background_frag:bF,backgroundCube_vert:CF,backgroundCube_frag:RF,cube_vert:wF,cube_frag:DF,depth_vert:LF,depth_frag:PF,distanceRGBA_vert:UF,distanceRGBA_frag:IF,equirect_vert:BF,equirect_frag:FF,linedashed_vert:NF,linedashed_frag:OF,meshbasic_vert:zF,meshbasic_frag:HF,meshlambert_vert:GF,meshlambert_frag:VF,meshmatcap_vert:kF,meshmatcap_frag:WF,meshnormal_vert:XF,meshnormal_frag:qF,meshphong_vert:YF,meshphong_frag:$F,meshphysical_vert:QF,meshphysical_frag:KF,meshtoon_vert:jF,meshtoon_frag:ZF,points_vert:JF,points_frag:eN,shadow_vert:tN,shadow_frag:nN,sprite_vert:iN,sprite_frag:sN},ht={common:{diffuse:{value:new hn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new It},alphaMap:{value:null},alphaMapTransform:{value:new It},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new It}},envmap:{envMap:{value:null},envMapRotation:{value:new It},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new It}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new It}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new It},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new It},normalScale:{value:new mn(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new It},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new It}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new It}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new It}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new hn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new hn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new It},alphaTest:{value:0},uvTransform:{value:new It}},sprite:{diffuse:{value:new hn(16777215)},opacity:{value:1},center:{value:new mn(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new It},alphaMap:{value:null},alphaMapTransform:{value:new It},alphaTest:{value:0}}},Ws={basic:{uniforms:Si([ht.common,ht.specularmap,ht.envmap,ht.aomap,ht.lightmap,ht.fog]),vertexShader:Nt.meshbasic_vert,fragmentShader:Nt.meshbasic_frag},lambert:{uniforms:Si([ht.common,ht.specularmap,ht.envmap,ht.aomap,ht.lightmap,ht.emissivemap,ht.bumpmap,ht.normalmap,ht.displacementmap,ht.fog,ht.lights,{emissive:{value:new hn(0)}}]),vertexShader:Nt.meshlambert_vert,fragmentShader:Nt.meshlambert_frag},phong:{uniforms:Si([ht.common,ht.specularmap,ht.envmap,ht.aomap,ht.lightmap,ht.emissivemap,ht.bumpmap,ht.normalmap,ht.displacementmap,ht.fog,ht.lights,{emissive:{value:new hn(0)},specular:{value:new hn(1118481)},shininess:{value:30}}]),vertexShader:Nt.meshphong_vert,fragmentShader:Nt.meshphong_frag},standard:{uniforms:Si([ht.common,ht.envmap,ht.aomap,ht.lightmap,ht.emissivemap,ht.bumpmap,ht.normalmap,ht.displacementmap,ht.roughnessmap,ht.metalnessmap,ht.fog,ht.lights,{emissive:{value:new hn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Nt.meshphysical_vert,fragmentShader:Nt.meshphysical_frag},toon:{uniforms:Si([ht.common,ht.aomap,ht.lightmap,ht.emissivemap,ht.bumpmap,ht.normalmap,ht.displacementmap,ht.gradientmap,ht.fog,ht.lights,{emissive:{value:new hn(0)}}]),vertexShader:Nt.meshtoon_vert,fragmentShader:Nt.meshtoon_frag},matcap:{uniforms:Si([ht.common,ht.bumpmap,ht.normalmap,ht.displacementmap,ht.fog,{matcap:{value:null}}]),vertexShader:Nt.meshmatcap_vert,fragmentShader:Nt.meshmatcap_frag},points:{uniforms:Si([ht.points,ht.fog]),vertexShader:Nt.points_vert,fragmentShader:Nt.points_frag},dashed:{uniforms:Si([ht.common,ht.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Nt.linedashed_vert,fragmentShader:Nt.linedashed_frag},depth:{uniforms:Si([ht.common,ht.displacementmap]),vertexShader:Nt.depth_vert,fragmentShader:Nt.depth_frag},normal:{uniforms:Si([ht.common,ht.bumpmap,ht.normalmap,ht.displacementmap,{opacity:{value:1}}]),vertexShader:Nt.meshnormal_vert,fragmentShader:Nt.meshnormal_frag},sprite:{uniforms:Si([ht.sprite,ht.fog]),vertexShader:Nt.sprite_vert,fragmentShader:Nt.sprite_frag},background:{uniforms:{uvTransform:{value:new It},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Nt.background_vert,fragmentShader:Nt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new It}},vertexShader:Nt.backgroundCube_vert,fragmentShader:Nt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Nt.cube_vert,fragmentShader:Nt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Nt.equirect_vert,fragmentShader:Nt.equirect_frag},distanceRGBA:{uniforms:Si([ht.common,ht.displacementmap,{referencePosition:{value:new Ne},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Nt.distanceRGBA_vert,fragmentShader:Nt.distanceRGBA_frag},shadow:{uniforms:Si([ht.lights,ht.fog,{color:{value:new hn(0)},opacity:{value:1}}]),vertexShader:Nt.shadow_vert,fragmentShader:Nt.shadow_frag}};Ws.physical={uniforms:Si([Ws.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new It},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new It},clearcoatNormalScale:{value:new mn(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new It},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new It},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new It},sheen:{value:0},sheenColor:{value:new hn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new It},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new It},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new It},transmissionSamplerSize:{value:new mn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new It},attenuationDistance:{value:0},attenuationColor:{value:new hn(0)},specularColor:{value:new hn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new It},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new It},anisotropyVector:{value:new mn},anisotropyMap:{value:null},anisotropyMapTransform:{value:new It}}]),vertexShader:Nt.meshphysical_vert,fragmentShader:Nt.meshphysical_frag};const Yd={r:0,b:0,g:0},ao=new kr,rN=new zn;function aN(r,e,t,n,s,o,c){const u=new hn(0);let f=o===!0?0:1,d,p,m=null,g=0,v=null;function A(E){let R=E.isScene===!0?E.background:null;return R&&R.isTexture&&(R=(E.backgroundBlurriness>0?t:e).get(R)),R}function y(E){let R=!1;const D=A(E);D===null?_(u,f):D&&D.isColor&&(_(D,1),R=!0);const L=r.xr.getEnvironmentBlendMode();L==="additive"?n.buffers.color.setClear(0,0,0,1,c):L==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,c),(r.autoClear||R)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function S(E,R){const D=A(R);D&&(D.isCubeTexture||D.mapping===Rh)?(p===void 0&&(p=new Qs(new dc(1,1,1),new Ia({name:"BackgroundCubeMaterial",uniforms:cc(Ws.backgroundCube.uniforms),vertexShader:Ws.backgroundCube.vertexShader,fragmentShader:Ws.backgroundCube.fragmentShader,side:Bi,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),p.geometry.deleteAttribute("normal"),p.geometry.deleteAttribute("uv"),p.onBeforeRender=function(L,w,B){this.matrixWorld.copyPosition(B.matrixWorld)},Object.defineProperty(p.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(p)),ao.copy(R.backgroundRotation),ao.x*=-1,ao.y*=-1,ao.z*=-1,D.isCubeTexture&&D.isRenderTargetTexture===!1&&(ao.y*=-1,ao.z*=-1),p.material.uniforms.envMap.value=D,p.material.uniforms.flipEnvMap.value=D.isCubeTexture&&D.isRenderTargetTexture===!1?-1:1,p.material.uniforms.backgroundBlurriness.value=R.backgroundBlurriness,p.material.uniforms.backgroundIntensity.value=R.backgroundIntensity,p.material.uniforms.backgroundRotation.value.setFromMatrix4(rN.makeRotationFromEuler(ao)),p.material.toneMapped=Kt.getTransfer(D.colorSpace)!==fn,(m!==D||g!==D.version||v!==r.toneMapping)&&(p.material.needsUpdate=!0,m=D,g=D.version,v=r.toneMapping),p.layers.enableAll(),E.unshift(p,p.geometry,p.material,0,0,null)):D&&D.isTexture&&(d===void 0&&(d=new Qs(new Dh(2,2),new Ia({name:"BackgroundMaterial",uniforms:cc(Ws.background.uniforms),vertexShader:Ws.background.vertexShader,fragmentShader:Ws.background.fragmentShader,side:Ua,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),d.geometry.deleteAttribute("normal"),Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(d)),d.material.uniforms.t2D.value=D,d.material.uniforms.backgroundIntensity.value=R.backgroundIntensity,d.material.toneMapped=Kt.getTransfer(D.colorSpace)!==fn,D.matrixAutoUpdate===!0&&D.updateMatrix(),d.material.uniforms.uvTransform.value.copy(D.matrix),(m!==D||g!==D.version||v!==r.toneMapping)&&(d.material.needsUpdate=!0,m=D,g=D.version,v=r.toneMapping),d.layers.enableAll(),E.unshift(d,d.geometry,d.material,0,0,null))}function _(E,R){E.getRGB(Yd,RT(r)),n.buffers.color.setClear(Yd.r,Yd.g,Yd.b,R,c)}function b(){p!==void 0&&(p.geometry.dispose(),p.material.dispose(),p=void 0),d!==void 0&&(d.geometry.dispose(),d.material.dispose(),d=void 0)}return{getClearColor:function(){return u},setClearColor:function(E,R=1){u.set(E),f=R,_(u,f)},getClearAlpha:function(){return f},setClearAlpha:function(E){f=E,_(u,f)},render:y,addToRenderList:S,dispose:b}}function oN(r,e){const t=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},s=g(null);let o=s,c=!1;function u(T,O,X,$,z){let k=!1;const I=m($,X,O);o!==I&&(o=I,d(o.object)),k=v(T,$,X,z),k&&A(T,$,X,z),z!==null&&e.update(z,r.ELEMENT_ARRAY_BUFFER),(k||c)&&(c=!1,R(T,O,X,$),z!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e.get(z).buffer))}function f(){return r.createVertexArray()}function d(T){return r.bindVertexArray(T)}function p(T){return r.deleteVertexArray(T)}function m(T,O,X){const $=X.wireframe===!0;let z=n[T.id];z===void 0&&(z={},n[T.id]=z);let k=z[O.id];k===void 0&&(k={},z[O.id]=k);let I=k[$];return I===void 0&&(I=g(f()),k[$]=I),I}function g(T){const O=[],X=[],$=[];for(let z=0;z<t;z++)O[z]=0,X[z]=0,$[z]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:O,enabledAttributes:X,attributeDivisors:$,object:T,attributes:{},index:null}}function v(T,O,X,$){const z=o.attributes,k=O.attributes;let I=0;const Y=X.getAttributes();for(const q in Y)if(Y[q].location>=0){const F=z[q];let ee=k[q];if(ee===void 0&&(q==="instanceMatrix"&&T.instanceMatrix&&(ee=T.instanceMatrix),q==="instanceColor"&&T.instanceColor&&(ee=T.instanceColor)),F===void 0||F.attribute!==ee||ee&&F.data!==ee.data)return!0;I++}return o.attributesNum!==I||o.index!==$}function A(T,O,X,$){const z={},k=O.attributes;let I=0;const Y=X.getAttributes();for(const q in Y)if(Y[q].location>=0){let F=k[q];F===void 0&&(q==="instanceMatrix"&&T.instanceMatrix&&(F=T.instanceMatrix),q==="instanceColor"&&T.instanceColor&&(F=T.instanceColor));const ee={};ee.attribute=F,F&&F.data&&(ee.data=F.data),z[q]=ee,I++}o.attributes=z,o.attributesNum=I,o.index=$}function y(){const T=o.newAttributes;for(let O=0,X=T.length;O<X;O++)T[O]=0}function S(T){_(T,0)}function _(T,O){const X=o.newAttributes,$=o.enabledAttributes,z=o.attributeDivisors;X[T]=1,$[T]===0&&(r.enableVertexAttribArray(T),$[T]=1),z[T]!==O&&(r.vertexAttribDivisor(T,O),z[T]=O)}function b(){const T=o.newAttributes,O=o.enabledAttributes;for(let X=0,$=O.length;X<$;X++)O[X]!==T[X]&&(r.disableVertexAttribArray(X),O[X]=0)}function E(T,O,X,$,z,k,I){I===!0?r.vertexAttribIPointer(T,O,X,z,k):r.vertexAttribPointer(T,O,X,$,z,k)}function R(T,O,X,$){y();const z=$.attributes,k=X.getAttributes(),I=O.defaultAttributeValues;for(const Y in k){const q=k[Y];if(q.location>=0){let J=z[Y];if(J===void 0&&(Y==="instanceMatrix"&&T.instanceMatrix&&(J=T.instanceMatrix),Y==="instanceColor"&&T.instanceColor&&(J=T.instanceColor)),J!==void 0){const F=J.normalized,ee=J.itemSize,ce=e.get(J);if(ce===void 0)continue;const ie=ce.buffer,j=ce.type,ue=ce.bytesPerElement,ge=j===r.INT||j===r.UNSIGNED_INT||J.gpuType===w_;if(J.isInterleavedBufferAttribute){const Ae=J.data,Be=Ae.stride,Ze=J.offset;if(Ae.isInstancedInterleavedBuffer){for(let Xe=0;Xe<q.locationSize;Xe++)_(q.location+Xe,Ae.meshPerAttribute);T.isInstancedMesh!==!0&&$._maxInstanceCount===void 0&&($._maxInstanceCount=Ae.meshPerAttribute*Ae.count)}else for(let Xe=0;Xe<q.locationSize;Xe++)S(q.location+Xe);r.bindBuffer(r.ARRAY_BUFFER,ie);for(let Xe=0;Xe<q.locationSize;Xe++)E(q.location+Xe,ee/q.locationSize,j,F,Be*ue,(Ze+ee/q.locationSize*Xe)*ue,ge)}else{if(J.isInstancedBufferAttribute){for(let Ae=0;Ae<q.locationSize;Ae++)_(q.location+Ae,J.meshPerAttribute);T.isInstancedMesh!==!0&&$._maxInstanceCount===void 0&&($._maxInstanceCount=J.meshPerAttribute*J.count)}else for(let Ae=0;Ae<q.locationSize;Ae++)S(q.location+Ae);r.bindBuffer(r.ARRAY_BUFFER,ie);for(let Ae=0;Ae<q.locationSize;Ae++)E(q.location+Ae,ee/q.locationSize,j,F,ee*ue,ee/q.locationSize*Ae*ue,ge)}}else if(I!==void 0){const F=I[Y];if(F!==void 0)switch(F.length){case 2:r.vertexAttrib2fv(q.location,F);break;case 3:r.vertexAttrib3fv(q.location,F);break;case 4:r.vertexAttrib4fv(q.location,F);break;default:r.vertexAttrib1fv(q.location,F)}}}}b()}function D(){B();for(const T in n){const O=n[T];for(const X in O){const $=O[X];for(const z in $)p($[z].object),delete $[z];delete O[X]}delete n[T]}}function L(T){if(n[T.id]===void 0)return;const O=n[T.id];for(const X in O){const $=O[X];for(const z in $)p($[z].object),delete $[z];delete O[X]}delete n[T.id]}function w(T){for(const O in n){const X=n[O];if(X[T.id]===void 0)continue;const $=X[T.id];for(const z in $)p($[z].object),delete $[z];delete X[T.id]}}function B(){C(),c=!0,o!==s&&(o=s,d(o.object))}function C(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:u,reset:B,resetDefaultState:C,dispose:D,releaseStatesOfGeometry:L,releaseStatesOfProgram:w,initAttributes:y,enableAttribute:S,disableUnusedAttributes:b}}function lN(r,e,t){let n;function s(d){n=d}function o(d,p){r.drawArrays(n,d,p),t.update(p,n,1)}function c(d,p,m){m!==0&&(r.drawArraysInstanced(n,d,p,m),t.update(p,n,m))}function u(d,p,m){if(m===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,d,0,p,0,m);let v=0;for(let A=0;A<m;A++)v+=p[A];t.update(v,n,1)}function f(d,p,m,g){if(m===0)return;const v=e.get("WEBGL_multi_draw");if(v===null)for(let A=0;A<d.length;A++)c(d[A],p[A],g[A]);else{v.multiDrawArraysInstancedWEBGL(n,d,0,p,0,g,0,m);let A=0;for(let y=0;y<m;y++)A+=p[y]*g[y];t.update(A,n,1)}}this.setMode=s,this.render=o,this.renderInstances=c,this.renderMultiDraw=u,this.renderMultiDrawInstances=f}function cN(r,e,t,n){let s;function o(){if(s!==void 0)return s;if(e.has("EXT_texture_filter_anisotropic")===!0){const w=e.get("EXT_texture_filter_anisotropic");s=r.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function c(w){return!(w!==Is&&n.convert(w)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function u(w){const B=w===zu&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(w!==Vr&&n.convert(w)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&w!==Fr&&!B)}function f(w){if(w==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let d=t.precision!==void 0?t.precision:"highp";const p=f(d);p!==d&&(console.warn("THREE.WebGLRenderer:",d,"not supported, using",p,"instead."),d=p);const m=t.logarithmicDepthBuffer===!0,g=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),v=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),A=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),y=r.getParameter(r.MAX_TEXTURE_SIZE),S=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),_=r.getParameter(r.MAX_VERTEX_ATTRIBS),b=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),E=r.getParameter(r.MAX_VARYING_VECTORS),R=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),D=A>0,L=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:o,getMaxPrecision:f,textureFormatReadable:c,textureTypeReadable:u,precision:d,logarithmicDepthBuffer:m,reverseDepthBuffer:g,maxTextures:v,maxVertexTextures:A,maxTextureSize:y,maxCubemapSize:S,maxAttributes:_,maxVertexUniforms:b,maxVaryings:E,maxFragmentUniforms:R,vertexTextures:D,maxSamples:L}}function uN(r){const e=this;let t=null,n=0,s=!1,o=!1;const c=new fo,u=new It,f={value:null,needsUpdate:!1};this.uniform=f,this.numPlanes=0,this.numIntersection=0,this.init=function(m,g){const v=m.length!==0||g||n!==0||s;return s=g,n=m.length,v},this.beginShadows=function(){o=!0,p(null)},this.endShadows=function(){o=!1},this.setGlobalState=function(m,g){t=p(m,g,0)},this.setState=function(m,g,v){const A=m.clippingPlanes,y=m.clipIntersection,S=m.clipShadows,_=r.get(m);if(!s||A===null||A.length===0||o&&!S)o?p(null):d();else{const b=o?0:n,E=b*4;let R=_.clippingState||null;f.value=R,R=p(A,g,E,v);for(let D=0;D!==E;++D)R[D]=t[D];_.clippingState=R,this.numIntersection=y?this.numPlanes:0,this.numPlanes+=b}};function d(){f.value!==t&&(f.value=t,f.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function p(m,g,v,A){const y=m!==null?m.length:0;let S=null;if(y!==0){if(S=f.value,A!==!0||S===null){const _=v+y*4,b=g.matrixWorldInverse;u.getNormalMatrix(b),(S===null||S.length<_)&&(S=new Float32Array(_));for(let E=0,R=v;E!==y;++E,R+=4)c.copy(m[E]).applyMatrix4(b,u),c.normal.toArray(S,R),S[R+3]=c.constant}f.value=S,f.needsUpdate=!0}return e.numPlanes=y,e.numIntersection=0,S}}function fN(r){let e=new WeakMap;function t(c,u){return u===_h?c.mapping=ac:u===b0&&(c.mapping=oc),c}function n(c){if(c&&c.isTexture){const u=c.mapping;if(u===_h||u===b0)if(e.has(c)){const f=e.get(c).texture;return t(f,c.mapping)}else{const f=c.image;if(f&&f.height>0){const d=new f3(f.height);return d.fromEquirectangularTexture(r,c),e.set(c,d),c.addEventListener("dispose",s),t(d.texture,c.mapping)}else return null}}return c}function s(c){const u=c.target;u.removeEventListener("dispose",s);const f=e.get(u);f!==void 0&&(e.delete(u),f.dispose())}function o(){e=new WeakMap}return{get:n,dispose:o}}const Xl=4,kM=[.125,.215,.35,.446,.526,.582],vo=20,Qg=new y3,WM=new hn;let Kg=null,jg=0,Zg=0,Jg=!1;const ho=(1+Math.sqrt(5))/2,Gl=1/ho,XM=[new Ne(-ho,Gl,0),new Ne(ho,Gl,0),new Ne(-Gl,0,ho),new Ne(Gl,0,ho),new Ne(0,ho,-Gl),new Ne(0,ho,Gl),new Ne(-1,1,-1),new Ne(1,1,-1),new Ne(-1,1,1),new Ne(1,1,1)],dN=new Ne;class qM{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100,o={}){const{size:c=256,position:u=dN}=o;Kg=this._renderer.getRenderTarget(),jg=this._renderer.getActiveCubeFace(),Zg=this._renderer.getActiveMipmapLevel(),Jg=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(c);const f=this._allocateTargets();return f.depthBuffer=!0,this._sceneToCubeUV(e,n,s,f,u),t>0&&this._blur(f,0,0,t),this._applyPMREM(f),this._cleanup(f),f}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=QM(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=$M(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Kg,jg,Zg),this._renderer.xr.enabled=Jg,e.scissorTest=!1,$d(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===ac||e.mapping===oc?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Kg=this._renderer.getRenderTarget(),jg=this._renderer.getActiveCubeFace(),Zg=this._renderer.getActiveMipmapLevel(),Jg=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:$s,minFilter:$s,generateMipmaps:!1,type:zu,format:Is,colorSpace:lc,depthBuffer:!1},s=YM(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=YM(e,t,n);const{_lodMax:o}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=hN(o)),this._blurMaterial=pN(o,e,t)}return s}_compileMaterial(e){const t=new Qs(this._lodPlanes[0],e);this._renderer.compile(t,Qg)}_sceneToCubeUV(e,t,n,s,o){const f=new Ds(90,1,t,n),d=[1,-1,1,1,1,1],p=[1,1,1,-1,-1,-1],m=this._renderer,g=m.autoClear,v=m.toneMapping;m.getClearColor(WM),m.toneMapping=La,m.autoClear=!1;const A=new N_({name:"PMREM.Background",side:Bi,depthWrite:!1,depthTest:!1}),y=new Qs(new dc,A);let S=!1;const _=e.background;_?_.isColor&&(A.color.copy(_),e.background=null,S=!0):(A.color.copy(WM),S=!0);for(let b=0;b<6;b++){const E=b%3;E===0?(f.up.set(0,d[b],0),f.position.set(o.x,o.y,o.z),f.lookAt(o.x+p[b],o.y,o.z)):E===1?(f.up.set(0,0,d[b]),f.position.set(o.x,o.y,o.z),f.lookAt(o.x,o.y+p[b],o.z)):(f.up.set(0,d[b],0),f.position.set(o.x,o.y,o.z),f.lookAt(o.x,o.y,o.z+p[b]));const R=this._cubeSize;$d(s,E*R,b>2?R:0,R,R),m.setRenderTarget(s),S&&m.render(y,f),m.render(e,f)}y.geometry.dispose(),y.material.dispose(),m.toneMapping=v,m.autoClear=g,e.background=_}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===ac||e.mapping===oc;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=QM()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=$M());const o=s?this._cubemapMaterial:this._equirectMaterial,c=new Qs(this._lodPlanes[0],o),u=o.uniforms;u.envMap.value=e;const f=this._cubeSize;$d(t,0,0,3*f,2*f),n.setRenderTarget(t),n.render(c,Qg)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let o=1;o<s;o++){const c=Math.sqrt(this._sigmas[o]*this._sigmas[o]-this._sigmas[o-1]*this._sigmas[o-1]),u=XM[(s-o-1)%XM.length];this._blur(e,o-1,o,c,u)}t.autoClear=n}_blur(e,t,n,s,o){const c=this._pingPongRenderTarget;this._halfBlur(e,c,t,n,s,"latitudinal",o),this._halfBlur(c,e,n,n,s,"longitudinal",o)}_halfBlur(e,t,n,s,o,c,u){const f=this._renderer,d=this._blurMaterial;c!=="latitudinal"&&c!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const p=3,m=new Qs(this._lodPlanes[s],d),g=d.uniforms,v=this._sizeLods[n]-1,A=isFinite(o)?Math.PI/(2*v):2*Math.PI/(2*vo-1),y=o/A,S=isFinite(o)?1+Math.floor(p*y):vo;S>vo&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${S} samples when the maximum is set to ${vo}`);const _=[];let b=0;for(let w=0;w<vo;++w){const B=w/y,C=Math.exp(-B*B/2);_.push(C),w===0?b+=C:w<S&&(b+=2*C)}for(let w=0;w<_.length;w++)_[w]=_[w]/b;g.envMap.value=e.texture,g.samples.value=S,g.weights.value=_,g.latitudinal.value=c==="latitudinal",u&&(g.poleAxis.value=u);const{_lodMax:E}=this;g.dTheta.value=A,g.mipInt.value=E-n;const R=this._sizeLods[s],D=3*R*(s>E-Xl?s-E+Xl:0),L=4*(this._cubeSize-R);$d(t,D,L,3*R,2*R),f.setRenderTarget(t),f.render(m,Qg)}}function hN(r){const e=[],t=[],n=[];let s=r;const o=r-Xl+1+kM.length;for(let c=0;c<o;c++){const u=Math.pow(2,s);t.push(u);let f=1/u;c>r-Xl?f=kM[c-r+Xl-1]:c===0&&(f=0),n.push(f);const d=1/(u-2),p=-d,m=1+d,g=[p,p,m,p,m,m,p,p,m,m,p,m],v=6,A=6,y=3,S=2,_=1,b=new Float32Array(y*A*v),E=new Float32Array(S*A*v),R=new Float32Array(_*A*v);for(let L=0;L<v;L++){const w=L%3*2/3-1,B=L>2?0:-1,C=[w,B,0,w+2/3,B,0,w+2/3,B+1,0,w,B,0,w+2/3,B+1,0,w,B+1,0];b.set(C,y*A*L),E.set(g,S*A*L);const T=[L,L,L,L,L,L];R.set(T,_*A*L)}const D=new Do;D.setAttribute("position",new Ks(b,y)),D.setAttribute("uv",new Ks(E,S)),D.setAttribute("faceIndex",new Ks(R,_)),e.push(D),s>Xl&&s--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function YM(r,e,t){const n=new Ro(r,e,t);return n.texture.mapping=Rh,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function $d(r,e,t,n,s){r.viewport.set(e,t,n,s),r.scissor.set(e,t,n,s)}function pN(r,e,t){const n=new Float32Array(vo),s=new Ne(0,1,0);return new Ia({name:"SphericalGaussianBlur",defines:{n:vo,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:z_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Da,depthTest:!1,depthWrite:!1})}function $M(){return new Ia({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:z_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Da,depthTest:!1,depthWrite:!1})}function QM(){return new Ia({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:z_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Da,depthTest:!1,depthWrite:!1})}function z_(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function mN(r){let e=new WeakMap,t=null;function n(u){if(u&&u.isTexture){const f=u.mapping,d=f===_h||f===b0,p=f===ac||f===oc;if(d||p){let m=e.get(u);const g=m!==void 0?m.texture.pmremVersion:0;if(u.isRenderTargetTexture&&u.pmremVersion!==g)return t===null&&(t=new qM(r)),m=d?t.fromEquirectangular(u,m):t.fromCubemap(u,m),m.texture.pmremVersion=u.pmremVersion,e.set(u,m),m.texture;if(m!==void 0)return m.texture;{const v=u.image;return d&&v&&v.height>0||p&&v&&s(v)?(t===null&&(t=new qM(r)),m=d?t.fromEquirectangular(u):t.fromCubemap(u),m.texture.pmremVersion=u.pmremVersion,e.set(u,m),u.addEventListener("dispose",o),m.texture):null}}}return u}function s(u){let f=0;const d=6;for(let p=0;p<d;p++)u[p]!==void 0&&f++;return f===d}function o(u){const f=u.target;f.removeEventListener("dispose",o);const d=e.get(f);d!==void 0&&(e.delete(f),d.dispose())}function c(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:c}}function gN(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let s;switch(n){case"WEBGL_depth_texture":s=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=r.getExtension(n)}return e[n]=s,s}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const s=t(n);return s===null&&rh("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function _N(r,e,t,n){const s={},o=new WeakMap;function c(m){const g=m.target;g.index!==null&&e.remove(g.index);for(const A in g.attributes)e.remove(g.attributes[A]);g.removeEventListener("dispose",c),delete s[g.id];const v=o.get(g);v&&(e.remove(v),o.delete(g)),n.releaseStatesOfGeometry(g),g.isInstancedBufferGeometry===!0&&delete g._maxInstanceCount,t.memory.geometries--}function u(m,g){return s[g.id]===!0||(g.addEventListener("dispose",c),s[g.id]=!0,t.memory.geometries++),g}function f(m){const g=m.attributes;for(const v in g)e.update(g[v],r.ARRAY_BUFFER)}function d(m){const g=[],v=m.index,A=m.attributes.position;let y=0;if(v!==null){const b=v.array;y=v.version;for(let E=0,R=b.length;E<R;E+=3){const D=b[E+0],L=b[E+1],w=b[E+2];g.push(D,L,L,w,w,D)}}else if(A!==void 0){const b=A.array;y=A.version;for(let E=0,R=b.length/3-1;E<R;E+=3){const D=E+0,L=E+1,w=E+2;g.push(D,L,L,w,w,D)}}else return;const S=new(yT(g)?CT:bT)(g,1);S.version=y;const _=o.get(m);_&&e.remove(_),o.set(m,S)}function p(m){const g=o.get(m);if(g){const v=m.index;v!==null&&g.version<v.version&&d(m)}else d(m);return o.get(m)}return{get:u,update:f,getWireframeAttribute:p}}function vN(r,e,t){let n;function s(g){n=g}let o,c;function u(g){o=g.type,c=g.bytesPerElement}function f(g,v){r.drawElements(n,v,o,g*c),t.update(v,n,1)}function d(g,v,A){A!==0&&(r.drawElementsInstanced(n,v,o,g*c,A),t.update(v,n,A))}function p(g,v,A){if(A===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,v,0,o,g,0,A);let S=0;for(let _=0;_<A;_++)S+=v[_];t.update(S,n,1)}function m(g,v,A,y){if(A===0)return;const S=e.get("WEBGL_multi_draw");if(S===null)for(let _=0;_<g.length;_++)d(g[_]/c,v[_],y[_]);else{S.multiDrawElementsInstancedWEBGL(n,v,0,o,g,0,y,0,A);let _=0;for(let b=0;b<A;b++)_+=v[b]*y[b];t.update(_,n,1)}}this.setMode=s,this.setIndex=u,this.render=f,this.renderInstances=d,this.renderMultiDraw=p,this.renderMultiDrawInstances=m}function SN(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(o,c,u){switch(t.calls++,c){case r.TRIANGLES:t.triangles+=u*(o/3);break;case r.LINES:t.lines+=u*(o/2);break;case r.LINE_STRIP:t.lines+=u*(o-1);break;case r.LINE_LOOP:t.lines+=u*o;break;case r.POINTS:t.points+=u*o;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",c);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:n}}function xN(r,e,t){const n=new WeakMap,s=new Un;function o(c,u,f){const d=c.morphTargetInfluences,p=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color,m=p!==void 0?p.length:0;let g=n.get(u);if(g===void 0||g.count!==m){let T=function(){B.dispose(),n.delete(u),u.removeEventListener("dispose",T)};var v=T;g!==void 0&&g.texture.dispose();const A=u.morphAttributes.position!==void 0,y=u.morphAttributes.normal!==void 0,S=u.morphAttributes.color!==void 0,_=u.morphAttributes.position||[],b=u.morphAttributes.normal||[],E=u.morphAttributes.color||[];let R=0;A===!0&&(R=1),y===!0&&(R=2),S===!0&&(R=3);let D=u.attributes.position.count*R,L=1;D>e.maxTextureSize&&(L=Math.ceil(D/e.maxTextureSize),D=e.maxTextureSize);const w=new Float32Array(D*L*4*m),B=new MT(w,D,L,m);B.type=Fr,B.needsUpdate=!0;const C=R*4;for(let O=0;O<m;O++){const X=_[O],$=b[O],z=E[O],k=D*L*4*O;for(let I=0;I<X.count;I++){const Y=I*C;A===!0&&(s.fromBufferAttribute(X,I),w[k+Y+0]=s.x,w[k+Y+1]=s.y,w[k+Y+2]=s.z,w[k+Y+3]=0),y===!0&&(s.fromBufferAttribute($,I),w[k+Y+4]=s.x,w[k+Y+5]=s.y,w[k+Y+6]=s.z,w[k+Y+7]=0),S===!0&&(s.fromBufferAttribute(z,I),w[k+Y+8]=s.x,w[k+Y+9]=s.y,w[k+Y+10]=s.z,w[k+Y+11]=z.itemSize===4?s.w:1)}}g={count:m,texture:B,size:new mn(D,L)},n.set(u,g),u.addEventListener("dispose",T)}if(c.isInstancedMesh===!0&&c.morphTexture!==null)f.getUniforms().setValue(r,"morphTexture",c.morphTexture,t);else{let A=0;for(let S=0;S<d.length;S++)A+=d[S];const y=u.morphTargetsRelative?1:1-A;f.getUniforms().setValue(r,"morphTargetBaseInfluence",y),f.getUniforms().setValue(r,"morphTargetInfluences",d)}f.getUniforms().setValue(r,"morphTargetsTexture",g.texture,t),f.getUniforms().setValue(r,"morphTargetsTextureSize",g.size)}return{update:o}}function AN(r,e,t,n){let s=new WeakMap;function o(f){const d=n.render.frame,p=f.geometry,m=e.get(f,p);if(s.get(m)!==d&&(e.update(m),s.set(m,d)),f.isInstancedMesh&&(f.hasEventListener("dispose",u)===!1&&f.addEventListener("dispose",u),s.get(f)!==d&&(t.update(f.instanceMatrix,r.ARRAY_BUFFER),f.instanceColor!==null&&t.update(f.instanceColor,r.ARRAY_BUFFER),s.set(f,d))),f.isSkinnedMesh){const g=f.skeleton;s.get(g)!==d&&(g.update(),s.set(g,d))}return m}function c(){s=new WeakMap}function u(f){const d=f.target;d.removeEventListener("dispose",u),t.remove(d.instanceMatrix),d.instanceColor!==null&&t.remove(d.instanceColor)}return{update:o,dispose:c}}const IT=new Mi,KM=new PT(1,1),BT=new MT,FT=new YI,NT=new DT,jM=[],ZM=[],JM=new Float32Array(16),eE=new Float32Array(9),tE=new Float32Array(4);function hc(r,e,t){const n=r[0];if(n<=0||n>0)return r;const s=e*t;let o=jM[s];if(o===void 0&&(o=new Float32Array(s),jM[s]=o),e!==0){n.toArray(o,0);for(let c=1,u=0;c!==e;++c)u+=t,r[c].toArray(o,u)}return o}function Yn(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function $n(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function Lh(r,e){let t=ZM[e];t===void 0&&(t=new Int32Array(e),ZM[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function yN(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function MN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Yn(t,e))return;r.uniform2fv(this.addr,e),$n(t,e)}}function EN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Yn(t,e))return;r.uniform3fv(this.addr,e),$n(t,e)}}function TN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Yn(t,e))return;r.uniform4fv(this.addr,e),$n(t,e)}}function bN(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Yn(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),$n(t,e)}else{if(Yn(t,n))return;tE.set(n),r.uniformMatrix2fv(this.addr,!1,tE),$n(t,n)}}function CN(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Yn(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),$n(t,e)}else{if(Yn(t,n))return;eE.set(n),r.uniformMatrix3fv(this.addr,!1,eE),$n(t,n)}}function RN(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Yn(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),$n(t,e)}else{if(Yn(t,n))return;JM.set(n),r.uniformMatrix4fv(this.addr,!1,JM),$n(t,n)}}function wN(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function DN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Yn(t,e))return;r.uniform2iv(this.addr,e),$n(t,e)}}function LN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Yn(t,e))return;r.uniform3iv(this.addr,e),$n(t,e)}}function PN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Yn(t,e))return;r.uniform4iv(this.addr,e),$n(t,e)}}function UN(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function IN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Yn(t,e))return;r.uniform2uiv(this.addr,e),$n(t,e)}}function BN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Yn(t,e))return;r.uniform3uiv(this.addr,e),$n(t,e)}}function FN(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Yn(t,e))return;r.uniform4uiv(this.addr,e),$n(t,e)}}function NN(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s);let o;this.type===r.SAMPLER_2D_SHADOW?(KM.compareFunction=AT,o=KM):o=IT,t.setTexture2D(e||o,s)}function ON(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTexture3D(e||FT,s)}function zN(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTextureCube(e||NT,s)}function HN(r,e,t){const n=this.cache,s=t.allocateTextureUnit();n[0]!==s&&(r.uniform1i(this.addr,s),n[0]=s),t.setTexture2DArray(e||BT,s)}function GN(r){switch(r){case 5126:return yN;case 35664:return MN;case 35665:return EN;case 35666:return TN;case 35674:return bN;case 35675:return CN;case 35676:return RN;case 5124:case 35670:return wN;case 35667:case 35671:return DN;case 35668:case 35672:return LN;case 35669:case 35673:return PN;case 5125:return UN;case 36294:return IN;case 36295:return BN;case 36296:return FN;case 35678:case 36198:case 36298:case 36306:case 35682:return NN;case 35679:case 36299:case 36307:return ON;case 35680:case 36300:case 36308:case 36293:return zN;case 36289:case 36303:case 36311:case 36292:return HN}}function VN(r,e){r.uniform1fv(this.addr,e)}function kN(r,e){const t=hc(e,this.size,2);r.uniform2fv(this.addr,t)}function WN(r,e){const t=hc(e,this.size,3);r.uniform3fv(this.addr,t)}function XN(r,e){const t=hc(e,this.size,4);r.uniform4fv(this.addr,t)}function qN(r,e){const t=hc(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function YN(r,e){const t=hc(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function $N(r,e){const t=hc(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function QN(r,e){r.uniform1iv(this.addr,e)}function KN(r,e){r.uniform2iv(this.addr,e)}function jN(r,e){r.uniform3iv(this.addr,e)}function ZN(r,e){r.uniform4iv(this.addr,e)}function JN(r,e){r.uniform1uiv(this.addr,e)}function eO(r,e){r.uniform2uiv(this.addr,e)}function tO(r,e){r.uniform3uiv(this.addr,e)}function nO(r,e){r.uniform4uiv(this.addr,e)}function iO(r,e,t){const n=this.cache,s=e.length,o=Lh(t,s);Yn(n,o)||(r.uniform1iv(this.addr,o),$n(n,o));for(let c=0;c!==s;++c)t.setTexture2D(e[c]||IT,o[c])}function sO(r,e,t){const n=this.cache,s=e.length,o=Lh(t,s);Yn(n,o)||(r.uniform1iv(this.addr,o),$n(n,o));for(let c=0;c!==s;++c)t.setTexture3D(e[c]||FT,o[c])}function rO(r,e,t){const n=this.cache,s=e.length,o=Lh(t,s);Yn(n,o)||(r.uniform1iv(this.addr,o),$n(n,o));for(let c=0;c!==s;++c)t.setTextureCube(e[c]||NT,o[c])}function aO(r,e,t){const n=this.cache,s=e.length,o=Lh(t,s);Yn(n,o)||(r.uniform1iv(this.addr,o),$n(n,o));for(let c=0;c!==s;++c)t.setTexture2DArray(e[c]||BT,o[c])}function oO(r){switch(r){case 5126:return VN;case 35664:return kN;case 35665:return WN;case 35666:return XN;case 35674:return qN;case 35675:return YN;case 35676:return $N;case 5124:case 35670:return QN;case 35667:case 35671:return KN;case 35668:case 35672:return jN;case 35669:case 35673:return ZN;case 5125:return JN;case 36294:return eO;case 36295:return tO;case 36296:return nO;case 35678:case 36198:case 36298:case 36306:case 35682:return iO;case 35679:case 36299:case 36307:return sO;case 35680:case 36300:case 36308:case 36293:return rO;case 36289:case 36303:case 36311:case 36292:return aO}}class lO{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=GN(t.type)}}class cO{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=oO(t.type)}}class uO{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const s=this.seq;for(let o=0,c=s.length;o!==c;++o){const u=s[o];u.setValue(e,t[u.id],n)}}}const e0=/(\w+)(\])?(\[|\.)?/g;function nE(r,e){r.seq.push(e),r.map[e.id]=e}function fO(r,e,t){const n=r.name,s=n.length;for(e0.lastIndex=0;;){const o=e0.exec(n),c=e0.lastIndex;let u=o[1];const f=o[2]==="]",d=o[3];if(f&&(u=u|0),d===void 0||d==="["&&c+2===s){nE(t,d===void 0?new lO(u,r,e):new cO(u,r,e));break}else{let m=t.map[u];m===void 0&&(m=new uO(u),nE(t,m)),t=m}}}class ah{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const o=e.getActiveUniform(t,s),c=e.getUniformLocation(t,o.name);fO(o,c,this)}}setValue(e,t,n,s){const o=this.map[t];o!==void 0&&o.setValue(e,n,s)}setOptional(e,t,n){const s=t[n];s!==void 0&&this.setValue(e,n,s)}static upload(e,t,n,s){for(let o=0,c=t.length;o!==c;++o){const u=t[o],f=n[u.id];f.needsUpdate!==!1&&u.setValue(e,f.value,s)}}static seqWithValue(e,t){const n=[];for(let s=0,o=e.length;s!==o;++s){const c=e[s];c.id in t&&n.push(c)}return n}}function iE(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}const dO=37297;let hO=0;function pO(r,e){const t=r.split(`
`),n=[],s=Math.max(e-6,0),o=Math.min(e+6,t.length);for(let c=s;c<o;c++){const u=c+1;n.push(`${u===e?">":" "} ${u}: ${t[c]}`)}return n.join(`
`)}const sE=new It;function mO(r){Kt._getMatrix(sE,Kt.workingColorSpace,r);const e=`mat3( ${sE.elements.map(t=>t.toFixed(4))} )`;switch(Kt.getTransfer(r)){case vh:return[e,"LinearTransferOETF"];case fn:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[e,"LinearTransferOETF"]}}function rE(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),s=r.getShaderInfoLog(e).trim();if(n&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const c=parseInt(o[1]);return t.toUpperCase()+`

`+s+`

`+pO(r.getShaderSource(e),c)}else return s}function gO(r,e){const t=mO(e);return[`vec4 ${r}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function _O(r,e){let t;switch(e){case vI:t="Linear";break;case SI:t="Reinhard";break;case xI:t="Cineon";break;case AI:t="ACESFilmic";break;case MI:t="AgX";break;case EI:t="Neutral";break;case yI:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const Qd=new Ne;function vO(){Kt.getLuminanceCoefficients(Qd);const r=Qd.x.toFixed(4),e=Qd.y.toFixed(4),t=Qd.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function SO(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(vu).join(`
`)}function xO(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function AO(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const o=r.getActiveAttrib(e,s),c=o.name;let u=1;o.type===r.FLOAT_MAT2&&(u=2),o.type===r.FLOAT_MAT3&&(u=3),o.type===r.FLOAT_MAT4&&(u=4),t[c]={type:o.type,location:r.getAttribLocation(e,c),locationSize:u}}return t}function vu(r){return r!==""}function aE(r,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function oE(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const yO=/^[ \t]*#include +<([\w\d./]+)>/gm;function n_(r){return r.replace(yO,EO)}const MO=new Map;function EO(r,e){let t=Nt[e];if(t===void 0){const n=MO.get(e);if(n!==void 0)t=Nt[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return n_(t)}const TO=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function lE(r){return r.replace(TO,bO)}function bO(r,e,t,n){let s="";for(let o=parseInt(e);o<parseInt(t);o++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+o+" ]").replace(/UNROLLED_LOOP_INDEX/g,o);return s}function cE(r){let e=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function CO(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===uT?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===jU?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Dr&&(e="SHADOWMAP_TYPE_VSM"),e}function RO(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case ac:case oc:e="ENVMAP_TYPE_CUBE";break;case Rh:e="ENVMAP_TYPE_CUBE_UV";break}return e}function wO(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case oc:e="ENVMAP_MODE_REFRACTION";break}return e}function DO(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case fT:e="ENVMAP_BLENDING_MULTIPLY";break;case gI:e="ENVMAP_BLENDING_MIX";break;case _I:e="ENVMAP_BLENDING_ADD";break}return e}function LO(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function PO(r,e,t,n){const s=r.getContext(),o=t.defines;let c=t.vertexShader,u=t.fragmentShader;const f=CO(t),d=RO(t),p=wO(t),m=DO(t),g=LO(t),v=SO(t),A=xO(o),y=s.createProgram();let S,_,b=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(S=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,A].filter(vu).join(`
`),S.length>0&&(S+=`
`),_=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,A].filter(vu).join(`
`),_.length>0&&(_+=`
`)):(S=[cE(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,A,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+p:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(vu).join(`
`),_=[cE(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,A,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.envMap?"#define "+p:"",t.envMap?"#define "+m:"",g?"#define CUBEUV_TEXEL_WIDTH "+g.texelWidth:"",g?"#define CUBEUV_TEXEL_HEIGHT "+g.texelHeight:"",g?"#define CUBEUV_MAX_MIP "+g.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==La?"#define TONE_MAPPING":"",t.toneMapping!==La?Nt.tonemapping_pars_fragment:"",t.toneMapping!==La?_O("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Nt.colorspace_pars_fragment,gO("linearToOutputTexel",t.outputColorSpace),vO(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(vu).join(`
`)),c=n_(c),c=aE(c,t),c=oE(c,t),u=n_(u),u=aE(u,t),u=oE(u,t),c=lE(c),u=lE(u),t.isRawShaderMaterial!==!0&&(b=`#version 300 es
`,S=[v,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+S,_=["#define varying in",t.glslVersion===MM?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===MM?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+_);const E=b+S+c,R=b+_+u,D=iE(s,s.VERTEX_SHADER,E),L=iE(s,s.FRAGMENT_SHADER,R);s.attachShader(y,D),s.attachShader(y,L),t.index0AttributeName!==void 0?s.bindAttribLocation(y,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(y,0,"position"),s.linkProgram(y);function w(O){if(r.debug.checkShaderErrors){const X=s.getProgramInfoLog(y).trim(),$=s.getShaderInfoLog(D).trim(),z=s.getShaderInfoLog(L).trim();let k=!0,I=!0;if(s.getProgramParameter(y,s.LINK_STATUS)===!1)if(k=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(s,y,D,L);else{const Y=rE(s,D,"vertex"),q=rE(s,L,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(y,s.VALIDATE_STATUS)+`

Material Name: `+O.name+`
Material Type: `+O.type+`

Program Info Log: `+X+`
`+Y+`
`+q)}else X!==""?console.warn("THREE.WebGLProgram: Program Info Log:",X):($===""||z==="")&&(I=!1);I&&(O.diagnostics={runnable:k,programLog:X,vertexShader:{log:$,prefix:S},fragmentShader:{log:z,prefix:_}})}s.deleteShader(D),s.deleteShader(L),B=new ah(s,y),C=AO(s,y)}let B;this.getUniforms=function(){return B===void 0&&w(this),B};let C;this.getAttributes=function(){return C===void 0&&w(this),C};let T=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return T===!1&&(T=s.getProgramParameter(y,dO)),T},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(y),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=hO++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=D,this.fragmentShader=L,this}let UO=0;class IO{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,s=this._getShaderStage(t),o=this._getShaderStage(n),c=this._getShaderCacheForMaterial(e);return c.has(s)===!1&&(c.add(s),s.usedTimes++),c.has(o)===!1&&(c.add(o),o.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new BO(e),t.set(e,n)),n}}class BO{constructor(e){this.id=UO++,this.code=e,this.usedTimes=0}}function FO(r,e,t,n,s,o,c){const u=new ET,f=new IO,d=new Set,p=[],m=s.logarithmicDepthBuffer,g=s.vertexTextures;let v=s.precision;const A={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function y(C){return d.add(C),C===0?"uv":`uv${C}`}function S(C,T,O,X,$){const z=X.fog,k=$.geometry,I=C.isMeshStandardMaterial?X.environment:null,Y=(C.isMeshStandardMaterial?t:e).get(C.envMap||I),q=Y&&Y.mapping===Rh?Y.image.height:null,J=A[C.type];C.precision!==null&&(v=s.getMaxPrecision(C.precision),v!==C.precision&&console.warn("THREE.WebGLProgram.getParameters:",C.precision,"not supported, using",v,"instead."));const F=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,ee=F!==void 0?F.length:0;let ce=0;k.morphAttributes.position!==void 0&&(ce=1),k.morphAttributes.normal!==void 0&&(ce=2),k.morphAttributes.color!==void 0&&(ce=3);let ie,j,ue,ge;if(J){const Mt=Ws[J];ie=Mt.vertexShader,j=Mt.fragmentShader}else ie=C.vertexShader,j=C.fragmentShader,f.update(C),ue=f.getVertexShaderID(C),ge=f.getFragmentShaderID(C);const Ae=r.getRenderTarget(),Be=r.state.buffers.depth.getReversed(),Ze=$.isInstancedMesh===!0,Xe=$.isBatchedMesh===!0,ft=!!C.map,_e=!!C.matcap,ct=!!Y,Z=!!C.aoMap,it=!!C.lightMap,Ke=!!C.bumpMap,at=!!C.normalMap,$e=!!C.displacementMap,Q=!!C.emissiveMap,G=!!C.metalnessMap,N=!!C.roughnessMap,U=C.anisotropy>0,se=C.clearcoat>0,fe=C.dispersion>0,Ee=C.iridescence>0,pe=C.sheen>0,Oe=C.transmission>0,ze=U&&!!C.anisotropyMap,je=se&&!!C.clearcoatMap,Pe=se&&!!C.clearcoatNormalMap,Ve=se&&!!C.clearcoatRoughnessMap,te=Ee&&!!C.iridescenceMap,Ce=Ee&&!!C.iridescenceThicknessMap,ke=pe&&!!C.sheenColorMap,be=pe&&!!C.sheenRoughnessMap,tt=!!C.specularMap,st=!!C.specularColorMap,St=!!C.specularIntensityMap,oe=Oe&&!!C.transmissionMap,Te=Oe&&!!C.thicknessMap,W=!!C.gradientMap,he=!!C.alphaMap,De=C.alphaTest>0,Ge=!!C.alphaHash,Je=!!C.extensions;let At=La;C.toneMapped&&(Ae===null||Ae.isXRRenderTarget===!0)&&(At=r.toneMapping);const Rt={shaderID:J,shaderType:C.type,shaderName:C.name,vertexShader:ie,fragmentShader:j,defines:C.defines,customVertexShaderID:ue,customFragmentShaderID:ge,isRawShaderMaterial:C.isRawShaderMaterial===!0,glslVersion:C.glslVersion,precision:v,batching:Xe,batchingColor:Xe&&$._colorsTexture!==null,instancing:Ze,instancingColor:Ze&&$.instanceColor!==null,instancingMorph:Ze&&$.morphTexture!==null,supportsVertexTextures:g,outputColorSpace:Ae===null?r.outputColorSpace:Ae.isXRRenderTarget===!0?Ae.texture.colorSpace:lc,alphaToCoverage:!!C.alphaToCoverage,map:ft,matcap:_e,envMap:ct,envMapMode:ct&&Y.mapping,envMapCubeUVHeight:q,aoMap:Z,lightMap:it,bumpMap:Ke,normalMap:at,displacementMap:g&&$e,emissiveMap:Q,normalMapObjectSpace:at&&C.normalMapType===wI,normalMapTangentSpace:at&&C.normalMapType===RI,metalnessMap:G,roughnessMap:N,anisotropy:U,anisotropyMap:ze,clearcoat:se,clearcoatMap:je,clearcoatNormalMap:Pe,clearcoatRoughnessMap:Ve,dispersion:fe,iridescence:Ee,iridescenceMap:te,iridescenceThicknessMap:Ce,sheen:pe,sheenColorMap:ke,sheenRoughnessMap:be,specularMap:tt,specularColorMap:st,specularIntensityMap:St,transmission:Oe,transmissionMap:oe,thicknessMap:Te,gradientMap:W,opaque:C.transparent===!1&&C.blending===jl&&C.alphaToCoverage===!1,alphaMap:he,alphaTest:De,alphaHash:Ge,combine:C.combine,mapUv:ft&&y(C.map.channel),aoMapUv:Z&&y(C.aoMap.channel),lightMapUv:it&&y(C.lightMap.channel),bumpMapUv:Ke&&y(C.bumpMap.channel),normalMapUv:at&&y(C.normalMap.channel),displacementMapUv:$e&&y(C.displacementMap.channel),emissiveMapUv:Q&&y(C.emissiveMap.channel),metalnessMapUv:G&&y(C.metalnessMap.channel),roughnessMapUv:N&&y(C.roughnessMap.channel),anisotropyMapUv:ze&&y(C.anisotropyMap.channel),clearcoatMapUv:je&&y(C.clearcoatMap.channel),clearcoatNormalMapUv:Pe&&y(C.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Ve&&y(C.clearcoatRoughnessMap.channel),iridescenceMapUv:te&&y(C.iridescenceMap.channel),iridescenceThicknessMapUv:Ce&&y(C.iridescenceThicknessMap.channel),sheenColorMapUv:ke&&y(C.sheenColorMap.channel),sheenRoughnessMapUv:be&&y(C.sheenRoughnessMap.channel),specularMapUv:tt&&y(C.specularMap.channel),specularColorMapUv:st&&y(C.specularColorMap.channel),specularIntensityMapUv:St&&y(C.specularIntensityMap.channel),transmissionMapUv:oe&&y(C.transmissionMap.channel),thicknessMapUv:Te&&y(C.thicknessMap.channel),alphaMapUv:he&&y(C.alphaMap.channel),vertexTangents:!!k.attributes.tangent&&(at||U),vertexColors:C.vertexColors,vertexAlphas:C.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,pointsUvs:$.isPoints===!0&&!!k.attributes.uv&&(ft||he),fog:!!z,useFog:C.fog===!0,fogExp2:!!z&&z.isFogExp2,flatShading:C.flatShading===!0,sizeAttenuation:C.sizeAttenuation===!0,logarithmicDepthBuffer:m,reverseDepthBuffer:Be,skinning:$.isSkinnedMesh===!0,morphTargets:k.morphAttributes.position!==void 0,morphNormals:k.morphAttributes.normal!==void 0,morphColors:k.morphAttributes.color!==void 0,morphTargetsCount:ee,morphTextureStride:ce,numDirLights:T.directional.length,numPointLights:T.point.length,numSpotLights:T.spot.length,numSpotLightMaps:T.spotLightMap.length,numRectAreaLights:T.rectArea.length,numHemiLights:T.hemi.length,numDirLightShadows:T.directionalShadowMap.length,numPointLightShadows:T.pointShadowMap.length,numSpotLightShadows:T.spotShadowMap.length,numSpotLightShadowsWithMaps:T.numSpotLightShadowsWithMaps,numLightProbes:T.numLightProbes,numClippingPlanes:c.numPlanes,numClipIntersection:c.numIntersection,dithering:C.dithering,shadowMapEnabled:r.shadowMap.enabled&&O.length>0,shadowMapType:r.shadowMap.type,toneMapping:At,decodeVideoTexture:ft&&C.map.isVideoTexture===!0&&Kt.getTransfer(C.map.colorSpace)===fn,decodeVideoTextureEmissive:Q&&C.emissiveMap.isVideoTexture===!0&&Kt.getTransfer(C.emissiveMap.colorSpace)===fn,premultipliedAlpha:C.premultipliedAlpha,doubleSided:C.side===Ir,flipSided:C.side===Bi,useDepthPacking:C.depthPacking>=0,depthPacking:C.depthPacking||0,index0AttributeName:C.index0AttributeName,extensionClipCullDistance:Je&&C.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Je&&C.extensions.multiDraw===!0||Xe)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:C.customProgramCacheKey()};return Rt.vertexUv1s=d.has(1),Rt.vertexUv2s=d.has(2),Rt.vertexUv3s=d.has(3),d.clear(),Rt}function _(C){const T=[];if(C.shaderID?T.push(C.shaderID):(T.push(C.customVertexShaderID),T.push(C.customFragmentShaderID)),C.defines!==void 0)for(const O in C.defines)T.push(O),T.push(C.defines[O]);return C.isRawShaderMaterial===!1&&(b(T,C),E(T,C),T.push(r.outputColorSpace)),T.push(C.customProgramCacheKey),T.join()}function b(C,T){C.push(T.precision),C.push(T.outputColorSpace),C.push(T.envMapMode),C.push(T.envMapCubeUVHeight),C.push(T.mapUv),C.push(T.alphaMapUv),C.push(T.lightMapUv),C.push(T.aoMapUv),C.push(T.bumpMapUv),C.push(T.normalMapUv),C.push(T.displacementMapUv),C.push(T.emissiveMapUv),C.push(T.metalnessMapUv),C.push(T.roughnessMapUv),C.push(T.anisotropyMapUv),C.push(T.clearcoatMapUv),C.push(T.clearcoatNormalMapUv),C.push(T.clearcoatRoughnessMapUv),C.push(T.iridescenceMapUv),C.push(T.iridescenceThicknessMapUv),C.push(T.sheenColorMapUv),C.push(T.sheenRoughnessMapUv),C.push(T.specularMapUv),C.push(T.specularColorMapUv),C.push(T.specularIntensityMapUv),C.push(T.transmissionMapUv),C.push(T.thicknessMapUv),C.push(T.combine),C.push(T.fogExp2),C.push(T.sizeAttenuation),C.push(T.morphTargetsCount),C.push(T.morphAttributeCount),C.push(T.numDirLights),C.push(T.numPointLights),C.push(T.numSpotLights),C.push(T.numSpotLightMaps),C.push(T.numHemiLights),C.push(T.numRectAreaLights),C.push(T.numDirLightShadows),C.push(T.numPointLightShadows),C.push(T.numSpotLightShadows),C.push(T.numSpotLightShadowsWithMaps),C.push(T.numLightProbes),C.push(T.shadowMapType),C.push(T.toneMapping),C.push(T.numClippingPlanes),C.push(T.numClipIntersection),C.push(T.depthPacking)}function E(C,T){u.disableAll(),T.supportsVertexTextures&&u.enable(0),T.instancing&&u.enable(1),T.instancingColor&&u.enable(2),T.instancingMorph&&u.enable(3),T.matcap&&u.enable(4),T.envMap&&u.enable(5),T.normalMapObjectSpace&&u.enable(6),T.normalMapTangentSpace&&u.enable(7),T.clearcoat&&u.enable(8),T.iridescence&&u.enable(9),T.alphaTest&&u.enable(10),T.vertexColors&&u.enable(11),T.vertexAlphas&&u.enable(12),T.vertexUv1s&&u.enable(13),T.vertexUv2s&&u.enable(14),T.vertexUv3s&&u.enable(15),T.vertexTangents&&u.enable(16),T.anisotropy&&u.enable(17),T.alphaHash&&u.enable(18),T.batching&&u.enable(19),T.dispersion&&u.enable(20),T.batchingColor&&u.enable(21),C.push(u.mask),u.disableAll(),T.fog&&u.enable(0),T.useFog&&u.enable(1),T.flatShading&&u.enable(2),T.logarithmicDepthBuffer&&u.enable(3),T.reverseDepthBuffer&&u.enable(4),T.skinning&&u.enable(5),T.morphTargets&&u.enable(6),T.morphNormals&&u.enable(7),T.morphColors&&u.enable(8),T.premultipliedAlpha&&u.enable(9),T.shadowMapEnabled&&u.enable(10),T.doubleSided&&u.enable(11),T.flipSided&&u.enable(12),T.useDepthPacking&&u.enable(13),T.dithering&&u.enable(14),T.transmission&&u.enable(15),T.sheen&&u.enable(16),T.opaque&&u.enable(17),T.pointsUvs&&u.enable(18),T.decodeVideoTexture&&u.enable(19),T.decodeVideoTextureEmissive&&u.enable(20),T.alphaToCoverage&&u.enable(21),C.push(u.mask)}function R(C){const T=A[C.type];let O;if(T){const X=Ws[T];O=o3.clone(X.uniforms)}else O=C.uniforms;return O}function D(C,T){let O;for(let X=0,$=p.length;X<$;X++){const z=p[X];if(z.cacheKey===T){O=z,++O.usedTimes;break}}return O===void 0&&(O=new PO(r,T,C,o),p.push(O)),O}function L(C){if(--C.usedTimes===0){const T=p.indexOf(C);p[T]=p[p.length-1],p.pop(),C.destroy()}}function w(C){f.remove(C)}function B(){f.dispose()}return{getParameters:S,getProgramCacheKey:_,getUniforms:R,acquireProgram:D,releaseProgram:L,releaseShaderCache:w,programs:p,dispose:B}}function NO(){let r=new WeakMap;function e(c){return r.has(c)}function t(c){let u=r.get(c);return u===void 0&&(u={},r.set(c,u)),u}function n(c){r.delete(c)}function s(c,u,f){r.get(c)[u]=f}function o(){r=new WeakMap}return{has:e,get:t,remove:n,update:s,dispose:o}}function OO(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function uE(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function fE(){const r=[];let e=0;const t=[],n=[],s=[];function o(){e=0,t.length=0,n.length=0,s.length=0}function c(m,g,v,A,y,S){let _=r[e];return _===void 0?(_={id:m.id,object:m,geometry:g,material:v,groupOrder:A,renderOrder:m.renderOrder,z:y,group:S},r[e]=_):(_.id=m.id,_.object=m,_.geometry=g,_.material=v,_.groupOrder=A,_.renderOrder=m.renderOrder,_.z=y,_.group=S),e++,_}function u(m,g,v,A,y,S){const _=c(m,g,v,A,y,S);v.transmission>0?n.push(_):v.transparent===!0?s.push(_):t.push(_)}function f(m,g,v,A,y,S){const _=c(m,g,v,A,y,S);v.transmission>0?n.unshift(_):v.transparent===!0?s.unshift(_):t.unshift(_)}function d(m,g){t.length>1&&t.sort(m||OO),n.length>1&&n.sort(g||uE),s.length>1&&s.sort(g||uE)}function p(){for(let m=e,g=r.length;m<g;m++){const v=r[m];if(v.id===null)break;v.id=null,v.object=null,v.geometry=null,v.material=null,v.group=null}}return{opaque:t,transmissive:n,transparent:s,init:o,push:u,unshift:f,finish:p,sort:d}}function zO(){let r=new WeakMap;function e(n,s){const o=r.get(n);let c;return o===void 0?(c=new fE,r.set(n,[c])):s>=o.length?(c=new fE,o.push(c)):c=o[s],c}function t(){r=new WeakMap}return{get:e,dispose:t}}function HO(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new Ne,color:new hn};break;case"SpotLight":t={position:new Ne,direction:new Ne,color:new hn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new Ne,color:new hn,distance:0,decay:0};break;case"HemisphereLight":t={direction:new Ne,skyColor:new hn,groundColor:new hn};break;case"RectAreaLight":t={color:new hn,position:new Ne,halfWidth:new Ne,halfHeight:new Ne};break}return r[e.id]=t,t}}}function GO(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new mn};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new mn};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new mn,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let VO=0;function kO(r,e){return(e.castShadow?2:0)-(r.castShadow?2:0)+(e.map?1:0)-(r.map?1:0)}function WO(r){const e=new HO,t=GO(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let d=0;d<9;d++)n.probe.push(new Ne);const s=new Ne,o=new zn,c=new zn;function u(d){let p=0,m=0,g=0;for(let C=0;C<9;C++)n.probe[C].set(0,0,0);let v=0,A=0,y=0,S=0,_=0,b=0,E=0,R=0,D=0,L=0,w=0;d.sort(kO);for(let C=0,T=d.length;C<T;C++){const O=d[C],X=O.color,$=O.intensity,z=O.distance,k=O.shadow&&O.shadow.map?O.shadow.map.texture:null;if(O.isAmbientLight)p+=X.r*$,m+=X.g*$,g+=X.b*$;else if(O.isLightProbe){for(let I=0;I<9;I++)n.probe[I].addScaledVector(O.sh.coefficients[I],$);w++}else if(O.isDirectionalLight){const I=e.get(O);if(I.color.copy(O.color).multiplyScalar(O.intensity),O.castShadow){const Y=O.shadow,q=t.get(O);q.shadowIntensity=Y.intensity,q.shadowBias=Y.bias,q.shadowNormalBias=Y.normalBias,q.shadowRadius=Y.radius,q.shadowMapSize=Y.mapSize,n.directionalShadow[v]=q,n.directionalShadowMap[v]=k,n.directionalShadowMatrix[v]=O.shadow.matrix,b++}n.directional[v]=I,v++}else if(O.isSpotLight){const I=e.get(O);I.position.setFromMatrixPosition(O.matrixWorld),I.color.copy(X).multiplyScalar($),I.distance=z,I.coneCos=Math.cos(O.angle),I.penumbraCos=Math.cos(O.angle*(1-O.penumbra)),I.decay=O.decay,n.spot[y]=I;const Y=O.shadow;if(O.map&&(n.spotLightMap[D]=O.map,D++,Y.updateMatrices(O),O.castShadow&&L++),n.spotLightMatrix[y]=Y.matrix,O.castShadow){const q=t.get(O);q.shadowIntensity=Y.intensity,q.shadowBias=Y.bias,q.shadowNormalBias=Y.normalBias,q.shadowRadius=Y.radius,q.shadowMapSize=Y.mapSize,n.spotShadow[y]=q,n.spotShadowMap[y]=k,R++}y++}else if(O.isRectAreaLight){const I=e.get(O);I.color.copy(X).multiplyScalar($),I.halfWidth.set(O.width*.5,0,0),I.halfHeight.set(0,O.height*.5,0),n.rectArea[S]=I,S++}else if(O.isPointLight){const I=e.get(O);if(I.color.copy(O.color).multiplyScalar(O.intensity),I.distance=O.distance,I.decay=O.decay,O.castShadow){const Y=O.shadow,q=t.get(O);q.shadowIntensity=Y.intensity,q.shadowBias=Y.bias,q.shadowNormalBias=Y.normalBias,q.shadowRadius=Y.radius,q.shadowMapSize=Y.mapSize,q.shadowCameraNear=Y.camera.near,q.shadowCameraFar=Y.camera.far,n.pointShadow[A]=q,n.pointShadowMap[A]=k,n.pointShadowMatrix[A]=O.shadow.matrix,E++}n.point[A]=I,A++}else if(O.isHemisphereLight){const I=e.get(O);I.skyColor.copy(O.color).multiplyScalar($),I.groundColor.copy(O.groundColor).multiplyScalar($),n.hemi[_]=I,_++}}S>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=ht.LTC_FLOAT_1,n.rectAreaLTC2=ht.LTC_FLOAT_2):(n.rectAreaLTC1=ht.LTC_HALF_1,n.rectAreaLTC2=ht.LTC_HALF_2)),n.ambient[0]=p,n.ambient[1]=m,n.ambient[2]=g;const B=n.hash;(B.directionalLength!==v||B.pointLength!==A||B.spotLength!==y||B.rectAreaLength!==S||B.hemiLength!==_||B.numDirectionalShadows!==b||B.numPointShadows!==E||B.numSpotShadows!==R||B.numSpotMaps!==D||B.numLightProbes!==w)&&(n.directional.length=v,n.spot.length=y,n.rectArea.length=S,n.point.length=A,n.hemi.length=_,n.directionalShadow.length=b,n.directionalShadowMap.length=b,n.pointShadow.length=E,n.pointShadowMap.length=E,n.spotShadow.length=R,n.spotShadowMap.length=R,n.directionalShadowMatrix.length=b,n.pointShadowMatrix.length=E,n.spotLightMatrix.length=R+D-L,n.spotLightMap.length=D,n.numSpotLightShadowsWithMaps=L,n.numLightProbes=w,B.directionalLength=v,B.pointLength=A,B.spotLength=y,B.rectAreaLength=S,B.hemiLength=_,B.numDirectionalShadows=b,B.numPointShadows=E,B.numSpotShadows=R,B.numSpotMaps=D,B.numLightProbes=w,n.version=VO++)}function f(d,p){let m=0,g=0,v=0,A=0,y=0;const S=p.matrixWorldInverse;for(let _=0,b=d.length;_<b;_++){const E=d[_];if(E.isDirectionalLight){const R=n.directional[m];R.direction.setFromMatrixPosition(E.matrixWorld),s.setFromMatrixPosition(E.target.matrixWorld),R.direction.sub(s),R.direction.transformDirection(S),m++}else if(E.isSpotLight){const R=n.spot[v];R.position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(S),R.direction.setFromMatrixPosition(E.matrixWorld),s.setFromMatrixPosition(E.target.matrixWorld),R.direction.sub(s),R.direction.transformDirection(S),v++}else if(E.isRectAreaLight){const R=n.rectArea[A];R.position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(S),c.identity(),o.copy(E.matrixWorld),o.premultiply(S),c.extractRotation(o),R.halfWidth.set(E.width*.5,0,0),R.halfHeight.set(0,E.height*.5,0),R.halfWidth.applyMatrix4(c),R.halfHeight.applyMatrix4(c),A++}else if(E.isPointLight){const R=n.point[g];R.position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(S),g++}else if(E.isHemisphereLight){const R=n.hemi[y];R.direction.setFromMatrixPosition(E.matrixWorld),R.direction.transformDirection(S),y++}}}return{setup:u,setupView:f,state:n}}function dE(r){const e=new WO(r),t=[],n=[];function s(p){d.camera=p,t.length=0,n.length=0}function o(p){t.push(p)}function c(p){n.push(p)}function u(){e.setup(t)}function f(p){e.setupView(t,p)}const d={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:s,state:d,setupLights:u,setupLightsView:f,pushLight:o,pushShadow:c}}function XO(r){let e=new WeakMap;function t(s,o=0){const c=e.get(s);let u;return c===void 0?(u=new dE(r),e.set(s,[u])):o>=c.length?(u=new dE(r),c.push(u)):u=c[o],u}function n(){e=new WeakMap}return{get:t,dispose:n}}const qO=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,YO=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function $O(r,e,t){let n=new LT;const s=new mn,o=new mn,c=new Un,u=new g3({depthPacking:CI}),f=new _3,d={},p=t.maxTextureSize,m={[Ua]:Bi,[Bi]:Ua,[Ir]:Ir},g=new Ia({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new mn},radius:{value:4}},vertexShader:qO,fragmentShader:YO}),v=g.clone();v.defines.HORIZONTAL_PASS=1;const A=new Do;A.setAttribute("position",new Ks(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const y=new Qs(A,g),S=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=uT;let _=this.type;this.render=function(L,w,B){if(S.enabled===!1||S.autoUpdate===!1&&S.needsUpdate===!1||L.length===0)return;const C=r.getRenderTarget(),T=r.getActiveCubeFace(),O=r.getActiveMipmapLevel(),X=r.state;X.setBlending(Da),X.buffers.color.setClear(1,1,1,1),X.buffers.depth.setTest(!0),X.setScissorTest(!1);const $=_!==Dr&&this.type===Dr,z=_===Dr&&this.type!==Dr;for(let k=0,I=L.length;k<I;k++){const Y=L[k],q=Y.shadow;if(q===void 0){console.warn("THREE.WebGLShadowMap:",Y,"has no shadow.");continue}if(q.autoUpdate===!1&&q.needsUpdate===!1)continue;s.copy(q.mapSize);const J=q.getFrameExtents();if(s.multiply(J),o.copy(q.mapSize),(s.x>p||s.y>p)&&(s.x>p&&(o.x=Math.floor(p/J.x),s.x=o.x*J.x,q.mapSize.x=o.x),s.y>p&&(o.y=Math.floor(p/J.y),s.y=o.y*J.y,q.mapSize.y=o.y)),q.map===null||$===!0||z===!0){const ee=this.type!==Dr?{minFilter:Bs,magFilter:Bs}:{};q.map!==null&&q.map.dispose(),q.map=new Ro(s.x,s.y,ee),q.map.texture.name=Y.name+".shadowMap",q.camera.updateProjectionMatrix()}r.setRenderTarget(q.map),r.clear();const F=q.getViewportCount();for(let ee=0;ee<F;ee++){const ce=q.getViewport(ee);c.set(o.x*ce.x,o.y*ce.y,o.x*ce.z,o.y*ce.w),X.viewport(c),q.updateMatrices(Y,ee),n=q.getFrustum(),R(w,B,q.camera,Y,this.type)}q.isPointLightShadow!==!0&&this.type===Dr&&b(q,B),q.needsUpdate=!1}_=this.type,S.needsUpdate=!1,r.setRenderTarget(C,T,O)};function b(L,w){const B=e.update(y);g.defines.VSM_SAMPLES!==L.blurSamples&&(g.defines.VSM_SAMPLES=L.blurSamples,v.defines.VSM_SAMPLES=L.blurSamples,g.needsUpdate=!0,v.needsUpdate=!0),L.mapPass===null&&(L.mapPass=new Ro(s.x,s.y)),g.uniforms.shadow_pass.value=L.map.texture,g.uniforms.resolution.value=L.mapSize,g.uniforms.radius.value=L.radius,r.setRenderTarget(L.mapPass),r.clear(),r.renderBufferDirect(w,null,B,g,y,null),v.uniforms.shadow_pass.value=L.mapPass.texture,v.uniforms.resolution.value=L.mapSize,v.uniforms.radius.value=L.radius,r.setRenderTarget(L.map),r.clear(),r.renderBufferDirect(w,null,B,v,y,null)}function E(L,w,B,C){let T=null;const O=B.isPointLight===!0?L.customDistanceMaterial:L.customDepthMaterial;if(O!==void 0)T=O;else if(T=B.isPointLight===!0?f:u,r.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0||w.alphaToCoverage===!0){const X=T.uuid,$=w.uuid;let z=d[X];z===void 0&&(z={},d[X]=z);let k=z[$];k===void 0&&(k=T.clone(),z[$]=k,w.addEventListener("dispose",D)),T=k}if(T.visible=w.visible,T.wireframe=w.wireframe,C===Dr?T.side=w.shadowSide!==null?w.shadowSide:w.side:T.side=w.shadowSide!==null?w.shadowSide:m[w.side],T.alphaMap=w.alphaMap,T.alphaTest=w.alphaToCoverage===!0?.5:w.alphaTest,T.map=w.map,T.clipShadows=w.clipShadows,T.clippingPlanes=w.clippingPlanes,T.clipIntersection=w.clipIntersection,T.displacementMap=w.displacementMap,T.displacementScale=w.displacementScale,T.displacementBias=w.displacementBias,T.wireframeLinewidth=w.wireframeLinewidth,T.linewidth=w.linewidth,B.isPointLight===!0&&T.isMeshDistanceMaterial===!0){const X=r.properties.get(T);X.light=B}return T}function R(L,w,B,C,T){if(L.visible===!1)return;if(L.layers.test(w.layers)&&(L.isMesh||L.isLine||L.isPoints)&&(L.castShadow||L.receiveShadow&&T===Dr)&&(!L.frustumCulled||n.intersectsObject(L))){L.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse,L.matrixWorld);const $=e.update(L),z=L.material;if(Array.isArray(z)){const k=$.groups;for(let I=0,Y=k.length;I<Y;I++){const q=k[I],J=z[q.materialIndex];if(J&&J.visible){const F=E(L,J,C,T);L.onBeforeShadow(r,L,w,B,$,F,q),r.renderBufferDirect(B,null,$,F,L,q),L.onAfterShadow(r,L,w,B,$,F,q)}}}else if(z.visible){const k=E(L,z,C,T);L.onBeforeShadow(r,L,w,B,$,k,null),r.renderBufferDirect(B,null,$,k,L,null),L.onAfterShadow(r,L,w,B,$,k,null)}}const X=L.children;for(let $=0,z=X.length;$<z;$++)R(X[$],w,B,C,T)}function D(L){L.target.removeEventListener("dispose",D);for(const B in d){const C=d[B],T=L.target.uuid;T in C&&(C[T].dispose(),delete C[T])}}}const QO={[S0]:x0,[A0]:E0,[y0]:T0,[rc]:M0,[x0]:S0,[E0]:A0,[T0]:y0,[M0]:rc};function KO(r,e){function t(){let oe=!1;const Te=new Un;let W=null;const he=new Un(0,0,0,0);return{setMask:function(De){W!==De&&!oe&&(r.colorMask(De,De,De,De),W=De)},setLocked:function(De){oe=De},setClear:function(De,Ge,Je,At,Rt){Rt===!0&&(De*=At,Ge*=At,Je*=At),Te.set(De,Ge,Je,At),he.equals(Te)===!1&&(r.clearColor(De,Ge,Je,At),he.copy(Te))},reset:function(){oe=!1,W=null,he.set(-1,0,0,0)}}}function n(){let oe=!1,Te=!1,W=null,he=null,De=null;return{setReversed:function(Ge){if(Te!==Ge){const Je=e.get("EXT_clip_control");Ge?Je.clipControlEXT(Je.LOWER_LEFT_EXT,Je.ZERO_TO_ONE_EXT):Je.clipControlEXT(Je.LOWER_LEFT_EXT,Je.NEGATIVE_ONE_TO_ONE_EXT),Te=Ge;const At=De;De=null,this.setClear(At)}},getReversed:function(){return Te},setTest:function(Ge){Ge?Ae(r.DEPTH_TEST):Be(r.DEPTH_TEST)},setMask:function(Ge){W!==Ge&&!oe&&(r.depthMask(Ge),W=Ge)},setFunc:function(Ge){if(Te&&(Ge=QO[Ge]),he!==Ge){switch(Ge){case S0:r.depthFunc(r.NEVER);break;case x0:r.depthFunc(r.ALWAYS);break;case A0:r.depthFunc(r.LESS);break;case rc:r.depthFunc(r.LEQUAL);break;case y0:r.depthFunc(r.EQUAL);break;case M0:r.depthFunc(r.GEQUAL);break;case E0:r.depthFunc(r.GREATER);break;case T0:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}he=Ge}},setLocked:function(Ge){oe=Ge},setClear:function(Ge){De!==Ge&&(Te&&(Ge=1-Ge),r.clearDepth(Ge),De=Ge)},reset:function(){oe=!1,W=null,he=null,De=null,Te=!1}}}function s(){let oe=!1,Te=null,W=null,he=null,De=null,Ge=null,Je=null,At=null,Rt=null;return{setTest:function(Mt){oe||(Mt?Ae(r.STENCIL_TEST):Be(r.STENCIL_TEST))},setMask:function(Mt){Te!==Mt&&!oe&&(r.stencilMask(Mt),Te=Mt)},setFunc:function(Mt,en,Dt){(W!==Mt||he!==en||De!==Dt)&&(r.stencilFunc(Mt,en,Dt),W=Mt,he=en,De=Dt)},setOp:function(Mt,en,Dt){(Ge!==Mt||Je!==en||At!==Dt)&&(r.stencilOp(Mt,en,Dt),Ge=Mt,Je=en,At=Dt)},setLocked:function(Mt){oe=Mt},setClear:function(Mt){Rt!==Mt&&(r.clearStencil(Mt),Rt=Mt)},reset:function(){oe=!1,Te=null,W=null,he=null,De=null,Ge=null,Je=null,At=null,Rt=null}}}const o=new t,c=new n,u=new s,f=new WeakMap,d=new WeakMap;let p={},m={},g=new WeakMap,v=[],A=null,y=!1,S=null,_=null,b=null,E=null,R=null,D=null,L=null,w=new hn(0,0,0),B=0,C=!1,T=null,O=null,X=null,$=null,z=null;const k=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let I=!1,Y=0;const q=r.getParameter(r.VERSION);q.indexOf("WebGL")!==-1?(Y=parseFloat(/^WebGL (\d)/.exec(q)[1]),I=Y>=1):q.indexOf("OpenGL ES")!==-1&&(Y=parseFloat(/^OpenGL ES (\d)/.exec(q)[1]),I=Y>=2);let J=null,F={};const ee=r.getParameter(r.SCISSOR_BOX),ce=r.getParameter(r.VIEWPORT),ie=new Un().fromArray(ee),j=new Un().fromArray(ce);function ue(oe,Te,W,he){const De=new Uint8Array(4),Ge=r.createTexture();r.bindTexture(oe,Ge),r.texParameteri(oe,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(oe,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let Je=0;Je<W;Je++)oe===r.TEXTURE_3D||oe===r.TEXTURE_2D_ARRAY?r.texImage3D(Te,0,r.RGBA,1,1,he,0,r.RGBA,r.UNSIGNED_BYTE,De):r.texImage2D(Te+Je,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,De);return Ge}const ge={};ge[r.TEXTURE_2D]=ue(r.TEXTURE_2D,r.TEXTURE_2D,1),ge[r.TEXTURE_CUBE_MAP]=ue(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),ge[r.TEXTURE_2D_ARRAY]=ue(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),ge[r.TEXTURE_3D]=ue(r.TEXTURE_3D,r.TEXTURE_3D,1,1),o.setClear(0,0,0,1),c.setClear(1),u.setClear(0),Ae(r.DEPTH_TEST),c.setFunc(rc),Ke(!1),at(_M),Ae(r.CULL_FACE),Z(Da);function Ae(oe){p[oe]!==!0&&(r.enable(oe),p[oe]=!0)}function Be(oe){p[oe]!==!1&&(r.disable(oe),p[oe]=!1)}function Ze(oe,Te){return m[oe]!==Te?(r.bindFramebuffer(oe,Te),m[oe]=Te,oe===r.DRAW_FRAMEBUFFER&&(m[r.FRAMEBUFFER]=Te),oe===r.FRAMEBUFFER&&(m[r.DRAW_FRAMEBUFFER]=Te),!0):!1}function Xe(oe,Te){let W=v,he=!1;if(oe){W=g.get(Te),W===void 0&&(W=[],g.set(Te,W));const De=oe.textures;if(W.length!==De.length||W[0]!==r.COLOR_ATTACHMENT0){for(let Ge=0,Je=De.length;Ge<Je;Ge++)W[Ge]=r.COLOR_ATTACHMENT0+Ge;W.length=De.length,he=!0}}else W[0]!==r.BACK&&(W[0]=r.BACK,he=!0);he&&r.drawBuffers(W)}function ft(oe){return A!==oe?(r.useProgram(oe),A=oe,!0):!1}const _e={[_o]:r.FUNC_ADD,[JU]:r.FUNC_SUBTRACT,[eI]:r.FUNC_REVERSE_SUBTRACT};_e[tI]=r.MIN,_e[nI]=r.MAX;const ct={[iI]:r.ZERO,[sI]:r.ONE,[rI]:r.SRC_COLOR,[_0]:r.SRC_ALPHA,[fI]:r.SRC_ALPHA_SATURATE,[cI]:r.DST_COLOR,[oI]:r.DST_ALPHA,[aI]:r.ONE_MINUS_SRC_COLOR,[v0]:r.ONE_MINUS_SRC_ALPHA,[uI]:r.ONE_MINUS_DST_COLOR,[lI]:r.ONE_MINUS_DST_ALPHA,[dI]:r.CONSTANT_COLOR,[hI]:r.ONE_MINUS_CONSTANT_COLOR,[pI]:r.CONSTANT_ALPHA,[mI]:r.ONE_MINUS_CONSTANT_ALPHA};function Z(oe,Te,W,he,De,Ge,Je,At,Rt,Mt){if(oe===Da){y===!0&&(Be(r.BLEND),y=!1);return}if(y===!1&&(Ae(r.BLEND),y=!0),oe!==ZU){if(oe!==S||Mt!==C){if((_!==_o||R!==_o)&&(r.blendEquation(r.FUNC_ADD),_=_o,R=_o),Mt)switch(oe){case jl:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case vM:r.blendFunc(r.ONE,r.ONE);break;case SM:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case xM:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",oe);break}else switch(oe){case jl:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case vM:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case SM:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case xM:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",oe);break}b=null,E=null,D=null,L=null,w.set(0,0,0),B=0,S=oe,C=Mt}return}De=De||Te,Ge=Ge||W,Je=Je||he,(Te!==_||De!==R)&&(r.blendEquationSeparate(_e[Te],_e[De]),_=Te,R=De),(W!==b||he!==E||Ge!==D||Je!==L)&&(r.blendFuncSeparate(ct[W],ct[he],ct[Ge],ct[Je]),b=W,E=he,D=Ge,L=Je),(At.equals(w)===!1||Rt!==B)&&(r.blendColor(At.r,At.g,At.b,Rt),w.copy(At),B=Rt),S=oe,C=!1}function it(oe,Te){oe.side===Ir?Be(r.CULL_FACE):Ae(r.CULL_FACE);let W=oe.side===Bi;Te&&(W=!W),Ke(W),oe.blending===jl&&oe.transparent===!1?Z(Da):Z(oe.blending,oe.blendEquation,oe.blendSrc,oe.blendDst,oe.blendEquationAlpha,oe.blendSrcAlpha,oe.blendDstAlpha,oe.blendColor,oe.blendAlpha,oe.premultipliedAlpha),c.setFunc(oe.depthFunc),c.setTest(oe.depthTest),c.setMask(oe.depthWrite),o.setMask(oe.colorWrite);const he=oe.stencilWrite;u.setTest(he),he&&(u.setMask(oe.stencilWriteMask),u.setFunc(oe.stencilFunc,oe.stencilRef,oe.stencilFuncMask),u.setOp(oe.stencilFail,oe.stencilZFail,oe.stencilZPass)),Q(oe.polygonOffset,oe.polygonOffsetFactor,oe.polygonOffsetUnits),oe.alphaToCoverage===!0?Ae(r.SAMPLE_ALPHA_TO_COVERAGE):Be(r.SAMPLE_ALPHA_TO_COVERAGE)}function Ke(oe){T!==oe&&(oe?r.frontFace(r.CW):r.frontFace(r.CCW),T=oe)}function at(oe){oe!==QU?(Ae(r.CULL_FACE),oe!==O&&(oe===_M?r.cullFace(r.BACK):oe===KU?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Be(r.CULL_FACE),O=oe}function $e(oe){oe!==X&&(I&&r.lineWidth(oe),X=oe)}function Q(oe,Te,W){oe?(Ae(r.POLYGON_OFFSET_FILL),($!==Te||z!==W)&&(r.polygonOffset(Te,W),$=Te,z=W)):Be(r.POLYGON_OFFSET_FILL)}function G(oe){oe?Ae(r.SCISSOR_TEST):Be(r.SCISSOR_TEST)}function N(oe){oe===void 0&&(oe=r.TEXTURE0+k-1),J!==oe&&(r.activeTexture(oe),J=oe)}function U(oe,Te,W){W===void 0&&(J===null?W=r.TEXTURE0+k-1:W=J);let he=F[W];he===void 0&&(he={type:void 0,texture:void 0},F[W]=he),(he.type!==oe||he.texture!==Te)&&(J!==W&&(r.activeTexture(W),J=W),r.bindTexture(oe,Te||ge[oe]),he.type=oe,he.texture=Te)}function se(){const oe=F[J];oe!==void 0&&oe.type!==void 0&&(r.bindTexture(oe.type,null),oe.type=void 0,oe.texture=void 0)}function fe(){try{r.compressedTexImage2D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function Ee(){try{r.compressedTexImage3D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function pe(){try{r.texSubImage2D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function Oe(){try{r.texSubImage3D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function ze(){try{r.compressedTexSubImage2D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function je(){try{r.compressedTexSubImage3D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function Pe(){try{r.texStorage2D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function Ve(){try{r.texStorage3D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function te(){try{r.texImage2D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function Ce(){try{r.texImage3D(...arguments)}catch(oe){console.error("THREE.WebGLState:",oe)}}function ke(oe){ie.equals(oe)===!1&&(r.scissor(oe.x,oe.y,oe.z,oe.w),ie.copy(oe))}function be(oe){j.equals(oe)===!1&&(r.viewport(oe.x,oe.y,oe.z,oe.w),j.copy(oe))}function tt(oe,Te){let W=d.get(Te);W===void 0&&(W=new WeakMap,d.set(Te,W));let he=W.get(oe);he===void 0&&(he=r.getUniformBlockIndex(Te,oe.name),W.set(oe,he))}function st(oe,Te){const he=d.get(Te).get(oe);f.get(Te)!==he&&(r.uniformBlockBinding(Te,he,oe.__bindingPointIndex),f.set(Te,he))}function St(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),c.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),p={},J=null,F={},m={},g=new WeakMap,v=[],A=null,y=!1,S=null,_=null,b=null,E=null,R=null,D=null,L=null,w=new hn(0,0,0),B=0,C=!1,T=null,O=null,X=null,$=null,z=null,ie.set(0,0,r.canvas.width,r.canvas.height),j.set(0,0,r.canvas.width,r.canvas.height),o.reset(),c.reset(),u.reset()}return{buffers:{color:o,depth:c,stencil:u},enable:Ae,disable:Be,bindFramebuffer:Ze,drawBuffers:Xe,useProgram:ft,setBlending:Z,setMaterial:it,setFlipSided:Ke,setCullFace:at,setLineWidth:$e,setPolygonOffset:Q,setScissorTest:G,activeTexture:N,bindTexture:U,unbindTexture:se,compressedTexImage2D:fe,compressedTexImage3D:Ee,texImage2D:te,texImage3D:Ce,updateUBOMapping:tt,uniformBlockBinding:st,texStorage2D:Pe,texStorage3D:Ve,texSubImage2D:pe,texSubImage3D:Oe,compressedTexSubImage2D:ze,compressedTexSubImage3D:je,scissor:ke,viewport:be,reset:St}}function jO(r,e,t,n,s,o,c){const u=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,f=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),d=new mn,p=new WeakMap;let m;const g=new WeakMap;let v=!1;try{v=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function A(N,U){return v?new OffscreenCanvas(N,U):Fu("canvas")}function y(N,U,se){let fe=1;const Ee=G(N);if((Ee.width>se||Ee.height>se)&&(fe=se/Math.max(Ee.width,Ee.height)),fe<1)if(typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&N instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&N instanceof ImageBitmap||typeof VideoFrame<"u"&&N instanceof VideoFrame){const pe=Math.floor(fe*Ee.width),Oe=Math.floor(fe*Ee.height);m===void 0&&(m=A(pe,Oe));const ze=U?A(pe,Oe):m;return ze.width=pe,ze.height=Oe,ze.getContext("2d").drawImage(N,0,0,pe,Oe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Ee.width+"x"+Ee.height+") to ("+pe+"x"+Oe+")."),ze}else return"data"in N&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Ee.width+"x"+Ee.height+")."),N;return N}function S(N){return N.generateMipmaps}function _(N){r.generateMipmap(N)}function b(N){return N.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:N.isWebGL3DRenderTarget?r.TEXTURE_3D:N.isWebGLArrayRenderTarget||N.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function E(N,U,se,fe,Ee=!1){if(N!==null){if(r[N]!==void 0)return r[N];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+N+"'")}let pe=U;if(U===r.RED&&(se===r.FLOAT&&(pe=r.R32F),se===r.HALF_FLOAT&&(pe=r.R16F),se===r.UNSIGNED_BYTE&&(pe=r.R8)),U===r.RED_INTEGER&&(se===r.UNSIGNED_BYTE&&(pe=r.R8UI),se===r.UNSIGNED_SHORT&&(pe=r.R16UI),se===r.UNSIGNED_INT&&(pe=r.R32UI),se===r.BYTE&&(pe=r.R8I),se===r.SHORT&&(pe=r.R16I),se===r.INT&&(pe=r.R32I)),U===r.RG&&(se===r.FLOAT&&(pe=r.RG32F),se===r.HALF_FLOAT&&(pe=r.RG16F),se===r.UNSIGNED_BYTE&&(pe=r.RG8)),U===r.RG_INTEGER&&(se===r.UNSIGNED_BYTE&&(pe=r.RG8UI),se===r.UNSIGNED_SHORT&&(pe=r.RG16UI),se===r.UNSIGNED_INT&&(pe=r.RG32UI),se===r.BYTE&&(pe=r.RG8I),se===r.SHORT&&(pe=r.RG16I),se===r.INT&&(pe=r.RG32I)),U===r.RGB_INTEGER&&(se===r.UNSIGNED_BYTE&&(pe=r.RGB8UI),se===r.UNSIGNED_SHORT&&(pe=r.RGB16UI),se===r.UNSIGNED_INT&&(pe=r.RGB32UI),se===r.BYTE&&(pe=r.RGB8I),se===r.SHORT&&(pe=r.RGB16I),se===r.INT&&(pe=r.RGB32I)),U===r.RGBA_INTEGER&&(se===r.UNSIGNED_BYTE&&(pe=r.RGBA8UI),se===r.UNSIGNED_SHORT&&(pe=r.RGBA16UI),se===r.UNSIGNED_INT&&(pe=r.RGBA32UI),se===r.BYTE&&(pe=r.RGBA8I),se===r.SHORT&&(pe=r.RGBA16I),se===r.INT&&(pe=r.RGBA32I)),U===r.RGB&&se===r.UNSIGNED_INT_5_9_9_9_REV&&(pe=r.RGB9_E5),U===r.RGBA){const Oe=Ee?vh:Kt.getTransfer(fe);se===r.FLOAT&&(pe=r.RGBA32F),se===r.HALF_FLOAT&&(pe=r.RGBA16F),se===r.UNSIGNED_BYTE&&(pe=Oe===fn?r.SRGB8_ALPHA8:r.RGBA8),se===r.UNSIGNED_SHORT_4_4_4_4&&(pe=r.RGBA4),se===r.UNSIGNED_SHORT_5_5_5_1&&(pe=r.RGB5_A1)}return(pe===r.R16F||pe===r.R32F||pe===r.RG16F||pe===r.RG32F||pe===r.RGBA16F||pe===r.RGBA32F)&&e.get("EXT_color_buffer_float"),pe}function R(N,U){let se;return N?U===null||U===Co||U===Uu?se=r.DEPTH24_STENCIL8:U===Fr?se=r.DEPTH32F_STENCIL8:U===Pu&&(se=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):U===null||U===Co||U===Uu?se=r.DEPTH_COMPONENT24:U===Fr?se=r.DEPTH_COMPONENT32F:U===Pu&&(se=r.DEPTH_COMPONENT16),se}function D(N,U){return S(N)===!0||N.isFramebufferTexture&&N.minFilter!==Bs&&N.minFilter!==$s?Math.log2(Math.max(U.width,U.height))+1:N.mipmaps!==void 0&&N.mipmaps.length>0?N.mipmaps.length:N.isCompressedTexture&&Array.isArray(N.image)?U.mipmaps.length:1}function L(N){const U=N.target;U.removeEventListener("dispose",L),B(U),U.isVideoTexture&&p.delete(U)}function w(N){const U=N.target;U.removeEventListener("dispose",w),T(U)}function B(N){const U=n.get(N);if(U.__webglInit===void 0)return;const se=N.source,fe=g.get(se);if(fe){const Ee=fe[U.__cacheKey];Ee.usedTimes--,Ee.usedTimes===0&&C(N),Object.keys(fe).length===0&&g.delete(se)}n.remove(N)}function C(N){const U=n.get(N);r.deleteTexture(U.__webglTexture);const se=N.source,fe=g.get(se);delete fe[U.__cacheKey],c.memory.textures--}function T(N){const U=n.get(N);if(N.depthTexture&&(N.depthTexture.dispose(),n.remove(N.depthTexture)),N.isWebGLCubeRenderTarget)for(let fe=0;fe<6;fe++){if(Array.isArray(U.__webglFramebuffer[fe]))for(let Ee=0;Ee<U.__webglFramebuffer[fe].length;Ee++)r.deleteFramebuffer(U.__webglFramebuffer[fe][Ee]);else r.deleteFramebuffer(U.__webglFramebuffer[fe]);U.__webglDepthbuffer&&r.deleteRenderbuffer(U.__webglDepthbuffer[fe])}else{if(Array.isArray(U.__webglFramebuffer))for(let fe=0;fe<U.__webglFramebuffer.length;fe++)r.deleteFramebuffer(U.__webglFramebuffer[fe]);else r.deleteFramebuffer(U.__webglFramebuffer);if(U.__webglDepthbuffer&&r.deleteRenderbuffer(U.__webglDepthbuffer),U.__webglMultisampledFramebuffer&&r.deleteFramebuffer(U.__webglMultisampledFramebuffer),U.__webglColorRenderbuffer)for(let fe=0;fe<U.__webglColorRenderbuffer.length;fe++)U.__webglColorRenderbuffer[fe]&&r.deleteRenderbuffer(U.__webglColorRenderbuffer[fe]);U.__webglDepthRenderbuffer&&r.deleteRenderbuffer(U.__webglDepthRenderbuffer)}const se=N.textures;for(let fe=0,Ee=se.length;fe<Ee;fe++){const pe=n.get(se[fe]);pe.__webglTexture&&(r.deleteTexture(pe.__webglTexture),c.memory.textures--),n.remove(se[fe])}n.remove(N)}let O=0;function X(){O=0}function $(){const N=O;return N>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+N+" texture units while this GPU supports only "+s.maxTextures),O+=1,N}function z(N){const U=[];return U.push(N.wrapS),U.push(N.wrapT),U.push(N.wrapR||0),U.push(N.magFilter),U.push(N.minFilter),U.push(N.anisotropy),U.push(N.internalFormat),U.push(N.format),U.push(N.type),U.push(N.generateMipmaps),U.push(N.premultiplyAlpha),U.push(N.flipY),U.push(N.unpackAlignment),U.push(N.colorSpace),U.join()}function k(N,U){const se=n.get(N);if(N.isVideoTexture&&$e(N),N.isRenderTargetTexture===!1&&N.version>0&&se.__version!==N.version){const fe=N.image;if(fe===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(fe.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{j(se,N,U);return}}t.bindTexture(r.TEXTURE_2D,se.__webglTexture,r.TEXTURE0+U)}function I(N,U){const se=n.get(N);if(N.version>0&&se.__version!==N.version){j(se,N,U);return}t.bindTexture(r.TEXTURE_2D_ARRAY,se.__webglTexture,r.TEXTURE0+U)}function Y(N,U){const se=n.get(N);if(N.version>0&&se.__version!==N.version){j(se,N,U);return}t.bindTexture(r.TEXTURE_3D,se.__webglTexture,r.TEXTURE0+U)}function q(N,U){const se=n.get(N);if(N.version>0&&se.__version!==N.version){ue(se,N,U);return}t.bindTexture(r.TEXTURE_CUBE_MAP,se.__webglTexture,r.TEXTURE0+U)}const J={[C0]:r.REPEAT,[Ao]:r.CLAMP_TO_EDGE,[R0]:r.MIRRORED_REPEAT},F={[Bs]:r.NEAREST,[TI]:r.NEAREST_MIPMAP_NEAREST,[Rd]:r.NEAREST_MIPMAP_LINEAR,[$s]:r.LINEAR,[Tg]:r.LINEAR_MIPMAP_NEAREST,[yo]:r.LINEAR_MIPMAP_LINEAR},ee={[DI]:r.NEVER,[FI]:r.ALWAYS,[LI]:r.LESS,[AT]:r.LEQUAL,[PI]:r.EQUAL,[BI]:r.GEQUAL,[UI]:r.GREATER,[II]:r.NOTEQUAL};function ce(N,U){if(U.type===Fr&&e.has("OES_texture_float_linear")===!1&&(U.magFilter===$s||U.magFilter===Tg||U.magFilter===Rd||U.magFilter===yo||U.minFilter===$s||U.minFilter===Tg||U.minFilter===Rd||U.minFilter===yo)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(N,r.TEXTURE_WRAP_S,J[U.wrapS]),r.texParameteri(N,r.TEXTURE_WRAP_T,J[U.wrapT]),(N===r.TEXTURE_3D||N===r.TEXTURE_2D_ARRAY)&&r.texParameteri(N,r.TEXTURE_WRAP_R,J[U.wrapR]),r.texParameteri(N,r.TEXTURE_MAG_FILTER,F[U.magFilter]),r.texParameteri(N,r.TEXTURE_MIN_FILTER,F[U.minFilter]),U.compareFunction&&(r.texParameteri(N,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(N,r.TEXTURE_COMPARE_FUNC,ee[U.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(U.magFilter===Bs||U.minFilter!==Rd&&U.minFilter!==yo||U.type===Fr&&e.has("OES_texture_float_linear")===!1)return;if(U.anisotropy>1||n.get(U).__currentAnisotropy){const se=e.get("EXT_texture_filter_anisotropic");r.texParameterf(N,se.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(U.anisotropy,s.getMaxAnisotropy())),n.get(U).__currentAnisotropy=U.anisotropy}}}function ie(N,U){let se=!1;N.__webglInit===void 0&&(N.__webglInit=!0,U.addEventListener("dispose",L));const fe=U.source;let Ee=g.get(fe);Ee===void 0&&(Ee={},g.set(fe,Ee));const pe=z(U);if(pe!==N.__cacheKey){Ee[pe]===void 0&&(Ee[pe]={texture:r.createTexture(),usedTimes:0},c.memory.textures++,se=!0),Ee[pe].usedTimes++;const Oe=Ee[N.__cacheKey];Oe!==void 0&&(Ee[N.__cacheKey].usedTimes--,Oe.usedTimes===0&&C(U)),N.__cacheKey=pe,N.__webglTexture=Ee[pe].texture}return se}function j(N,U,se){let fe=r.TEXTURE_2D;(U.isDataArrayTexture||U.isCompressedArrayTexture)&&(fe=r.TEXTURE_2D_ARRAY),U.isData3DTexture&&(fe=r.TEXTURE_3D);const Ee=ie(N,U),pe=U.source;t.bindTexture(fe,N.__webglTexture,r.TEXTURE0+se);const Oe=n.get(pe);if(pe.version!==Oe.__version||Ee===!0){t.activeTexture(r.TEXTURE0+se);const ze=Kt.getPrimaries(Kt.workingColorSpace),je=U.colorSpace===Ta?null:Kt.getPrimaries(U.colorSpace),Pe=U.colorSpace===Ta||ze===je?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,U.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,U.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,U.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Pe);let Ve=y(U.image,!1,s.maxTextureSize);Ve=Q(U,Ve);const te=o.convert(U.format,U.colorSpace),Ce=o.convert(U.type);let ke=E(U.internalFormat,te,Ce,U.colorSpace,U.isVideoTexture);ce(fe,U);let be;const tt=U.mipmaps,st=U.isVideoTexture!==!0,St=Oe.__version===void 0||Ee===!0,oe=pe.dataReady,Te=D(U,Ve);if(U.isDepthTexture)ke=R(U.format===Bu,U.type),St&&(st?t.texStorage2D(r.TEXTURE_2D,1,ke,Ve.width,Ve.height):t.texImage2D(r.TEXTURE_2D,0,ke,Ve.width,Ve.height,0,te,Ce,null));else if(U.isDataTexture)if(tt.length>0){st&&St&&t.texStorage2D(r.TEXTURE_2D,Te,ke,tt[0].width,tt[0].height);for(let W=0,he=tt.length;W<he;W++)be=tt[W],st?oe&&t.texSubImage2D(r.TEXTURE_2D,W,0,0,be.width,be.height,te,Ce,be.data):t.texImage2D(r.TEXTURE_2D,W,ke,be.width,be.height,0,te,Ce,be.data);U.generateMipmaps=!1}else st?(St&&t.texStorage2D(r.TEXTURE_2D,Te,ke,Ve.width,Ve.height),oe&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,Ve.width,Ve.height,te,Ce,Ve.data)):t.texImage2D(r.TEXTURE_2D,0,ke,Ve.width,Ve.height,0,te,Ce,Ve.data);else if(U.isCompressedTexture)if(U.isCompressedArrayTexture){st&&St&&t.texStorage3D(r.TEXTURE_2D_ARRAY,Te,ke,tt[0].width,tt[0].height,Ve.depth);for(let W=0,he=tt.length;W<he;W++)if(be=tt[W],U.format!==Is)if(te!==null)if(st){if(oe)if(U.layerUpdates.size>0){const De=VM(be.width,be.height,U.format,U.type);for(const Ge of U.layerUpdates){const Je=be.data.subarray(Ge*De/be.data.BYTES_PER_ELEMENT,(Ge+1)*De/be.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,W,0,0,Ge,be.width,be.height,1,te,Je)}U.clearLayerUpdates()}else t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,W,0,0,0,be.width,be.height,Ve.depth,te,be.data)}else t.compressedTexImage3D(r.TEXTURE_2D_ARRAY,W,ke,be.width,be.height,Ve.depth,0,be.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else st?oe&&t.texSubImage3D(r.TEXTURE_2D_ARRAY,W,0,0,0,be.width,be.height,Ve.depth,te,Ce,be.data):t.texImage3D(r.TEXTURE_2D_ARRAY,W,ke,be.width,be.height,Ve.depth,0,te,Ce,be.data)}else{st&&St&&t.texStorage2D(r.TEXTURE_2D,Te,ke,tt[0].width,tt[0].height);for(let W=0,he=tt.length;W<he;W++)be=tt[W],U.format!==Is?te!==null?st?oe&&t.compressedTexSubImage2D(r.TEXTURE_2D,W,0,0,be.width,be.height,te,be.data):t.compressedTexImage2D(r.TEXTURE_2D,W,ke,be.width,be.height,0,be.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):st?oe&&t.texSubImage2D(r.TEXTURE_2D,W,0,0,be.width,be.height,te,Ce,be.data):t.texImage2D(r.TEXTURE_2D,W,ke,be.width,be.height,0,te,Ce,be.data)}else if(U.isDataArrayTexture)if(st){if(St&&t.texStorage3D(r.TEXTURE_2D_ARRAY,Te,ke,Ve.width,Ve.height,Ve.depth),oe)if(U.layerUpdates.size>0){const W=VM(Ve.width,Ve.height,U.format,U.type);for(const he of U.layerUpdates){const De=Ve.data.subarray(he*W/Ve.data.BYTES_PER_ELEMENT,(he+1)*W/Ve.data.BYTES_PER_ELEMENT);t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,he,Ve.width,Ve.height,1,te,Ce,De)}U.clearLayerUpdates()}else t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,Ve.width,Ve.height,Ve.depth,te,Ce,Ve.data)}else t.texImage3D(r.TEXTURE_2D_ARRAY,0,ke,Ve.width,Ve.height,Ve.depth,0,te,Ce,Ve.data);else if(U.isData3DTexture)st?(St&&t.texStorage3D(r.TEXTURE_3D,Te,ke,Ve.width,Ve.height,Ve.depth),oe&&t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,Ve.width,Ve.height,Ve.depth,te,Ce,Ve.data)):t.texImage3D(r.TEXTURE_3D,0,ke,Ve.width,Ve.height,Ve.depth,0,te,Ce,Ve.data);else if(U.isFramebufferTexture){if(St)if(st)t.texStorage2D(r.TEXTURE_2D,Te,ke,Ve.width,Ve.height);else{let W=Ve.width,he=Ve.height;for(let De=0;De<Te;De++)t.texImage2D(r.TEXTURE_2D,De,ke,W,he,0,te,Ce,null),W>>=1,he>>=1}}else if(tt.length>0){if(st&&St){const W=G(tt[0]);t.texStorage2D(r.TEXTURE_2D,Te,ke,W.width,W.height)}for(let W=0,he=tt.length;W<he;W++)be=tt[W],st?oe&&t.texSubImage2D(r.TEXTURE_2D,W,0,0,te,Ce,be):t.texImage2D(r.TEXTURE_2D,W,ke,te,Ce,be);U.generateMipmaps=!1}else if(st){if(St){const W=G(Ve);t.texStorage2D(r.TEXTURE_2D,Te,ke,W.width,W.height)}oe&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,te,Ce,Ve)}else t.texImage2D(r.TEXTURE_2D,0,ke,te,Ce,Ve);S(U)&&_(fe),Oe.__version=pe.version,U.onUpdate&&U.onUpdate(U)}N.__version=U.version}function ue(N,U,se){if(U.image.length!==6)return;const fe=ie(N,U),Ee=U.source;t.bindTexture(r.TEXTURE_CUBE_MAP,N.__webglTexture,r.TEXTURE0+se);const pe=n.get(Ee);if(Ee.version!==pe.__version||fe===!0){t.activeTexture(r.TEXTURE0+se);const Oe=Kt.getPrimaries(Kt.workingColorSpace),ze=U.colorSpace===Ta?null:Kt.getPrimaries(U.colorSpace),je=U.colorSpace===Ta||Oe===ze?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,U.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,U.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,U.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,je);const Pe=U.isCompressedTexture||U.image[0].isCompressedTexture,Ve=U.image[0]&&U.image[0].isDataTexture,te=[];for(let he=0;he<6;he++)!Pe&&!Ve?te[he]=y(U.image[he],!0,s.maxCubemapSize):te[he]=Ve?U.image[he].image:U.image[he],te[he]=Q(U,te[he]);const Ce=te[0],ke=o.convert(U.format,U.colorSpace),be=o.convert(U.type),tt=E(U.internalFormat,ke,be,U.colorSpace),st=U.isVideoTexture!==!0,St=pe.__version===void 0||fe===!0,oe=Ee.dataReady;let Te=D(U,Ce);ce(r.TEXTURE_CUBE_MAP,U);let W;if(Pe){st&&St&&t.texStorage2D(r.TEXTURE_CUBE_MAP,Te,tt,Ce.width,Ce.height);for(let he=0;he<6;he++){W=te[he].mipmaps;for(let De=0;De<W.length;De++){const Ge=W[De];U.format!==Is?ke!==null?st?oe&&t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De,0,0,Ge.width,Ge.height,ke,Ge.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De,tt,Ge.width,Ge.height,0,Ge.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):st?oe&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De,0,0,Ge.width,Ge.height,ke,be,Ge.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De,tt,Ge.width,Ge.height,0,ke,be,Ge.data)}}}else{if(W=U.mipmaps,st&&St){W.length>0&&Te++;const he=G(te[0]);t.texStorage2D(r.TEXTURE_CUBE_MAP,Te,tt,he.width,he.height)}for(let he=0;he<6;he++)if(Ve){st?oe&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,0,0,te[he].width,te[he].height,ke,be,te[he].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,tt,te[he].width,te[he].height,0,ke,be,te[he].data);for(let De=0;De<W.length;De++){const Je=W[De].image[he].image;st?oe&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De+1,0,0,Je.width,Je.height,ke,be,Je.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De+1,tt,Je.width,Je.height,0,ke,be,Je.data)}}else{st?oe&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,0,0,ke,be,te[he]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,0,tt,ke,be,te[he]);for(let De=0;De<W.length;De++){const Ge=W[De];st?oe&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De+1,0,0,ke,be,Ge.image[he]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+he,De+1,tt,ke,be,Ge.image[he])}}}S(U)&&_(r.TEXTURE_CUBE_MAP),pe.__version=Ee.version,U.onUpdate&&U.onUpdate(U)}N.__version=U.version}function ge(N,U,se,fe,Ee,pe){const Oe=o.convert(se.format,se.colorSpace),ze=o.convert(se.type),je=E(se.internalFormat,Oe,ze,se.colorSpace),Pe=n.get(U),Ve=n.get(se);if(Ve.__renderTarget=U,!Pe.__hasExternalTextures){const te=Math.max(1,U.width>>pe),Ce=Math.max(1,U.height>>pe);Ee===r.TEXTURE_3D||Ee===r.TEXTURE_2D_ARRAY?t.texImage3D(Ee,pe,je,te,Ce,U.depth,0,Oe,ze,null):t.texImage2D(Ee,pe,je,te,Ce,0,Oe,ze,null)}t.bindFramebuffer(r.FRAMEBUFFER,N),at(U)?u.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,fe,Ee,Ve.__webglTexture,0,Ke(U)):(Ee===r.TEXTURE_2D||Ee>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&Ee<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,fe,Ee,Ve.__webglTexture,pe),t.bindFramebuffer(r.FRAMEBUFFER,null)}function Ae(N,U,se){if(r.bindRenderbuffer(r.RENDERBUFFER,N),U.depthBuffer){const fe=U.depthTexture,Ee=fe&&fe.isDepthTexture?fe.type:null,pe=R(U.stencilBuffer,Ee),Oe=U.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,ze=Ke(U);at(U)?u.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,ze,pe,U.width,U.height):se?r.renderbufferStorageMultisample(r.RENDERBUFFER,ze,pe,U.width,U.height):r.renderbufferStorage(r.RENDERBUFFER,pe,U.width,U.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,Oe,r.RENDERBUFFER,N)}else{const fe=U.textures;for(let Ee=0;Ee<fe.length;Ee++){const pe=fe[Ee],Oe=o.convert(pe.format,pe.colorSpace),ze=o.convert(pe.type),je=E(pe.internalFormat,Oe,ze,pe.colorSpace),Pe=Ke(U);se&&at(U)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,Pe,je,U.width,U.height):at(U)?u.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Pe,je,U.width,U.height):r.renderbufferStorage(r.RENDERBUFFER,je,U.width,U.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Be(N,U){if(U&&U.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,N),!(U.depthTexture&&U.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const fe=n.get(U.depthTexture);fe.__renderTarget=U,(!fe.__webglTexture||U.depthTexture.image.width!==U.width||U.depthTexture.image.height!==U.height)&&(U.depthTexture.image.width=U.width,U.depthTexture.image.height=U.height,U.depthTexture.needsUpdate=!0),k(U.depthTexture,0);const Ee=fe.__webglTexture,pe=Ke(U);if(U.depthTexture.format===Iu)at(U)?u.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,Ee,0,pe):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,Ee,0);else if(U.depthTexture.format===Bu)at(U)?u.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,Ee,0,pe):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,Ee,0);else throw new Error("Unknown depthTexture format")}function Ze(N){const U=n.get(N),se=N.isWebGLCubeRenderTarget===!0;if(U.__boundDepthTexture!==N.depthTexture){const fe=N.depthTexture;if(U.__depthDisposeCallback&&U.__depthDisposeCallback(),fe){const Ee=()=>{delete U.__boundDepthTexture,delete U.__depthDisposeCallback,fe.removeEventListener("dispose",Ee)};fe.addEventListener("dispose",Ee),U.__depthDisposeCallback=Ee}U.__boundDepthTexture=fe}if(N.depthTexture&&!U.__autoAllocateDepthBuffer){if(se)throw new Error("target.depthTexture not supported in Cube render targets");const fe=N.texture.mipmaps;fe&&fe.length>0?Be(U.__webglFramebuffer[0],N):Be(U.__webglFramebuffer,N)}else if(se){U.__webglDepthbuffer=[];for(let fe=0;fe<6;fe++)if(t.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer[fe]),U.__webglDepthbuffer[fe]===void 0)U.__webglDepthbuffer[fe]=r.createRenderbuffer(),Ae(U.__webglDepthbuffer[fe],N,!1);else{const Ee=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,pe=U.__webglDepthbuffer[fe];r.bindRenderbuffer(r.RENDERBUFFER,pe),r.framebufferRenderbuffer(r.FRAMEBUFFER,Ee,r.RENDERBUFFER,pe)}}else{const fe=N.texture.mipmaps;if(fe&&fe.length>0?t.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer[0]):t.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer),U.__webglDepthbuffer===void 0)U.__webglDepthbuffer=r.createRenderbuffer(),Ae(U.__webglDepthbuffer,N,!1);else{const Ee=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,pe=U.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,pe),r.framebufferRenderbuffer(r.FRAMEBUFFER,Ee,r.RENDERBUFFER,pe)}}t.bindFramebuffer(r.FRAMEBUFFER,null)}function Xe(N,U,se){const fe=n.get(N);U!==void 0&&ge(fe.__webglFramebuffer,N,N.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),se!==void 0&&Ze(N)}function ft(N){const U=N.texture,se=n.get(N),fe=n.get(U);N.addEventListener("dispose",w);const Ee=N.textures,pe=N.isWebGLCubeRenderTarget===!0,Oe=Ee.length>1;if(Oe||(fe.__webglTexture===void 0&&(fe.__webglTexture=r.createTexture()),fe.__version=U.version,c.memory.textures++),pe){se.__webglFramebuffer=[];for(let ze=0;ze<6;ze++)if(U.mipmaps&&U.mipmaps.length>0){se.__webglFramebuffer[ze]=[];for(let je=0;je<U.mipmaps.length;je++)se.__webglFramebuffer[ze][je]=r.createFramebuffer()}else se.__webglFramebuffer[ze]=r.createFramebuffer()}else{if(U.mipmaps&&U.mipmaps.length>0){se.__webglFramebuffer=[];for(let ze=0;ze<U.mipmaps.length;ze++)se.__webglFramebuffer[ze]=r.createFramebuffer()}else se.__webglFramebuffer=r.createFramebuffer();if(Oe)for(let ze=0,je=Ee.length;ze<je;ze++){const Pe=n.get(Ee[ze]);Pe.__webglTexture===void 0&&(Pe.__webglTexture=r.createTexture(),c.memory.textures++)}if(N.samples>0&&at(N)===!1){se.__webglMultisampledFramebuffer=r.createFramebuffer(),se.__webglColorRenderbuffer=[],t.bindFramebuffer(r.FRAMEBUFFER,se.__webglMultisampledFramebuffer);for(let ze=0;ze<Ee.length;ze++){const je=Ee[ze];se.__webglColorRenderbuffer[ze]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,se.__webglColorRenderbuffer[ze]);const Pe=o.convert(je.format,je.colorSpace),Ve=o.convert(je.type),te=E(je.internalFormat,Pe,Ve,je.colorSpace,N.isXRRenderTarget===!0),Ce=Ke(N);r.renderbufferStorageMultisample(r.RENDERBUFFER,Ce,te,N.width,N.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+ze,r.RENDERBUFFER,se.__webglColorRenderbuffer[ze])}r.bindRenderbuffer(r.RENDERBUFFER,null),N.depthBuffer&&(se.__webglDepthRenderbuffer=r.createRenderbuffer(),Ae(se.__webglDepthRenderbuffer,N,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}}if(pe){t.bindTexture(r.TEXTURE_CUBE_MAP,fe.__webglTexture),ce(r.TEXTURE_CUBE_MAP,U);for(let ze=0;ze<6;ze++)if(U.mipmaps&&U.mipmaps.length>0)for(let je=0;je<U.mipmaps.length;je++)ge(se.__webglFramebuffer[ze][je],N,U,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+ze,je);else ge(se.__webglFramebuffer[ze],N,U,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+ze,0);S(U)&&_(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Oe){for(let ze=0,je=Ee.length;ze<je;ze++){const Pe=Ee[ze],Ve=n.get(Pe);t.bindTexture(r.TEXTURE_2D,Ve.__webglTexture),ce(r.TEXTURE_2D,Pe),ge(se.__webglFramebuffer,N,Pe,r.COLOR_ATTACHMENT0+ze,r.TEXTURE_2D,0),S(Pe)&&_(r.TEXTURE_2D)}t.unbindTexture()}else{let ze=r.TEXTURE_2D;if((N.isWebGL3DRenderTarget||N.isWebGLArrayRenderTarget)&&(ze=N.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),t.bindTexture(ze,fe.__webglTexture),ce(ze,U),U.mipmaps&&U.mipmaps.length>0)for(let je=0;je<U.mipmaps.length;je++)ge(se.__webglFramebuffer[je],N,U,r.COLOR_ATTACHMENT0,ze,je);else ge(se.__webglFramebuffer,N,U,r.COLOR_ATTACHMENT0,ze,0);S(U)&&_(ze),t.unbindTexture()}N.depthBuffer&&Ze(N)}function _e(N){const U=N.textures;for(let se=0,fe=U.length;se<fe;se++){const Ee=U[se];if(S(Ee)){const pe=b(N),Oe=n.get(Ee).__webglTexture;t.bindTexture(pe,Oe),_(pe),t.unbindTexture()}}}const ct=[],Z=[];function it(N){if(N.samples>0){if(at(N)===!1){const U=N.textures,se=N.width,fe=N.height;let Ee=r.COLOR_BUFFER_BIT;const pe=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Oe=n.get(N),ze=U.length>1;if(ze)for(let Pe=0;Pe<U.length;Pe++)t.bindFramebuffer(r.FRAMEBUFFER,Oe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Pe,r.RENDERBUFFER,null),t.bindFramebuffer(r.FRAMEBUFFER,Oe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Pe,r.TEXTURE_2D,null,0);t.bindFramebuffer(r.READ_FRAMEBUFFER,Oe.__webglMultisampledFramebuffer);const je=N.texture.mipmaps;je&&je.length>0?t.bindFramebuffer(r.DRAW_FRAMEBUFFER,Oe.__webglFramebuffer[0]):t.bindFramebuffer(r.DRAW_FRAMEBUFFER,Oe.__webglFramebuffer);for(let Pe=0;Pe<U.length;Pe++){if(N.resolveDepthBuffer&&(N.depthBuffer&&(Ee|=r.DEPTH_BUFFER_BIT),N.stencilBuffer&&N.resolveStencilBuffer&&(Ee|=r.STENCIL_BUFFER_BIT)),ze){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,Oe.__webglColorRenderbuffer[Pe]);const Ve=n.get(U[Pe]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,Ve,0)}r.blitFramebuffer(0,0,se,fe,0,0,se,fe,Ee,r.NEAREST),f===!0&&(ct.length=0,Z.length=0,ct.push(r.COLOR_ATTACHMENT0+Pe),N.depthBuffer&&N.resolveDepthBuffer===!1&&(ct.push(pe),Z.push(pe),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,Z)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,ct))}if(t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),ze)for(let Pe=0;Pe<U.length;Pe++){t.bindFramebuffer(r.FRAMEBUFFER,Oe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Pe,r.RENDERBUFFER,Oe.__webglColorRenderbuffer[Pe]);const Ve=n.get(U[Pe]).__webglTexture;t.bindFramebuffer(r.FRAMEBUFFER,Oe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Pe,r.TEXTURE_2D,Ve,0)}t.bindFramebuffer(r.DRAW_FRAMEBUFFER,Oe.__webglMultisampledFramebuffer)}else if(N.depthBuffer&&N.resolveDepthBuffer===!1&&f){const U=N.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[U])}}}function Ke(N){return Math.min(s.maxSamples,N.samples)}function at(N){const U=n.get(N);return N.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&U.__useRenderToTexture!==!1}function $e(N){const U=c.render.frame;p.get(N)!==U&&(p.set(N,U),N.update())}function Q(N,U){const se=N.colorSpace,fe=N.format,Ee=N.type;return N.isCompressedTexture===!0||N.isVideoTexture===!0||se!==lc&&se!==Ta&&(Kt.getTransfer(se)===fn?(fe!==Is||Ee!==Vr)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",se)),U}function G(N){return typeof HTMLImageElement<"u"&&N instanceof HTMLImageElement?(d.width=N.naturalWidth||N.width,d.height=N.naturalHeight||N.height):typeof VideoFrame<"u"&&N instanceof VideoFrame?(d.width=N.displayWidth,d.height=N.displayHeight):(d.width=N.width,d.height=N.height),d}this.allocateTextureUnit=$,this.resetTextureUnits=X,this.setTexture2D=k,this.setTexture2DArray=I,this.setTexture3D=Y,this.setTextureCube=q,this.rebindTextures=Xe,this.setupRenderTarget=ft,this.updateRenderTargetMipmap=_e,this.updateMultisampleRenderTarget=it,this.setupDepthRenderbuffer=Ze,this.setupFrameBufferTexture=ge,this.useMultisampledRTT=at}function ZO(r,e){function t(n,s=Ta){let o;const c=Kt.getTransfer(s);if(n===Vr)return r.UNSIGNED_BYTE;if(n===D_)return r.UNSIGNED_SHORT_4_4_4_4;if(n===L_)return r.UNSIGNED_SHORT_5_5_5_1;if(n===mT)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===hT)return r.BYTE;if(n===pT)return r.SHORT;if(n===Pu)return r.UNSIGNED_SHORT;if(n===w_)return r.INT;if(n===Co)return r.UNSIGNED_INT;if(n===Fr)return r.FLOAT;if(n===zu)return r.HALF_FLOAT;if(n===gT)return r.ALPHA;if(n===_T)return r.RGB;if(n===Is)return r.RGBA;if(n===Iu)return r.DEPTH_COMPONENT;if(n===Bu)return r.DEPTH_STENCIL;if(n===vT)return r.RED;if(n===P_)return r.RED_INTEGER;if(n===ST)return r.RG;if(n===U_)return r.RG_INTEGER;if(n===I_)return r.RGBA_INTEGER;if(n===eh||n===th||n===nh||n===ih)if(c===fn)if(o=e.get("WEBGL_compressed_texture_s3tc_srgb"),o!==null){if(n===eh)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===th)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===nh)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===ih)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(o=e.get("WEBGL_compressed_texture_s3tc"),o!==null){if(n===eh)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===th)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===nh)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===ih)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===w0||n===D0||n===L0||n===P0)if(o=e.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(n===w0)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===D0)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===L0)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===P0)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===U0||n===I0||n===B0)if(o=e.get("WEBGL_compressed_texture_etc"),o!==null){if(n===U0||n===I0)return c===fn?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(n===B0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===F0||n===N0||n===O0||n===z0||n===H0||n===G0||n===V0||n===k0||n===W0||n===X0||n===q0||n===Y0||n===$0||n===Q0)if(o=e.get("WEBGL_compressed_texture_astc"),o!==null){if(n===F0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===N0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===O0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===z0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===H0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===G0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===V0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===k0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===W0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===X0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===q0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Y0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===$0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Q0)return c===fn?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===sh||n===K0||n===j0)if(o=e.get("EXT_texture_compression_bptc"),o!==null){if(n===sh)return c===fn?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===K0)return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===j0)return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===xT||n===Z0||n===J0||n===e_)if(o=e.get("EXT_texture_compression_rgtc"),o!==null){if(n===sh)return o.COMPRESSED_RED_RGTC1_EXT;if(n===Z0)return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===J0)return o.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===e_)return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===Uu?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:t}}const JO=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,ez=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class tz{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const s=new Mi,o=e.properties.get(s);o.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=s}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new Ia({vertexShader:JO,fragmentShader:ez,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Qs(new Dh(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class nz extends fc{constructor(e,t){super();const n=this;let s=null,o=1,c=null,u="local-floor",f=1,d=null,p=null,m=null,g=null,v=null,A=null;const y=new tz,S=t.getContextAttributes();let _=null,b=null;const E=[],R=[],D=new mn;let L=null;const w=new Ds;w.viewport=new Un;const B=new Ds;B.viewport=new Un;const C=[w,B],T=new M3;let O=null,X=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(j){let ue=E[j];return ue===void 0&&(ue=new Yg,E[j]=ue),ue.getTargetRaySpace()},this.getControllerGrip=function(j){let ue=E[j];return ue===void 0&&(ue=new Yg,E[j]=ue),ue.getGripSpace()},this.getHand=function(j){let ue=E[j];return ue===void 0&&(ue=new Yg,E[j]=ue),ue.getHandSpace()};function $(j){const ue=R.indexOf(j.inputSource);if(ue===-1)return;const ge=E[ue];ge!==void 0&&(ge.update(j.inputSource,j.frame,d||c),ge.dispatchEvent({type:j.type,data:j.inputSource}))}function z(){s.removeEventListener("select",$),s.removeEventListener("selectstart",$),s.removeEventListener("selectend",$),s.removeEventListener("squeeze",$),s.removeEventListener("squeezestart",$),s.removeEventListener("squeezeend",$),s.removeEventListener("end",z),s.removeEventListener("inputsourceschange",k);for(let j=0;j<E.length;j++){const ue=R[j];ue!==null&&(R[j]=null,E[j].disconnect(ue))}O=null,X=null,y.reset(),e.setRenderTarget(_),v=null,g=null,m=null,s=null,b=null,ie.stop(),n.isPresenting=!1,e.setPixelRatio(L),e.setSize(D.width,D.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(j){o=j,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(j){u=j,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||c},this.setReferenceSpace=function(j){d=j},this.getBaseLayer=function(){return g!==null?g:v},this.getBinding=function(){return m},this.getFrame=function(){return A},this.getSession=function(){return s},this.setSession=async function(j){if(s=j,s!==null){if(_=e.getRenderTarget(),s.addEventListener("select",$),s.addEventListener("selectstart",$),s.addEventListener("selectend",$),s.addEventListener("squeeze",$),s.addEventListener("squeezestart",$),s.addEventListener("squeezeend",$),s.addEventListener("end",z),s.addEventListener("inputsourceschange",k),S.xrCompatible!==!0&&await t.makeXRCompatible(),L=e.getPixelRatio(),e.getSize(D),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let ge=null,Ae=null,Be=null;S.depth&&(Be=S.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,ge=S.stencil?Bu:Iu,Ae=S.stencil?Uu:Co);const Ze={colorFormat:t.RGBA8,depthFormat:Be,scaleFactor:o};m=new XRWebGLBinding(s,t),g=m.createProjectionLayer(Ze),s.updateRenderState({layers:[g]}),e.setPixelRatio(1),e.setSize(g.textureWidth,g.textureHeight,!1),b=new Ro(g.textureWidth,g.textureHeight,{format:Is,type:Vr,depthTexture:new PT(g.textureWidth,g.textureHeight,Ae,void 0,void 0,void 0,void 0,void 0,void 0,ge),stencilBuffer:S.stencil,colorSpace:e.outputColorSpace,samples:S.antialias?4:0,resolveDepthBuffer:g.ignoreDepthValues===!1,resolveStencilBuffer:g.ignoreDepthValues===!1})}else{const ge={antialias:S.antialias,alpha:!0,depth:S.depth,stencil:S.stencil,framebufferScaleFactor:o};v=new XRWebGLLayer(s,t,ge),s.updateRenderState({baseLayer:v}),e.setPixelRatio(1),e.setSize(v.framebufferWidth,v.framebufferHeight,!1),b=new Ro(v.framebufferWidth,v.framebufferHeight,{format:Is,type:Vr,colorSpace:e.outputColorSpace,stencilBuffer:S.stencil,resolveDepthBuffer:v.ignoreDepthValues===!1,resolveStencilBuffer:v.ignoreDepthValues===!1})}b.isXRRenderTarget=!0,this.setFoveation(f),d=null,c=await s.requestReferenceSpace(u),ie.setContext(s),ie.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return y.getDepthTexture()};function k(j){for(let ue=0;ue<j.removed.length;ue++){const ge=j.removed[ue],Ae=R.indexOf(ge);Ae>=0&&(R[Ae]=null,E[Ae].disconnect(ge))}for(let ue=0;ue<j.added.length;ue++){const ge=j.added[ue];let Ae=R.indexOf(ge);if(Ae===-1){for(let Ze=0;Ze<E.length;Ze++)if(Ze>=R.length){R.push(ge),Ae=Ze;break}else if(R[Ze]===null){R[Ze]=ge,Ae=Ze;break}if(Ae===-1)break}const Be=E[Ae];Be&&Be.connect(ge)}}const I=new Ne,Y=new Ne;function q(j,ue,ge){I.setFromMatrixPosition(ue.matrixWorld),Y.setFromMatrixPosition(ge.matrixWorld);const Ae=I.distanceTo(Y),Be=ue.projectionMatrix.elements,Ze=ge.projectionMatrix.elements,Xe=Be[14]/(Be[10]-1),ft=Be[14]/(Be[10]+1),_e=(Be[9]+1)/Be[5],ct=(Be[9]-1)/Be[5],Z=(Be[8]-1)/Be[0],it=(Ze[8]+1)/Ze[0],Ke=Xe*Z,at=Xe*it,$e=Ae/(-Z+it),Q=$e*-Z;if(ue.matrixWorld.decompose(j.position,j.quaternion,j.scale),j.translateX(Q),j.translateZ($e),j.matrixWorld.compose(j.position,j.quaternion,j.scale),j.matrixWorldInverse.copy(j.matrixWorld).invert(),Be[10]===-1)j.projectionMatrix.copy(ue.projectionMatrix),j.projectionMatrixInverse.copy(ue.projectionMatrixInverse);else{const G=Xe+$e,N=ft+$e,U=Ke-Q,se=at+(Ae-Q),fe=_e*ft/N*G,Ee=ct*ft/N*G;j.projectionMatrix.makePerspective(U,se,fe,Ee,G,N),j.projectionMatrixInverse.copy(j.projectionMatrix).invert()}}function J(j,ue){ue===null?j.matrixWorld.copy(j.matrix):j.matrixWorld.multiplyMatrices(ue.matrixWorld,j.matrix),j.matrixWorldInverse.copy(j.matrixWorld).invert()}this.updateCamera=function(j){if(s===null)return;let ue=j.near,ge=j.far;y.texture!==null&&(y.depthNear>0&&(ue=y.depthNear),y.depthFar>0&&(ge=y.depthFar)),T.near=B.near=w.near=ue,T.far=B.far=w.far=ge,(O!==T.near||X!==T.far)&&(s.updateRenderState({depthNear:T.near,depthFar:T.far}),O=T.near,X=T.far),w.layers.mask=j.layers.mask|2,B.layers.mask=j.layers.mask|4,T.layers.mask=w.layers.mask|B.layers.mask;const Ae=j.parent,Be=T.cameras;J(T,Ae);for(let Ze=0;Ze<Be.length;Ze++)J(Be[Ze],Ae);Be.length===2?q(T,w,B):T.projectionMatrix.copy(w.projectionMatrix),F(j,T,Ae)};function F(j,ue,ge){ge===null?j.matrix.copy(ue.matrixWorld):(j.matrix.copy(ge.matrixWorld),j.matrix.invert(),j.matrix.multiply(ue.matrixWorld)),j.matrix.decompose(j.position,j.quaternion,j.scale),j.updateMatrixWorld(!0),j.projectionMatrix.copy(ue.projectionMatrix),j.projectionMatrixInverse.copy(ue.projectionMatrixInverse),j.isPerspectiveCamera&&(j.fov=t_*2*Math.atan(1/j.projectionMatrix.elements[5]),j.zoom=1)}this.getCamera=function(){return T},this.getFoveation=function(){if(!(g===null&&v===null))return f},this.setFoveation=function(j){f=j,g!==null&&(g.fixedFoveation=j),v!==null&&v.fixedFoveation!==void 0&&(v.fixedFoveation=j)},this.hasDepthSensing=function(){return y.texture!==null},this.getDepthSensingMesh=function(){return y.getMesh(T)};let ee=null;function ce(j,ue){if(p=ue.getViewerPose(d||c),A=ue,p!==null){const ge=p.views;v!==null&&(e.setRenderTargetFramebuffer(b,v.framebuffer),e.setRenderTarget(b));let Ae=!1;ge.length!==T.cameras.length&&(T.cameras.length=0,Ae=!0);for(let Xe=0;Xe<ge.length;Xe++){const ft=ge[Xe];let _e=null;if(v!==null)_e=v.getViewport(ft);else{const Z=m.getViewSubImage(g,ft);_e=Z.viewport,Xe===0&&(e.setRenderTargetTextures(b,Z.colorTexture,Z.depthStencilTexture),e.setRenderTarget(b))}let ct=C[Xe];ct===void 0&&(ct=new Ds,ct.layers.enable(Xe),ct.viewport=new Un,C[Xe]=ct),ct.matrix.fromArray(ft.transform.matrix),ct.matrix.decompose(ct.position,ct.quaternion,ct.scale),ct.projectionMatrix.fromArray(ft.projectionMatrix),ct.projectionMatrixInverse.copy(ct.projectionMatrix).invert(),ct.viewport.set(_e.x,_e.y,_e.width,_e.height),Xe===0&&(T.matrix.copy(ct.matrix),T.matrix.decompose(T.position,T.quaternion,T.scale)),Ae===!0&&T.cameras.push(ct)}const Be=s.enabledFeatures;if(Be&&Be.includes("depth-sensing")&&s.depthUsage=="gpu-optimized"&&m){const Xe=m.getDepthInformation(ge[0]);Xe&&Xe.isValid&&Xe.texture&&y.init(e,Xe,s.renderState)}}for(let ge=0;ge<E.length;ge++){const Ae=R[ge],Be=E[ge];Ae!==null&&Be!==void 0&&Be.update(Ae,ue,d||c)}ee&&ee(j,ue),ue.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:ue}),A=null}const ie=new UT;ie.setAnimationLoop(ce),this.setAnimationLoop=function(j){ee=j},this.dispose=function(){}}}const oo=new kr,iz=new zn;function sz(r,e){function t(S,_){S.matrixAutoUpdate===!0&&S.updateMatrix(),_.value.copy(S.matrix)}function n(S,_){_.color.getRGB(S.fogColor.value,RT(r)),_.isFog?(S.fogNear.value=_.near,S.fogFar.value=_.far):_.isFogExp2&&(S.fogDensity.value=_.density)}function s(S,_,b,E,R){_.isMeshBasicMaterial||_.isMeshLambertMaterial?o(S,_):_.isMeshToonMaterial?(o(S,_),m(S,_)):_.isMeshPhongMaterial?(o(S,_),p(S,_)):_.isMeshStandardMaterial?(o(S,_),g(S,_),_.isMeshPhysicalMaterial&&v(S,_,R)):_.isMeshMatcapMaterial?(o(S,_),A(S,_)):_.isMeshDepthMaterial?o(S,_):_.isMeshDistanceMaterial?(o(S,_),y(S,_)):_.isMeshNormalMaterial?o(S,_):_.isLineBasicMaterial?(c(S,_),_.isLineDashedMaterial&&u(S,_)):_.isPointsMaterial?f(S,_,b,E):_.isSpriteMaterial?d(S,_):_.isShadowMaterial?(S.color.value.copy(_.color),S.opacity.value=_.opacity):_.isShaderMaterial&&(_.uniformsNeedUpdate=!1)}function o(S,_){S.opacity.value=_.opacity,_.color&&S.diffuse.value.copy(_.color),_.emissive&&S.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.bumpMap&&(S.bumpMap.value=_.bumpMap,t(_.bumpMap,S.bumpMapTransform),S.bumpScale.value=_.bumpScale,_.side===Bi&&(S.bumpScale.value*=-1)),_.normalMap&&(S.normalMap.value=_.normalMap,t(_.normalMap,S.normalMapTransform),S.normalScale.value.copy(_.normalScale),_.side===Bi&&S.normalScale.value.negate()),_.displacementMap&&(S.displacementMap.value=_.displacementMap,t(_.displacementMap,S.displacementMapTransform),S.displacementScale.value=_.displacementScale,S.displacementBias.value=_.displacementBias),_.emissiveMap&&(S.emissiveMap.value=_.emissiveMap,t(_.emissiveMap,S.emissiveMapTransform)),_.specularMap&&(S.specularMap.value=_.specularMap,t(_.specularMap,S.specularMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest);const b=e.get(_),E=b.envMap,R=b.envMapRotation;E&&(S.envMap.value=E,oo.copy(R),oo.x*=-1,oo.y*=-1,oo.z*=-1,E.isCubeTexture&&E.isRenderTargetTexture===!1&&(oo.y*=-1,oo.z*=-1),S.envMapRotation.value.setFromMatrix4(iz.makeRotationFromEuler(oo)),S.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,S.reflectivity.value=_.reflectivity,S.ior.value=_.ior,S.refractionRatio.value=_.refractionRatio),_.lightMap&&(S.lightMap.value=_.lightMap,S.lightMapIntensity.value=_.lightMapIntensity,t(_.lightMap,S.lightMapTransform)),_.aoMap&&(S.aoMap.value=_.aoMap,S.aoMapIntensity.value=_.aoMapIntensity,t(_.aoMap,S.aoMapTransform))}function c(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform))}function u(S,_){S.dashSize.value=_.dashSize,S.totalSize.value=_.dashSize+_.gapSize,S.scale.value=_.scale}function f(S,_,b,E){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.size.value=_.size*b,S.scale.value=E*.5,_.map&&(S.map.value=_.map,t(_.map,S.uvTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function d(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.rotation.value=_.rotation,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function p(S,_){S.specular.value.copy(_.specular),S.shininess.value=Math.max(_.shininess,1e-4)}function m(S,_){_.gradientMap&&(S.gradientMap.value=_.gradientMap)}function g(S,_){S.metalness.value=_.metalness,_.metalnessMap&&(S.metalnessMap.value=_.metalnessMap,t(_.metalnessMap,S.metalnessMapTransform)),S.roughness.value=_.roughness,_.roughnessMap&&(S.roughnessMap.value=_.roughnessMap,t(_.roughnessMap,S.roughnessMapTransform)),_.envMap&&(S.envMapIntensity.value=_.envMapIntensity)}function v(S,_,b){S.ior.value=_.ior,_.sheen>0&&(S.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen),S.sheenRoughness.value=_.sheenRoughness,_.sheenColorMap&&(S.sheenColorMap.value=_.sheenColorMap,t(_.sheenColorMap,S.sheenColorMapTransform)),_.sheenRoughnessMap&&(S.sheenRoughnessMap.value=_.sheenRoughnessMap,t(_.sheenRoughnessMap,S.sheenRoughnessMapTransform))),_.clearcoat>0&&(S.clearcoat.value=_.clearcoat,S.clearcoatRoughness.value=_.clearcoatRoughness,_.clearcoatMap&&(S.clearcoatMap.value=_.clearcoatMap,t(_.clearcoatMap,S.clearcoatMapTransform)),_.clearcoatRoughnessMap&&(S.clearcoatRoughnessMap.value=_.clearcoatRoughnessMap,t(_.clearcoatRoughnessMap,S.clearcoatRoughnessMapTransform)),_.clearcoatNormalMap&&(S.clearcoatNormalMap.value=_.clearcoatNormalMap,t(_.clearcoatNormalMap,S.clearcoatNormalMapTransform),S.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),_.side===Bi&&S.clearcoatNormalScale.value.negate())),_.dispersion>0&&(S.dispersion.value=_.dispersion),_.iridescence>0&&(S.iridescence.value=_.iridescence,S.iridescenceIOR.value=_.iridescenceIOR,S.iridescenceThicknessMinimum.value=_.iridescenceThicknessRange[0],S.iridescenceThicknessMaximum.value=_.iridescenceThicknessRange[1],_.iridescenceMap&&(S.iridescenceMap.value=_.iridescenceMap,t(_.iridescenceMap,S.iridescenceMapTransform)),_.iridescenceThicknessMap&&(S.iridescenceThicknessMap.value=_.iridescenceThicknessMap,t(_.iridescenceThicknessMap,S.iridescenceThicknessMapTransform))),_.transmission>0&&(S.transmission.value=_.transmission,S.transmissionSamplerMap.value=b.texture,S.transmissionSamplerSize.value.set(b.width,b.height),_.transmissionMap&&(S.transmissionMap.value=_.transmissionMap,t(_.transmissionMap,S.transmissionMapTransform)),S.thickness.value=_.thickness,_.thicknessMap&&(S.thicknessMap.value=_.thicknessMap,t(_.thicknessMap,S.thicknessMapTransform)),S.attenuationDistance.value=_.attenuationDistance,S.attenuationColor.value.copy(_.attenuationColor)),_.anisotropy>0&&(S.anisotropyVector.value.set(_.anisotropy*Math.cos(_.anisotropyRotation),_.anisotropy*Math.sin(_.anisotropyRotation)),_.anisotropyMap&&(S.anisotropyMap.value=_.anisotropyMap,t(_.anisotropyMap,S.anisotropyMapTransform))),S.specularIntensity.value=_.specularIntensity,S.specularColor.value.copy(_.specularColor),_.specularColorMap&&(S.specularColorMap.value=_.specularColorMap,t(_.specularColorMap,S.specularColorMapTransform)),_.specularIntensityMap&&(S.specularIntensityMap.value=_.specularIntensityMap,t(_.specularIntensityMap,S.specularIntensityMapTransform))}function A(S,_){_.matcap&&(S.matcap.value=_.matcap)}function y(S,_){const b=e.get(_).light;S.referencePosition.value.setFromMatrixPosition(b.matrixWorld),S.nearDistance.value=b.shadow.camera.near,S.farDistance.value=b.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function rz(r,e,t,n){let s={},o={},c=[];const u=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function f(b,E){const R=E.program;n.uniformBlockBinding(b,R)}function d(b,E){let R=s[b.id];R===void 0&&(A(b),R=p(b),s[b.id]=R,b.addEventListener("dispose",S));const D=E.program;n.updateUBOMapping(b,D);const L=e.render.frame;o[b.id]!==L&&(g(b),o[b.id]=L)}function p(b){const E=m();b.__bindingPointIndex=E;const R=r.createBuffer(),D=b.__size,L=b.usage;return r.bindBuffer(r.UNIFORM_BUFFER,R),r.bufferData(r.UNIFORM_BUFFER,D,L),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,E,R),R}function m(){for(let b=0;b<u;b++)if(c.indexOf(b)===-1)return c.push(b),b;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function g(b){const E=s[b.id],R=b.uniforms,D=b.__cache;r.bindBuffer(r.UNIFORM_BUFFER,E);for(let L=0,w=R.length;L<w;L++){const B=Array.isArray(R[L])?R[L]:[R[L]];for(let C=0,T=B.length;C<T;C++){const O=B[C];if(v(O,L,C,D)===!0){const X=O.__offset,$=Array.isArray(O.value)?O.value:[O.value];let z=0;for(let k=0;k<$.length;k++){const I=$[k],Y=y(I);typeof I=="number"||typeof I=="boolean"?(O.__data[0]=I,r.bufferSubData(r.UNIFORM_BUFFER,X+z,O.__data)):I.isMatrix3?(O.__data[0]=I.elements[0],O.__data[1]=I.elements[1],O.__data[2]=I.elements[2],O.__data[3]=0,O.__data[4]=I.elements[3],O.__data[5]=I.elements[4],O.__data[6]=I.elements[5],O.__data[7]=0,O.__data[8]=I.elements[6],O.__data[9]=I.elements[7],O.__data[10]=I.elements[8],O.__data[11]=0):(I.toArray(O.__data,z),z+=Y.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,X,O.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function v(b,E,R,D){const L=b.value,w=E+"_"+R;if(D[w]===void 0)return typeof L=="number"||typeof L=="boolean"?D[w]=L:D[w]=L.clone(),!0;{const B=D[w];if(typeof L=="number"||typeof L=="boolean"){if(B!==L)return D[w]=L,!0}else if(B.equals(L)===!1)return B.copy(L),!0}return!1}function A(b){const E=b.uniforms;let R=0;const D=16;for(let w=0,B=E.length;w<B;w++){const C=Array.isArray(E[w])?E[w]:[E[w]];for(let T=0,O=C.length;T<O;T++){const X=C[T],$=Array.isArray(X.value)?X.value:[X.value];for(let z=0,k=$.length;z<k;z++){const I=$[z],Y=y(I),q=R%D,J=q%Y.boundary,F=q+J;R+=J,F!==0&&D-F<Y.storage&&(R+=D-F),X.__data=new Float32Array(Y.storage/Float32Array.BYTES_PER_ELEMENT),X.__offset=R,R+=Y.storage}}}const L=R%D;return L>0&&(R+=D-L),b.__size=R,b.__cache={},this}function y(b){const E={boundary:0,storage:0};return typeof b=="number"||typeof b=="boolean"?(E.boundary=4,E.storage=4):b.isVector2?(E.boundary=8,E.storage=8):b.isVector3||b.isColor?(E.boundary=16,E.storage=12):b.isVector4?(E.boundary=16,E.storage=16):b.isMatrix3?(E.boundary=48,E.storage=48):b.isMatrix4?(E.boundary=64,E.storage=64):b.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",b),E}function S(b){const E=b.target;E.removeEventListener("dispose",S);const R=c.indexOf(E.__bindingPointIndex);c.splice(R,1),r.deleteBuffer(s[E.id]),delete s[E.id],delete o[E.id]}function _(){for(const b in s)r.deleteBuffer(s[b]);c=[],s={},o={}}return{bind:f,update:d,dispose:_}}class az{constructor(e={}){const{canvas:t=OI(),context:n=null,depth:s=!0,stencil:o=!1,alpha:c=!1,antialias:u=!1,premultipliedAlpha:f=!0,preserveDrawingBuffer:d=!1,powerPreference:p="default",failIfMajorPerformanceCaveat:m=!1,reverseDepthBuffer:g=!1}=e;this.isWebGLRenderer=!0;let v;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");v=n.getContextAttributes().alpha}else v=c;const A=new Uint32Array(4),y=new Int32Array(4);let S=null,_=null;const b=[],E=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=La,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const R=this;let D=!1;this._outputColorSpace=$i;let L=0,w=0,B=null,C=-1,T=null;const O=new Un,X=new Un;let $=null;const z=new hn(0);let k=0,I=t.width,Y=t.height,q=1,J=null,F=null;const ee=new Un(0,0,I,Y),ce=new Un(0,0,I,Y);let ie=!1;const j=new LT;let ue=!1,ge=!1;const Ae=new zn,Be=new zn,Ze=new Ne,Xe=new Un,ft={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let _e=!1;function ct(){return B===null?q:1}let Z=n;function it(H,ae){return t.getContext(H,ae)}try{const H={alpha:!0,depth:s,stencil:o,antialias:u,premultipliedAlpha:f,preserveDrawingBuffer:d,powerPreference:p,failIfMajorPerformanceCaveat:m};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${R_}`),t.addEventListener("webglcontextlost",he,!1),t.addEventListener("webglcontextrestored",De,!1),t.addEventListener("webglcontextcreationerror",Ge,!1),Z===null){const ae="webgl2";if(Z=it(ae,H),Z===null)throw it(ae)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(H){throw console.error("THREE.WebGLRenderer: "+H.message),H}let Ke,at,$e,Q,G,N,U,se,fe,Ee,pe,Oe,ze,je,Pe,Ve,te,Ce,ke,be,tt,st,St,oe;function Te(){Ke=new gN(Z),Ke.init(),st=new ZO(Z,Ke),at=new cN(Z,Ke,e,st),$e=new KO(Z,Ke),at.reverseDepthBuffer&&g&&$e.buffers.depth.setReversed(!0),Q=new SN(Z),G=new NO,N=new jO(Z,Ke,$e,G,at,st,Q),U=new fN(R),se=new mN(R),fe=new T3(Z),St=new oN(Z,fe),Ee=new _N(Z,fe,Q,St),pe=new AN(Z,Ee,fe,Q),ke=new xN(Z,at,N),Ve=new uN(G),Oe=new FO(R,U,se,Ke,at,St,Ve),ze=new sz(R,G),je=new zO,Pe=new XO(Ke),Ce=new aN(R,U,se,$e,pe,v,f),te=new $O(R,pe,at),oe=new rz(Z,Q,at,$e),be=new lN(Z,Ke,Q),tt=new vN(Z,Ke,Q),Q.programs=Oe.programs,R.capabilities=at,R.extensions=Ke,R.properties=G,R.renderLists=je,R.shadowMap=te,R.state=$e,R.info=Q}Te();const W=new nz(R,Z);this.xr=W,this.getContext=function(){return Z},this.getContextAttributes=function(){return Z.getContextAttributes()},this.forceContextLoss=function(){const H=Ke.get("WEBGL_lose_context");H&&H.loseContext()},this.forceContextRestore=function(){const H=Ke.get("WEBGL_lose_context");H&&H.restoreContext()},this.getPixelRatio=function(){return q},this.setPixelRatio=function(H){H!==void 0&&(q=H,this.setSize(I,Y,!1))},this.getSize=function(H){return H.set(I,Y)},this.setSize=function(H,ae,me=!0){if(W.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}I=H,Y=ae,t.width=Math.floor(H*q),t.height=Math.floor(ae*q),me===!0&&(t.style.width=H+"px",t.style.height=ae+"px"),this.setViewport(0,0,H,ae)},this.getDrawingBufferSize=function(H){return H.set(I*q,Y*q).floor()},this.setDrawingBufferSize=function(H,ae,me){I=H,Y=ae,q=me,t.width=Math.floor(H*me),t.height=Math.floor(ae*me),this.setViewport(0,0,H,ae)},this.getCurrentViewport=function(H){return H.copy(O)},this.getViewport=function(H){return H.copy(ee)},this.setViewport=function(H,ae,me,ve){H.isVector4?ee.set(H.x,H.y,H.z,H.w):ee.set(H,ae,me,ve),$e.viewport(O.copy(ee).multiplyScalar(q).round())},this.getScissor=function(H){return H.copy(ce)},this.setScissor=function(H,ae,me,ve){H.isVector4?ce.set(H.x,H.y,H.z,H.w):ce.set(H,ae,me,ve),$e.scissor(X.copy(ce).multiplyScalar(q).round())},this.getScissorTest=function(){return ie},this.setScissorTest=function(H){$e.setScissorTest(ie=H)},this.setOpaqueSort=function(H){J=H},this.setTransparentSort=function(H){F=H},this.getClearColor=function(H){return H.copy(Ce.getClearColor())},this.setClearColor=function(){Ce.setClearColor(...arguments)},this.getClearAlpha=function(){return Ce.getClearAlpha()},this.setClearAlpha=function(){Ce.setClearAlpha(...arguments)},this.clear=function(H=!0,ae=!0,me=!0){let ve=0;if(H){let le=!1;if(B!==null){const Fe=B.texture.format;le=Fe===I_||Fe===U_||Fe===P_}if(le){const Fe=B.texture.type,qe=Fe===Vr||Fe===Co||Fe===Pu||Fe===Uu||Fe===D_||Fe===L_,et=Ce.getClearColor(),rt=Ce.getClearAlpha(),pt=et.r,_t=et.g,ot=et.b;qe?(A[0]=pt,A[1]=_t,A[2]=ot,A[3]=rt,Z.clearBufferuiv(Z.COLOR,0,A)):(y[0]=pt,y[1]=_t,y[2]=ot,y[3]=rt,Z.clearBufferiv(Z.COLOR,0,y))}else ve|=Z.COLOR_BUFFER_BIT}ae&&(ve|=Z.DEPTH_BUFFER_BIT),me&&(ve|=Z.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Z.clear(ve)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",he,!1),t.removeEventListener("webglcontextrestored",De,!1),t.removeEventListener("webglcontextcreationerror",Ge,!1),Ce.dispose(),je.dispose(),Pe.dispose(),G.dispose(),U.dispose(),se.dispose(),pe.dispose(),St.dispose(),oe.dispose(),Oe.dispose(),W.dispose(),W.removeEventListener("sessionstart",qt),W.removeEventListener("sessionend",an),ni.stop()};function he(H){H.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),D=!0}function De(){console.log("THREE.WebGLRenderer: Context Restored."),D=!1;const H=Q.autoReset,ae=te.enabled,me=te.autoUpdate,ve=te.needsUpdate,le=te.type;Te(),Q.autoReset=H,te.enabled=ae,te.autoUpdate=me,te.needsUpdate=ve,te.type=le}function Ge(H){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",H.statusMessage)}function Je(H){const ae=H.target;ae.removeEventListener("dispose",Je),At(ae)}function At(H){Rt(H),G.remove(H)}function Rt(H){const ae=G.get(H).programs;ae!==void 0&&(ae.forEach(function(me){Oe.releaseProgram(me)}),H.isShaderMaterial&&Oe.releaseShaderCache(H))}this.renderBufferDirect=function(H,ae,me,ve,le,Fe){ae===null&&(ae=ft);const qe=le.isMesh&&le.matrixWorld.determinant()<0,et=nr(H,ae,me,ve,le);$e.setMaterial(ve,qe);let rt=me.index,pt=1;if(ve.wireframe===!0){if(rt=Ee.getWireframeAttribute(me),rt===void 0)return;pt=2}const _t=me.drawRange,ot=me.attributes.position;let dt=_t.start*pt,Wt=(_t.start+_t.count)*pt;Fe!==null&&(dt=Math.max(dt,Fe.start*pt),Wt=Math.min(Wt,(Fe.start+Fe.count)*pt)),rt!==null?(dt=Math.max(dt,0),Wt=Math.min(Wt,rt.count)):ot!=null&&(dt=Math.max(dt,0),Wt=Math.min(Wt,ot.count));const wt=Wt-dt;if(wt<0||wt===1/0)return;St.setup(le,ve,et,me,rt);let Lt,Ht=be;if(rt!==null&&(Lt=fe.get(rt),Ht=tt,Ht.setIndex(Lt)),le.isMesh)ve.wireframe===!0?($e.setLineWidth(ve.wireframeLinewidth*ct()),Ht.setMode(Z.LINES)):Ht.setMode(Z.TRIANGLES);else if(le.isLine){let xt=ve.linewidth;xt===void 0&&(xt=1),$e.setLineWidth(xt*ct()),le.isLineSegments?Ht.setMode(Z.LINES):le.isLineLoop?Ht.setMode(Z.LINE_LOOP):Ht.setMode(Z.LINE_STRIP)}else le.isPoints?Ht.setMode(Z.POINTS):le.isSprite&&Ht.setMode(Z.TRIANGLES);if(le.isBatchedMesh)if(le._multiDrawInstances!==null)rh("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),Ht.renderMultiDrawInstances(le._multiDrawStarts,le._multiDrawCounts,le._multiDrawCount,le._multiDrawInstances);else if(Ke.get("WEBGL_multi_draw"))Ht.renderMultiDraw(le._multiDrawStarts,le._multiDrawCounts,le._multiDrawCount);else{const xt=le._multiDrawStarts,gn=le._multiDrawCounts,Tt=le._multiDrawCount,xn=rt?fe.get(rt).bytesPerElement:1,es=G.get(ve).currentProgram.getUniforms();for(let Ot=0;Ot<Tt;Ot++)es.setValue(Z,"_gl_DrawID",Ot),Ht.render(xt[Ot]/xn,gn[Ot])}else if(le.isInstancedMesh)Ht.renderInstances(dt,wt,le.count);else if(me.isInstancedBufferGeometry){const xt=me._maxInstanceCount!==void 0?me._maxInstanceCount:1/0,gn=Math.min(me.instanceCount,xt);Ht.renderInstances(dt,wt,gn)}else Ht.render(dt,wt)};function Mt(H,ae,me){H.transparent===!0&&H.side===Ir&&H.forceSinglePass===!1?(H.side=Bi,H.needsUpdate=!0,vs(H,ae,me),H.side=Ua,H.needsUpdate=!0,vs(H,ae,me),H.side=Ir):vs(H,ae,me)}this.compile=function(H,ae,me=null){me===null&&(me=H),_=Pe.get(me),_.init(ae),E.push(_),me.traverseVisible(function(le){le.isLight&&le.layers.test(ae.layers)&&(_.pushLight(le),le.castShadow&&_.pushShadow(le))}),H!==me&&H.traverseVisible(function(le){le.isLight&&le.layers.test(ae.layers)&&(_.pushLight(le),le.castShadow&&_.pushShadow(le))}),_.setupLights();const ve=new Set;return H.traverse(function(le){if(!(le.isMesh||le.isPoints||le.isLine||le.isSprite))return;const Fe=le.material;if(Fe)if(Array.isArray(Fe))for(let qe=0;qe<Fe.length;qe++){const et=Fe[qe];Mt(et,me,le),ve.add(et)}else Mt(Fe,me,le),ve.add(Fe)}),_=E.pop(),ve},this.compileAsync=function(H,ae,me=null){const ve=this.compile(H,ae,me);return new Promise(le=>{function Fe(){if(ve.forEach(function(qe){G.get(qe).currentProgram.isReady()&&ve.delete(qe)}),ve.size===0){le(H);return}setTimeout(Fe,10)}Ke.get("KHR_parallel_shader_compile")!==null?Fe():setTimeout(Fe,10)})};let en=null;function Dt(H){en&&en(H)}function qt(){ni.stop()}function an(){ni.start()}const ni=new UT;ni.setAnimationLoop(Dt),typeof self<"u"&&ni.setContext(self),this.setAnimationLoop=function(H){en=H,W.setAnimationLoop(H),H===null?ni.stop():ni.start()},W.addEventListener("sessionstart",qt),W.addEventListener("sessionend",an),this.render=function(H,ae){if(ae!==void 0&&ae.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(D===!0)return;if(H.matrixWorldAutoUpdate===!0&&H.updateMatrixWorld(),ae.parent===null&&ae.matrixWorldAutoUpdate===!0&&ae.updateMatrixWorld(),W.enabled===!0&&W.isPresenting===!0&&(W.cameraAutoUpdate===!0&&W.updateCamera(ae),ae=W.getCamera()),H.isScene===!0&&H.onBeforeRender(R,H,ae,B),_=Pe.get(H,E.length),_.init(ae),E.push(_),Be.multiplyMatrices(ae.projectionMatrix,ae.matrixWorldInverse),j.setFromProjectionMatrix(Be),ge=this.localClippingEnabled,ue=Ve.init(this.clippingPlanes,ge),S=je.get(H,b.length),S.init(),b.push(S),W.enabled===!0&&W.isPresenting===!0){const Fe=R.xr.getDepthSensingMesh();Fe!==null&&er(Fe,ae,-1/0,R.sortObjects)}er(H,ae,0,R.sortObjects),S.finish(),R.sortObjects===!0&&S.sort(J,F),_e=W.enabled===!1||W.isPresenting===!1||W.hasDepthSensing()===!1,_e&&Ce.addToRenderList(S,H),this.info.render.frame++,ue===!0&&Ve.beginShadows();const me=_.state.shadowsArray;te.render(me,H,ae),ue===!0&&Ve.endShadows(),this.info.autoReset===!0&&this.info.reset();const ve=S.opaque,le=S.transmissive;if(_.setupLights(),ae.isArrayCamera){const Fe=ae.cameras;if(le.length>0)for(let qe=0,et=Fe.length;qe<et;qe++){const rt=Fe[qe];Ba(ve,le,H,rt)}_e&&Ce.render(H);for(let qe=0,et=Fe.length;qe<et;qe++){const rt=Fe[qe];tr(S,H,rt,rt.viewport)}}else le.length>0&&Ba(ve,le,H,ae),_e&&Ce.render(H),tr(S,H,ae);B!==null&&w===0&&(N.updateMultisampleRenderTarget(B),N.updateRenderTargetMipmap(B)),H.isScene===!0&&H.onAfterRender(R,H,ae),St.resetDefaultState(),C=-1,T=null,E.pop(),E.length>0?(_=E[E.length-1],ue===!0&&Ve.setGlobalState(R.clippingPlanes,_.state.camera)):_=null,b.pop(),b.length>0?S=b[b.length-1]:S=null};function er(H,ae,me,ve){if(H.visible===!1)return;if(H.layers.test(ae.layers)){if(H.isGroup)me=H.renderOrder;else if(H.isLOD)H.autoUpdate===!0&&H.update(ae);else if(H.isLight)_.pushLight(H),H.castShadow&&_.pushShadow(H);else if(H.isSprite){if(!H.frustumCulled||j.intersectsSprite(H)){ve&&Xe.setFromMatrixPosition(H.matrixWorld).applyMatrix4(Be);const qe=pe.update(H),et=H.material;et.visible&&S.push(H,qe,et,me,Xe.z,null)}}else if((H.isMesh||H.isLine||H.isPoints)&&(!H.frustumCulled||j.intersectsObject(H))){const qe=pe.update(H),et=H.material;if(ve&&(H.boundingSphere!==void 0?(H.boundingSphere===null&&H.computeBoundingSphere(),Xe.copy(H.boundingSphere.center)):(qe.boundingSphere===null&&qe.computeBoundingSphere(),Xe.copy(qe.boundingSphere.center)),Xe.applyMatrix4(H.matrixWorld).applyMatrix4(Be)),Array.isArray(et)){const rt=qe.groups;for(let pt=0,_t=rt.length;pt<_t;pt++){const ot=rt[pt],dt=et[ot.materialIndex];dt&&dt.visible&&S.push(H,qe,dt,me,Xe.z,ot)}}else et.visible&&S.push(H,qe,et,me,Xe.z,null)}}const Fe=H.children;for(let qe=0,et=Fe.length;qe<et;qe++)er(Fe[qe],ae,me,ve)}function tr(H,ae,me,ve){const le=H.opaque,Fe=H.transmissive,qe=H.transparent;_.setupLightsView(me),ue===!0&&Ve.setGlobalState(R.clippingPlanes,me),ve&&$e.viewport(O.copy(ve)),le.length>0&&Ji(le,ae,me),Fe.length>0&&Ji(Fe,ae,me),qe.length>0&&Ji(qe,ae,me),$e.buffers.depth.setTest(!0),$e.buffers.depth.setMask(!0),$e.buffers.color.setMask(!0),$e.setPolygonOffset(!1)}function Ba(H,ae,me,ve){if((me.isScene===!0?me.overrideMaterial:null)!==null)return;_.state.transmissionRenderTarget[ve.id]===void 0&&(_.state.transmissionRenderTarget[ve.id]=new Ro(1,1,{generateMipmaps:!0,type:Ke.has("EXT_color_buffer_half_float")||Ke.has("EXT_color_buffer_float")?zu:Vr,minFilter:yo,samples:4,stencilBuffer:o,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Kt.workingColorSpace}));const Fe=_.state.transmissionRenderTarget[ve.id],qe=ve.viewport||O;Fe.setSize(qe.z*R.transmissionResolutionScale,qe.w*R.transmissionResolutionScale);const et=R.getRenderTarget();R.setRenderTarget(Fe),R.getClearColor(z),k=R.getClearAlpha(),k<1&&R.setClearColor(16777215,.5),R.clear(),_e&&Ce.render(me);const rt=R.toneMapping;R.toneMapping=La;const pt=ve.viewport;if(ve.viewport!==void 0&&(ve.viewport=void 0),_.setupLightsView(ve),ue===!0&&Ve.setGlobalState(R.clippingPlanes,ve),Ji(H,me,ve),N.updateMultisampleRenderTarget(Fe),N.updateRenderTargetMipmap(Fe),Ke.has("WEBGL_multisampled_render_to_texture")===!1){let _t=!1;for(let ot=0,dt=ae.length;ot<dt;ot++){const Wt=ae[ot],wt=Wt.object,Lt=Wt.geometry,Ht=Wt.material,xt=Wt.group;if(Ht.side===Ir&&wt.layers.test(ve.layers)){const gn=Ht.side;Ht.side=Bi,Ht.needsUpdate=!0,_s(wt,me,ve,Lt,Ht,xt),Ht.side=gn,Ht.needsUpdate=!0,_t=!0}}_t===!0&&(N.updateMultisampleRenderTarget(Fe),N.updateRenderTargetMipmap(Fe))}R.setRenderTarget(et),R.setClearColor(z,k),pt!==void 0&&(ve.viewport=pt),R.toneMapping=rt}function Ji(H,ae,me){const ve=ae.isScene===!0?ae.overrideMaterial:null;for(let le=0,Fe=H.length;le<Fe;le++){const qe=H[le],et=qe.object,rt=qe.geometry,pt=qe.group;let _t=qe.material;_t.allowOverride===!0&&ve!==null&&(_t=ve),et.layers.test(me.layers)&&_s(et,ae,me,rt,_t,pt)}}function _s(H,ae,me,ve,le,Fe){H.onBeforeRender(R,ae,me,ve,le,Fe),H.modelViewMatrix.multiplyMatrices(me.matrixWorldInverse,H.matrixWorld),H.normalMatrix.getNormalMatrix(H.modelViewMatrix),le.onBeforeRender(R,ae,me,ve,H,Fe),le.transparent===!0&&le.side===Ir&&le.forceSinglePass===!1?(le.side=Bi,le.needsUpdate=!0,R.renderBufferDirect(me,ae,ve,le,H,Fe),le.side=Ua,le.needsUpdate=!0,R.renderBufferDirect(me,ae,ve,le,H,Fe),le.side=Ir):R.renderBufferDirect(me,ae,ve,le,H,Fe),H.onAfterRender(R,ae,me,ve,le,Fe)}function vs(H,ae,me){ae.isScene!==!0&&(ae=ft);const ve=G.get(H),le=_.state.lights,Fe=_.state.shadowsArray,qe=le.state.version,et=Oe.getParameters(H,le.state,Fe,ae,me),rt=Oe.getProgramCacheKey(et);let pt=ve.programs;ve.environment=H.isMeshStandardMaterial?ae.environment:null,ve.fog=ae.fog,ve.envMap=(H.isMeshStandardMaterial?se:U).get(H.envMap||ve.environment),ve.envMapRotation=ve.environment!==null&&H.envMap===null?ae.environmentRotation:H.envMapRotation,pt===void 0&&(H.addEventListener("dispose",Je),pt=new Map,ve.programs=pt);let _t=pt.get(rt);if(_t!==void 0){if(ve.currentProgram===_t&&ve.lightsStateVersion===qe)return xs(H,et),_t}else et.uniforms=Oe.getUniforms(H),H.onBeforeCompile(et,R),_t=Oe.acquireProgram(et,rt),pt.set(rt,_t),ve.uniforms=et.uniforms;const ot=ve.uniforms;return(!H.isShaderMaterial&&!H.isRawShaderMaterial||H.clipping===!0)&&(ot.clippingPlanes=Ve.uniform),xs(H,et),ve.needsLights=Se(H),ve.lightsStateVersion=qe,ve.needsLights&&(ot.ambientLightColor.value=le.state.ambient,ot.lightProbe.value=le.state.probe,ot.directionalLights.value=le.state.directional,ot.directionalLightShadows.value=le.state.directionalShadow,ot.spotLights.value=le.state.spot,ot.spotLightShadows.value=le.state.spotShadow,ot.rectAreaLights.value=le.state.rectArea,ot.ltc_1.value=le.state.rectAreaLTC1,ot.ltc_2.value=le.state.rectAreaLTC2,ot.pointLights.value=le.state.point,ot.pointLightShadows.value=le.state.pointShadow,ot.hemisphereLights.value=le.state.hemi,ot.directionalShadowMap.value=le.state.directionalShadowMap,ot.directionalShadowMatrix.value=le.state.directionalShadowMatrix,ot.spotShadowMap.value=le.state.spotShadowMap,ot.spotLightMatrix.value=le.state.spotLightMatrix,ot.spotLightMap.value=le.state.spotLightMap,ot.pointShadowMap.value=le.state.pointShadowMap,ot.pointShadowMatrix.value=le.state.pointShadowMatrix),ve.currentProgram=_t,ve.uniformsList=null,_t}function Ss(H){if(H.uniformsList===null){const ae=H.currentProgram.getUniforms();H.uniformsList=ah.seqWithValue(ae.seq,H.uniforms)}return H.uniformsList}function xs(H,ae){const me=G.get(H);me.outputColorSpace=ae.outputColorSpace,me.batching=ae.batching,me.batchingColor=ae.batchingColor,me.instancing=ae.instancing,me.instancingColor=ae.instancingColor,me.instancingMorph=ae.instancingMorph,me.skinning=ae.skinning,me.morphTargets=ae.morphTargets,me.morphNormals=ae.morphNormals,me.morphColors=ae.morphColors,me.morphTargetsCount=ae.morphTargetsCount,me.numClippingPlanes=ae.numClippingPlanes,me.numIntersection=ae.numClipIntersection,me.vertexAlphas=ae.vertexAlphas,me.vertexTangents=ae.vertexTangents,me.toneMapping=ae.toneMapping}function nr(H,ae,me,ve,le){ae.isScene!==!0&&(ae=ft),N.resetTextureUnits();const Fe=ae.fog,qe=ve.isMeshStandardMaterial?ae.environment:null,et=B===null?R.outputColorSpace:B.isXRRenderTarget===!0?B.texture.colorSpace:lc,rt=(ve.isMeshStandardMaterial?se:U).get(ve.envMap||qe),pt=ve.vertexColors===!0&&!!me.attributes.color&&me.attributes.color.itemSize===4,_t=!!me.attributes.tangent&&(!!ve.normalMap||ve.anisotropy>0),ot=!!me.morphAttributes.position,dt=!!me.morphAttributes.normal,Wt=!!me.morphAttributes.color;let wt=La;ve.toneMapped&&(B===null||B.isXRRenderTarget===!0)&&(wt=R.toneMapping);const Lt=me.morphAttributes.position||me.morphAttributes.normal||me.morphAttributes.color,Ht=Lt!==void 0?Lt.length:0,xt=G.get(ve),gn=_.state.lights;if(ue===!0&&(ge===!0||H!==T)){const Qn=H===T&&ve.id===C;Ve.setState(ve,H,Qn)}let Tt=!1;ve.version===xt.__version?(xt.needsLights&&xt.lightsStateVersion!==gn.state.version||xt.outputColorSpace!==et||le.isBatchedMesh&&xt.batching===!1||!le.isBatchedMesh&&xt.batching===!0||le.isBatchedMesh&&xt.batchingColor===!0&&le.colorTexture===null||le.isBatchedMesh&&xt.batchingColor===!1&&le.colorTexture!==null||le.isInstancedMesh&&xt.instancing===!1||!le.isInstancedMesh&&xt.instancing===!0||le.isSkinnedMesh&&xt.skinning===!1||!le.isSkinnedMesh&&xt.skinning===!0||le.isInstancedMesh&&xt.instancingColor===!0&&le.instanceColor===null||le.isInstancedMesh&&xt.instancingColor===!1&&le.instanceColor!==null||le.isInstancedMesh&&xt.instancingMorph===!0&&le.morphTexture===null||le.isInstancedMesh&&xt.instancingMorph===!1&&le.morphTexture!==null||xt.envMap!==rt||ve.fog===!0&&xt.fog!==Fe||xt.numClippingPlanes!==void 0&&(xt.numClippingPlanes!==Ve.numPlanes||xt.numIntersection!==Ve.numIntersection)||xt.vertexAlphas!==pt||xt.vertexTangents!==_t||xt.morphTargets!==ot||xt.morphNormals!==dt||xt.morphColors!==Wt||xt.toneMapping!==wt||xt.morphTargetsCount!==Ht)&&(Tt=!0):(Tt=!0,xt.__version=ve.version);let xn=xt.currentProgram;Tt===!0&&(xn=vs(ve,ae,le));let es=!1,Ot=!1,Fi=!1;const tn=xn.getUniforms(),Hn=xt.uniforms;if($e.useProgram(xn.program)&&(es=!0,Ot=!0,Fi=!0),ve.id!==C&&(C=ve.id,Ot=!0),es||T!==H){$e.buffers.depth.getReversed()?(Ae.copy(H.projectionMatrix),HI(Ae),GI(Ae),tn.setValue(Z,"projectionMatrix",Ae)):tn.setValue(Z,"projectionMatrix",H.projectionMatrix),tn.setValue(Z,"viewMatrix",H.matrixWorldInverse);const ii=tn.map.cameraPosition;ii!==void 0&&ii.setValue(Z,Ze.setFromMatrixPosition(H.matrixWorld)),at.logarithmicDepthBuffer&&tn.setValue(Z,"logDepthBufFC",2/(Math.log(H.far+1)/Math.LN2)),(ve.isMeshPhongMaterial||ve.isMeshToonMaterial||ve.isMeshLambertMaterial||ve.isMeshBasicMaterial||ve.isMeshStandardMaterial||ve.isShaderMaterial)&&tn.setValue(Z,"isOrthographic",H.isOrthographicCamera===!0),T!==H&&(T=H,Ot=!0,Fi=!0)}if(le.isSkinnedMesh){tn.setOptional(Z,le,"bindMatrix"),tn.setOptional(Z,le,"bindMatrixInverse");const Qn=le.skeleton;Qn&&(Qn.boneTexture===null&&Qn.computeBoneTexture(),tn.setValue(Z,"boneTexture",Qn.boneTexture,N))}le.isBatchedMesh&&(tn.setOptional(Z,le,"batchingTexture"),tn.setValue(Z,"batchingTexture",le._matricesTexture,N),tn.setOptional(Z,le,"batchingIdTexture"),tn.setValue(Z,"batchingIdTexture",le._indirectTexture,N),tn.setOptional(Z,le,"batchingColorTexture"),le._colorsTexture!==null&&tn.setValue(Z,"batchingColorTexture",le._colorsTexture,N));const Gn=me.morphAttributes;if((Gn.position!==void 0||Gn.normal!==void 0||Gn.color!==void 0)&&ke.update(le,me,xn),(Ot||xt.receiveShadow!==le.receiveShadow)&&(xt.receiveShadow=le.receiveShadow,tn.setValue(Z,"receiveShadow",le.receiveShadow)),ve.isMeshGouraudMaterial&&ve.envMap!==null&&(Hn.envMap.value=rt,Hn.flipEnvMap.value=rt.isCubeTexture&&rt.isRenderTargetTexture===!1?-1:1),ve.isMeshStandardMaterial&&ve.envMap===null&&ae.environment!==null&&(Hn.envMapIntensity.value=ae.environmentIntensity),Ot&&(tn.setValue(Z,"toneMappingExposure",R.toneMappingExposure),xt.needsLights&&K(Hn,Fi),Fe&&ve.fog===!0&&ze.refreshFogUniforms(Hn,Fe),ze.refreshMaterialUniforms(Hn,ve,q,Y,_.state.transmissionRenderTarget[H.id]),ah.upload(Z,Ss(xt),Hn,N)),ve.isShaderMaterial&&ve.uniformsNeedUpdate===!0&&(ah.upload(Z,Ss(xt),Hn,N),ve.uniformsNeedUpdate=!1),ve.isSpriteMaterial&&tn.setValue(Z,"center",le.center),tn.setValue(Z,"modelViewMatrix",le.modelViewMatrix),tn.setValue(Z,"normalMatrix",le.normalMatrix),tn.setValue(Z,"modelMatrix",le.matrixWorld),ve.isShaderMaterial||ve.isRawShaderMaterial){const Qn=ve.uniformsGroups;for(let ii=0,Fs=Qn.length;ii<Fs;ii++){const ir=Qn[ii];oe.update(ir,xn),oe.bind(ir,xn)}}return xn}function K(H,ae){H.ambientLightColor.needsUpdate=ae,H.lightProbe.needsUpdate=ae,H.directionalLights.needsUpdate=ae,H.directionalLightShadows.needsUpdate=ae,H.pointLights.needsUpdate=ae,H.pointLightShadows.needsUpdate=ae,H.spotLights.needsUpdate=ae,H.spotLightShadows.needsUpdate=ae,H.rectAreaLights.needsUpdate=ae,H.hemisphereLights.needsUpdate=ae}function Se(H){return H.isMeshLambertMaterial||H.isMeshToonMaterial||H.isMeshPhongMaterial||H.isMeshStandardMaterial||H.isShadowMaterial||H.isShaderMaterial&&H.lights===!0}this.getActiveCubeFace=function(){return L},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return B},this.setRenderTargetTextures=function(H,ae,me){const ve=G.get(H);ve.__autoAllocateDepthBuffer=H.resolveDepthBuffer===!1,ve.__autoAllocateDepthBuffer===!1&&(ve.__useRenderToTexture=!1),G.get(H.texture).__webglTexture=ae,G.get(H.depthTexture).__webglTexture=ve.__autoAllocateDepthBuffer?void 0:me,ve.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(H,ae){const me=G.get(H);me.__webglFramebuffer=ae,me.__useDefaultFramebuffer=ae===void 0};const Ue=Z.createFramebuffer();this.setRenderTarget=function(H,ae=0,me=0){B=H,L=ae,w=me;let ve=!0,le=null,Fe=!1,qe=!1;if(H){const rt=G.get(H);if(rt.__useDefaultFramebuffer!==void 0)$e.bindFramebuffer(Z.FRAMEBUFFER,null),ve=!1;else if(rt.__webglFramebuffer===void 0)N.setupRenderTarget(H);else if(rt.__hasExternalTextures)N.rebindTextures(H,G.get(H.texture).__webglTexture,G.get(H.depthTexture).__webglTexture);else if(H.depthBuffer){const ot=H.depthTexture;if(rt.__boundDepthTexture!==ot){if(ot!==null&&G.has(ot)&&(H.width!==ot.image.width||H.height!==ot.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");N.setupDepthRenderbuffer(H)}}const pt=H.texture;(pt.isData3DTexture||pt.isDataArrayTexture||pt.isCompressedArrayTexture)&&(qe=!0);const _t=G.get(H).__webglFramebuffer;H.isWebGLCubeRenderTarget?(Array.isArray(_t[ae])?le=_t[ae][me]:le=_t[ae],Fe=!0):H.samples>0&&N.useMultisampledRTT(H)===!1?le=G.get(H).__webglMultisampledFramebuffer:Array.isArray(_t)?le=_t[me]:le=_t,O.copy(H.viewport),X.copy(H.scissor),$=H.scissorTest}else O.copy(ee).multiplyScalar(q).floor(),X.copy(ce).multiplyScalar(q).floor(),$=ie;if(me!==0&&(le=Ue),$e.bindFramebuffer(Z.FRAMEBUFFER,le)&&ve&&$e.drawBuffers(H,le),$e.viewport(O),$e.scissor(X),$e.setScissorTest($),Fe){const rt=G.get(H.texture);Z.framebufferTexture2D(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_CUBE_MAP_POSITIVE_X+ae,rt.__webglTexture,me)}else if(qe){const rt=G.get(H.texture),pt=ae;Z.framebufferTextureLayer(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,rt.__webglTexture,me,pt)}else if(H!==null&&me!==0){const rt=G.get(H.texture);Z.framebufferTexture2D(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,rt.__webglTexture,me)}C=-1},this.readRenderTargetPixels=function(H,ae,me,ve,le,Fe,qe){if(!(H&&H.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let et=G.get(H).__webglFramebuffer;if(H.isWebGLCubeRenderTarget&&qe!==void 0&&(et=et[qe]),et){$e.bindFramebuffer(Z.FRAMEBUFFER,et);try{const rt=H.texture,pt=rt.format,_t=rt.type;if(!at.textureFormatReadable(pt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!at.textureTypeReadable(_t)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}ae>=0&&ae<=H.width-ve&&me>=0&&me<=H.height-le&&Z.readPixels(ae,me,ve,le,st.convert(pt),st.convert(_t),Fe)}finally{const rt=B!==null?G.get(B).__webglFramebuffer:null;$e.bindFramebuffer(Z.FRAMEBUFFER,rt)}}},this.readRenderTargetPixelsAsync=async function(H,ae,me,ve,le,Fe,qe){if(!(H&&H.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let et=G.get(H).__webglFramebuffer;if(H.isWebGLCubeRenderTarget&&qe!==void 0&&(et=et[qe]),et)if(ae>=0&&ae<=H.width-ve&&me>=0&&me<=H.height-le){$e.bindFramebuffer(Z.FRAMEBUFFER,et);const rt=H.texture,pt=rt.format,_t=rt.type;if(!at.textureFormatReadable(pt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!at.textureTypeReadable(_t))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const ot=Z.createBuffer();Z.bindBuffer(Z.PIXEL_PACK_BUFFER,ot),Z.bufferData(Z.PIXEL_PACK_BUFFER,Fe.byteLength,Z.STREAM_READ),Z.readPixels(ae,me,ve,le,st.convert(pt),st.convert(_t),0);const dt=B!==null?G.get(B).__webglFramebuffer:null;$e.bindFramebuffer(Z.FRAMEBUFFER,dt);const Wt=Z.fenceSync(Z.SYNC_GPU_COMMANDS_COMPLETE,0);return Z.flush(),await zI(Z,Wt,4),Z.bindBuffer(Z.PIXEL_PACK_BUFFER,ot),Z.getBufferSubData(Z.PIXEL_PACK_BUFFER,0,Fe),Z.deleteBuffer(ot),Z.deleteSync(Wt),Fe}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(H,ae=null,me=0){const ve=Math.pow(2,-me),le=Math.floor(H.image.width*ve),Fe=Math.floor(H.image.height*ve),qe=ae!==null?ae.x:0,et=ae!==null?ae.y:0;N.setTexture2D(H,0),Z.copyTexSubImage2D(Z.TEXTURE_2D,me,0,0,qe,et,le,Fe),$e.unbindTexture()};const Ie=Z.createFramebuffer(),we=Z.createFramebuffer();this.copyTextureToTexture=function(H,ae,me=null,ve=null,le=0,Fe=null){Fe===null&&(le!==0?(rh("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Fe=le,le=0):Fe=0);let qe,et,rt,pt,_t,ot,dt,Wt,wt;const Lt=H.isCompressedTexture?H.mipmaps[Fe]:H.image;if(me!==null)qe=me.max.x-me.min.x,et=me.max.y-me.min.y,rt=me.isBox3?me.max.z-me.min.z:1,pt=me.min.x,_t=me.min.y,ot=me.isBox3?me.min.z:0;else{const Gn=Math.pow(2,-le);qe=Math.floor(Lt.width*Gn),et=Math.floor(Lt.height*Gn),H.isDataArrayTexture?rt=Lt.depth:H.isData3DTexture?rt=Math.floor(Lt.depth*Gn):rt=1,pt=0,_t=0,ot=0}ve!==null?(dt=ve.x,Wt=ve.y,wt=ve.z):(dt=0,Wt=0,wt=0);const Ht=st.convert(ae.format),xt=st.convert(ae.type);let gn;ae.isData3DTexture?(N.setTexture3D(ae,0),gn=Z.TEXTURE_3D):ae.isDataArrayTexture||ae.isCompressedArrayTexture?(N.setTexture2DArray(ae,0),gn=Z.TEXTURE_2D_ARRAY):(N.setTexture2D(ae,0),gn=Z.TEXTURE_2D),Z.pixelStorei(Z.UNPACK_FLIP_Y_WEBGL,ae.flipY),Z.pixelStorei(Z.UNPACK_PREMULTIPLY_ALPHA_WEBGL,ae.premultiplyAlpha),Z.pixelStorei(Z.UNPACK_ALIGNMENT,ae.unpackAlignment);const Tt=Z.getParameter(Z.UNPACK_ROW_LENGTH),xn=Z.getParameter(Z.UNPACK_IMAGE_HEIGHT),es=Z.getParameter(Z.UNPACK_SKIP_PIXELS),Ot=Z.getParameter(Z.UNPACK_SKIP_ROWS),Fi=Z.getParameter(Z.UNPACK_SKIP_IMAGES);Z.pixelStorei(Z.UNPACK_ROW_LENGTH,Lt.width),Z.pixelStorei(Z.UNPACK_IMAGE_HEIGHT,Lt.height),Z.pixelStorei(Z.UNPACK_SKIP_PIXELS,pt),Z.pixelStorei(Z.UNPACK_SKIP_ROWS,_t),Z.pixelStorei(Z.UNPACK_SKIP_IMAGES,ot);const tn=H.isDataArrayTexture||H.isData3DTexture,Hn=ae.isDataArrayTexture||ae.isData3DTexture;if(H.isDepthTexture){const Gn=G.get(H),Qn=G.get(ae),ii=G.get(Gn.__renderTarget),Fs=G.get(Qn.__renderTarget);$e.bindFramebuffer(Z.READ_FRAMEBUFFER,ii.__webglFramebuffer),$e.bindFramebuffer(Z.DRAW_FRAMEBUFFER,Fs.__webglFramebuffer);for(let ir=0;ir<rt;ir++)tn&&(Z.framebufferTextureLayer(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,G.get(H).__webglTexture,le,ot+ir),Z.framebufferTextureLayer(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,G.get(ae).__webglTexture,Fe,wt+ir)),Z.blitFramebuffer(pt,_t,qe,et,dt,Wt,qe,et,Z.DEPTH_BUFFER_BIT,Z.NEAREST);$e.bindFramebuffer(Z.READ_FRAMEBUFFER,null),$e.bindFramebuffer(Z.DRAW_FRAMEBUFFER,null)}else if(le!==0||H.isRenderTargetTexture||G.has(H)){const Gn=G.get(H),Qn=G.get(ae);$e.bindFramebuffer(Z.READ_FRAMEBUFFER,Ie),$e.bindFramebuffer(Z.DRAW_FRAMEBUFFER,we);for(let ii=0;ii<rt;ii++)tn?Z.framebufferTextureLayer(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Gn.__webglTexture,le,ot+ii):Z.framebufferTexture2D(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,Gn.__webglTexture,le),Hn?Z.framebufferTextureLayer(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Qn.__webglTexture,Fe,wt+ii):Z.framebufferTexture2D(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,Qn.__webglTexture,Fe),le!==0?Z.blitFramebuffer(pt,_t,qe,et,dt,Wt,qe,et,Z.COLOR_BUFFER_BIT,Z.NEAREST):Hn?Z.copyTexSubImage3D(gn,Fe,dt,Wt,wt+ii,pt,_t,qe,et):Z.copyTexSubImage2D(gn,Fe,dt,Wt,pt,_t,qe,et);$e.bindFramebuffer(Z.READ_FRAMEBUFFER,null),$e.bindFramebuffer(Z.DRAW_FRAMEBUFFER,null)}else Hn?H.isDataTexture||H.isData3DTexture?Z.texSubImage3D(gn,Fe,dt,Wt,wt,qe,et,rt,Ht,xt,Lt.data):ae.isCompressedArrayTexture?Z.compressedTexSubImage3D(gn,Fe,dt,Wt,wt,qe,et,rt,Ht,Lt.data):Z.texSubImage3D(gn,Fe,dt,Wt,wt,qe,et,rt,Ht,xt,Lt):H.isDataTexture?Z.texSubImage2D(Z.TEXTURE_2D,Fe,dt,Wt,qe,et,Ht,xt,Lt.data):H.isCompressedTexture?Z.compressedTexSubImage2D(Z.TEXTURE_2D,Fe,dt,Wt,Lt.width,Lt.height,Ht,Lt.data):Z.texSubImage2D(Z.TEXTURE_2D,Fe,dt,Wt,qe,et,Ht,xt,Lt);Z.pixelStorei(Z.UNPACK_ROW_LENGTH,Tt),Z.pixelStorei(Z.UNPACK_IMAGE_HEIGHT,xn),Z.pixelStorei(Z.UNPACK_SKIP_PIXELS,es),Z.pixelStorei(Z.UNPACK_SKIP_ROWS,Ot),Z.pixelStorei(Z.UNPACK_SKIP_IMAGES,Fi),Fe===0&&ae.generateMipmaps&&Z.generateMipmap(gn),$e.unbindTexture()},this.copyTextureToTexture3D=function(H,ae,me=null,ve=null,le=0){return rh('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(H,ae,me,ve,le)},this.initRenderTarget=function(H){G.get(H).__webglFramebuffer===void 0&&N.setupRenderTarget(H)},this.initTexture=function(H){H.isCubeTexture?N.setTextureCube(H,0):H.isData3DTexture?N.setTexture3D(H,0):H.isDataArrayTexture||H.isCompressedArrayTexture?N.setTexture2DArray(H,0):N.setTexture2D(H,0),$e.unbindTexture()},this.resetState=function(){L=0,w=0,B=null,$e.reset(),St.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Nr}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=Kt._getDrawingBufferColorSpace(e),t.unpackColorSpace=Kt._getUnpackColorSpace()}}function oz(r,e=!1){const[t,n]=Vs.useState(null),[s,o]=Vs.useState(null),[c,u]=Vs.useState(null),[f,d]=Vs.useState(!1);Vs.useEffect(()=>{if(!t)return;if(console.log("Creating viewer"),!r.current){console.error("Ref is not set");return}r.current.appendChild(t.domElement);const g=()=>{if(r.current&&t){const{clientWidth:_,clientHeight:b}=r.current;t.setSize(_,b)}};g(),window.addEventListener("resize",g),e&&console.log("XR mode enabled");const v=12303291,A=new dc(0,0,0),y=new Qs(A,new N_({color:v}));if(y.position.set(0,0,0),!s){console.warn("Scene is not set");return}s.add(y);const S=new $U({renderer:t,cameraUp:[0,1,0],initialCameraPosition:[-8,6,-8],initialCameraLookAt:[0,0,0],webXRMode:e?uo.AR:null,sphericalHarmonicsDegree:2,integerBasedSort:!0,threeScene:s});return u(S),()=>{window.removeEventListener("resize",g)}},[t]),Vs.useEffect(()=>{if(console.log("use3DGS called"),!r.current){console.error("Ref is not set");return}if(!t){console.log("Creating renderer");const g=new az({antialias:!1});n(g);const v=new h3;o(v);const A=g.domElement;A.className+="w-full h-full"}return()=>{var g;console.log("Cleaning up 3DGS"),(g=r.current)==null||g.removeChild(t==null?void 0:t.domElement)}},[r]);function p(g){if(!t)return;console.log("Setting skybox",g);const A=new A3().load(g,()=>{if(console.log("Skybox loaded",A),A.mapping=_h,A.colorSpace=$i,!s){console.error("Scene is not set");return}s.background=A})}function m(g){return c.addSplatScene(g,{splatAlphaRemovalThreshold:5,progressiveLoad:!1,position:[0,-1,0],rotation:[-.258819,0,.9659258,0],scale:[1.5,1.5,1.5]}).then(()=>{c.start(),d(!0)}),()=>{c.stop()}}return{viewer:c,addSplatScene:m,setSkybox:p,modelLoaded:f}}const lz=({src:r,skyboxSrc:e=void 0,xr:t=!1,onLoaded:n,...s})=>{const o=qC.useRef(null),{viewer:c,addSplatScene:u,setSkybox:f,modelLoaded:d}=oz(o,t);return Vs.useEffect(()=>{d&&(n==null||n(),console.log("Model loaded"))},[d,n]),Vs.useEffect(()=>{c&&(console.log("Viewer initialized"),e&&f(e),u(r))},[c]),Ui.jsx("div",{ref:o,...s,children:!d&&Ui.jsx("div",{className:"absolute inset-0 flex items-center justify-center",children:Ui.jsx("div",{className:"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-gray-500"})})})},cz=({title:r="3D Viewer",model:e="Bonsai",file:t="bonsai_trimmed.ksplat"})=>Ui.jsx("div",{className:"fixed bottom-4 left-4 right-4 bg-white bg-opacity-50 text-black p-4 z-10 rounded-lg shadow-lg flex justify-between items-center",children:Ui.jsxs("div",{children:[Ui.jsx("h1",{className:"text-lg font-bold",children:r}),Ui.jsxs("p",{children:["Model: ",e]}),Ui.jsxs("p",{children:["File: ",t]})]})});function uz(){return Ui.jsxs(Ui.Fragment,{children:[Ui.jsx(cz,{title:"Clock",model:"Vintage",file:"clock.ksplat"}),Ui.jsx(lz,{src:"clock.ksplat",skyboxSrc:"alex.jpg",className:"w-full h-full"})]})}JC.createRoot(document.getElementById("root")).render(Ui.jsx(Vs.StrictMode,{children:Ui.jsx(uz,{})}));
